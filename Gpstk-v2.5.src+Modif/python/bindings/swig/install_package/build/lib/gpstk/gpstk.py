# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gpstk', [dirname(__file__)])
        except ImportError:
            import _gpstk
            return _gpstk
        if fp is not None:
            try:
                _mod = imp.load_module('_gpstk', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gpstk = swig_import_helper()
    del swig_import_helper
else:
    import _gpstk
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _gpstk.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _gpstk.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _gpstk.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _gpstk.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _gpstk.SwigPyIterator_equal(self, x)


    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _gpstk.SwigPyIterator_copy(self)


    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _gpstk.SwigPyIterator_next(self)


    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _gpstk.SwigPyIterator___next__(self)


    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _gpstk.SwigPyIterator_previous(self)


    def advance(self, n):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _gpstk.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _gpstk.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _gpstk.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _gpstk.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _gpstk.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _gpstk.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _gpstk.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _gpstk.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vector_SatID(_object):
    """Proxy of C++ std::vector<(gpstk::SatID)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_SatID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_SatID, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_SatID self) -> SwigPyIterator"""
        return _gpstk.vector_SatID_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_SatID self) -> bool"""
        return _gpstk.vector_SatID___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_SatID self) -> bool"""
        return _gpstk.vector_SatID___bool__(self)


    def __len__(self):
        """__len__(vector_SatID self) -> std::vector< gpstk::SatID >::size_type"""
        return _gpstk.vector_SatID___len__(self)


    def pop(self):
        """pop(vector_SatID self) -> SatID"""
        return _gpstk.vector_SatID_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_SatID self, std::vector< gpstk::SatID >::difference_type i, std::vector< gpstk::SatID >::difference_type j) -> vector_SatID"""
        return _gpstk.vector_SatID___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_SatID self, std::vector< gpstk::SatID >::difference_type i, std::vector< gpstk::SatID >::difference_type j, vector_SatID v)
        __setslice__(vector_SatID self, std::vector< gpstk::SatID >::difference_type i, std::vector< gpstk::SatID >::difference_type j)
        """
        return _gpstk.vector_SatID___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_SatID self, std::vector< gpstk::SatID >::difference_type i, std::vector< gpstk::SatID >::difference_type j)"""
        return _gpstk.vector_SatID___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_SatID self, std::vector< gpstk::SatID >::difference_type i)
        __delitem__(vector_SatID self, PySliceObject * slice)
        """
        return _gpstk.vector_SatID___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_SatID self, PySliceObject * slice) -> vector_SatID
        __getitem__(vector_SatID self, std::vector< gpstk::SatID >::difference_type i) -> SatID
        """
        return _gpstk.vector_SatID___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_SatID self, PySliceObject * slice, vector_SatID v)
        __setitem__(vector_SatID self, PySliceObject * slice)
        __setitem__(vector_SatID self, std::vector< gpstk::SatID >::difference_type i, SatID x)
        """
        return _gpstk.vector_SatID___setitem__(self, *args)


    def append(self, x):
        """append(vector_SatID self, SatID x)"""
        return _gpstk.vector_SatID_append(self, x)


    def empty(self):
        """empty(vector_SatID self) -> bool"""
        return _gpstk.vector_SatID_empty(self)


    def size(self):
        """size(vector_SatID self) -> std::vector< gpstk::SatID >::size_type"""
        return _gpstk.vector_SatID_size(self)


    def clear(self):
        """clear(vector_SatID self)"""
        return _gpstk.vector_SatID_clear(self)


    def swap(self, v):
        """swap(vector_SatID self, vector_SatID v)"""
        return _gpstk.vector_SatID_swap(self, v)


    def get_allocator(self):
        """get_allocator(vector_SatID self) -> std::vector< gpstk::SatID >::allocator_type"""
        return _gpstk.vector_SatID_get_allocator(self)


    def begin(self):
        """begin(vector_SatID self) -> std::vector< gpstk::SatID >::iterator"""
        return _gpstk.vector_SatID_begin(self)


    def end(self):
        """end(vector_SatID self) -> std::vector< gpstk::SatID >::iterator"""
        return _gpstk.vector_SatID_end(self)


    def rbegin(self):
        """rbegin(vector_SatID self) -> std::vector< gpstk::SatID >::reverse_iterator"""
        return _gpstk.vector_SatID_rbegin(self)


    def rend(self):
        """rend(vector_SatID self) -> std::vector< gpstk::SatID >::reverse_iterator"""
        return _gpstk.vector_SatID_rend(self)


    def pop_back(self):
        """pop_back(vector_SatID self)"""
        return _gpstk.vector_SatID_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_SatID self, std::vector< gpstk::SatID >::iterator pos) -> std::vector< gpstk::SatID >::iterator
        erase(vector_SatID self, std::vector< gpstk::SatID >::iterator first, std::vector< gpstk::SatID >::iterator last) -> std::vector< gpstk::SatID >::iterator
        """
        return _gpstk.vector_SatID_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(gpstk::SatID)> self) -> vector_SatID
        __init__(std::vector<(gpstk::SatID)> self, vector_SatID arg2) -> vector_SatID
        __init__(std::vector<(gpstk::SatID)> self, std::vector< gpstk::SatID >::size_type size) -> vector_SatID
        __init__(std::vector<(gpstk::SatID)> self, std::vector< gpstk::SatID >::size_type size, SatID value) -> vector_SatID
        """
        this = _gpstk.new_vector_SatID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(vector_SatID self, SatID x)"""
        return _gpstk.vector_SatID_push_back(self, x)


    def front(self):
        """front(vector_SatID self) -> SatID"""
        return _gpstk.vector_SatID_front(self)


    def back(self):
        """back(vector_SatID self) -> SatID"""
        return _gpstk.vector_SatID_back(self)


    def assign(self, n, x):
        """assign(vector_SatID self, std::vector< gpstk::SatID >::size_type n, SatID x)"""
        return _gpstk.vector_SatID_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_SatID self, std::vector< gpstk::SatID >::size_type new_size)
        resize(vector_SatID self, std::vector< gpstk::SatID >::size_type new_size, SatID x)
        """
        return _gpstk.vector_SatID_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_SatID self, std::vector< gpstk::SatID >::iterator pos, SatID x) -> std::vector< gpstk::SatID >::iterator
        insert(vector_SatID self, std::vector< gpstk::SatID >::iterator pos, std::vector< gpstk::SatID >::size_type n, SatID x)
        """
        return _gpstk.vector_SatID_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_SatID self, std::vector< gpstk::SatID >::size_type n)"""
        return _gpstk.vector_SatID_reserve(self, n)


    def capacity(self):
        """capacity(vector_SatID self) -> std::vector< gpstk::SatID >::size_type"""
        return _gpstk.vector_SatID_capacity(self)

    __swig_destroy__ = _gpstk.delete_vector_SatID
    __del__ = lambda self: None
vector_SatID_swigregister = _gpstk.vector_SatID_swigregister
vector_SatID_swigregister(vector_SatID)

class vector_double(_object):
    """Proxy of C++ std::vector<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_double, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_double self) -> SwigPyIterator"""
        return _gpstk.vector_double_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_double self) -> bool"""
        return _gpstk.vector_double___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_double self) -> bool"""
        return _gpstk.vector_double___bool__(self)


    def __len__(self):
        """__len__(vector_double self) -> std::vector< double >::size_type"""
        return _gpstk.vector_double___len__(self)


    def pop(self):
        """pop(vector_double self) -> std::vector< double >::value_type"""
        return _gpstk.vector_double_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> vector_double"""
        return _gpstk.vector_double___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, vector_double v)
        __setslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        """
        return _gpstk.vector_double___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _gpstk.vector_double___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_double self, std::vector< double >::difference_type i)
        __delitem__(vector_double self, PySliceObject * slice)
        """
        return _gpstk.vector_double___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_double self, PySliceObject * slice) -> vector_double
        __getitem__(vector_double self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _gpstk.vector_double___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_double self, PySliceObject * slice, vector_double v)
        __setitem__(vector_double self, PySliceObject * slice)
        __setitem__(vector_double self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _gpstk.vector_double___setitem__(self, *args)


    def append(self, x):
        """append(vector_double self, std::vector< double >::value_type const & x)"""
        return _gpstk.vector_double_append(self, x)


    def empty(self):
        """empty(vector_double self) -> bool"""
        return _gpstk.vector_double_empty(self)


    def size(self):
        """size(vector_double self) -> std::vector< double >::size_type"""
        return _gpstk.vector_double_size(self)


    def clear(self):
        """clear(vector_double self)"""
        return _gpstk.vector_double_clear(self)


    def swap(self, v):
        """swap(vector_double self, vector_double v)"""
        return _gpstk.vector_double_swap(self, v)


    def get_allocator(self):
        """get_allocator(vector_double self) -> std::vector< double >::allocator_type"""
        return _gpstk.vector_double_get_allocator(self)


    def begin(self):
        """begin(vector_double self) -> std::vector< double >::iterator"""
        return _gpstk.vector_double_begin(self)


    def end(self):
        """end(vector_double self) -> std::vector< double >::iterator"""
        return _gpstk.vector_double_end(self)


    def rbegin(self):
        """rbegin(vector_double self) -> std::vector< double >::reverse_iterator"""
        return _gpstk.vector_double_rbegin(self)


    def rend(self):
        """rend(vector_double self) -> std::vector< double >::reverse_iterator"""
        return _gpstk.vector_double_rend(self)


    def pop_back(self):
        """pop_back(vector_double self)"""
        return _gpstk.vector_double_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_double self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(vector_double self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _gpstk.vector_double_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(double)> self) -> vector_double
        __init__(std::vector<(double)> self, vector_double arg2) -> vector_double
        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> vector_double
        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vector_double
        """
        this = _gpstk.new_vector_double(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(vector_double self, std::vector< double >::value_type const & x)"""
        return _gpstk.vector_double_push_back(self, x)


    def front(self):
        """front(vector_double self) -> std::vector< double >::value_type const &"""
        return _gpstk.vector_double_front(self)


    def back(self):
        """back(vector_double self) -> std::vector< double >::value_type const &"""
        return _gpstk.vector_double_back(self)


    def assign(self, n, x):
        """assign(vector_double self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _gpstk.vector_double_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_double self, std::vector< double >::size_type new_size)
        resize(vector_double self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _gpstk.vector_double_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_double self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(vector_double self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _gpstk.vector_double_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_double self, std::vector< double >::size_type n)"""
        return _gpstk.vector_double_reserve(self, n)


    def capacity(self):
        """capacity(vector_double self) -> std::vector< double >::size_type"""
        return _gpstk.vector_double_capacity(self)

    __swig_destroy__ = _gpstk.delete_vector_double
    __del__ = lambda self: None
vector_double_swigregister = _gpstk.vector_double_swigregister
vector_double_swigregister(vector_double)

class vector_int(_object):
    """Proxy of C++ std::vector<(int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_int, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_int self) -> SwigPyIterator"""
        return _gpstk.vector_int_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_int self) -> bool"""
        return _gpstk.vector_int___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_int self) -> bool"""
        return _gpstk.vector_int___bool__(self)


    def __len__(self):
        """__len__(vector_int self) -> std::vector< int >::size_type"""
        return _gpstk.vector_int___len__(self)


    def pop(self):
        """pop(vector_int self) -> std::vector< int >::value_type"""
        return _gpstk.vector_int_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vector_int"""
        return _gpstk.vector_int___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vector_int v)
        __setslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        """
        return _gpstk.vector_int___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _gpstk.vector_int___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_int self, std::vector< int >::difference_type i)
        __delitem__(vector_int self, PySliceObject * slice)
        """
        return _gpstk.vector_int___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_int self, PySliceObject * slice) -> vector_int
        __getitem__(vector_int self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _gpstk.vector_int___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_int self, PySliceObject * slice, vector_int v)
        __setitem__(vector_int self, PySliceObject * slice)
        __setitem__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _gpstk.vector_int___setitem__(self, *args)


    def append(self, x):
        """append(vector_int self, std::vector< int >::value_type const & x)"""
        return _gpstk.vector_int_append(self, x)


    def empty(self):
        """empty(vector_int self) -> bool"""
        return _gpstk.vector_int_empty(self)


    def size(self):
        """size(vector_int self) -> std::vector< int >::size_type"""
        return _gpstk.vector_int_size(self)


    def clear(self):
        """clear(vector_int self)"""
        return _gpstk.vector_int_clear(self)


    def swap(self, v):
        """swap(vector_int self, vector_int v)"""
        return _gpstk.vector_int_swap(self, v)


    def get_allocator(self):
        """get_allocator(vector_int self) -> std::vector< int >::allocator_type"""
        return _gpstk.vector_int_get_allocator(self)


    def begin(self):
        """begin(vector_int self) -> std::vector< int >::iterator"""
        return _gpstk.vector_int_begin(self)


    def end(self):
        """end(vector_int self) -> std::vector< int >::iterator"""
        return _gpstk.vector_int_end(self)


    def rbegin(self):
        """rbegin(vector_int self) -> std::vector< int >::reverse_iterator"""
        return _gpstk.vector_int_rbegin(self)


    def rend(self):
        """rend(vector_int self) -> std::vector< int >::reverse_iterator"""
        return _gpstk.vector_int_rend(self)


    def pop_back(self):
        """pop_back(vector_int self)"""
        return _gpstk.vector_int_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_int self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(vector_int self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _gpstk.vector_int_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(int)> self) -> vector_int
        __init__(std::vector<(int)> self, vector_int arg2) -> vector_int
        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> vector_int
        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vector_int
        """
        this = _gpstk.new_vector_int(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(vector_int self, std::vector< int >::value_type const & x)"""
        return _gpstk.vector_int_push_back(self, x)


    def front(self):
        """front(vector_int self) -> std::vector< int >::value_type const &"""
        return _gpstk.vector_int_front(self)


    def back(self):
        """back(vector_int self) -> std::vector< int >::value_type const &"""
        return _gpstk.vector_int_back(self)


    def assign(self, n, x):
        """assign(vector_int self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _gpstk.vector_int_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_int self, std::vector< int >::size_type new_size)
        resize(vector_int self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _gpstk.vector_int_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_int self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(vector_int self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _gpstk.vector_int_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_int self, std::vector< int >::size_type n)"""
        return _gpstk.vector_int_reserve(self, n)


    def capacity(self):
        """capacity(vector_int self) -> std::vector< int >::size_type"""
        return _gpstk.vector_int_capacity(self)

    __swig_destroy__ = _gpstk.delete_vector_int
    __del__ = lambda self: None
vector_int_swigregister = _gpstk.vector_int_swigregister
vector_int_swigregister(vector_int)

class vector_string(_object):
    """Proxy of C++ std::vector<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_string, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_string self) -> SwigPyIterator"""
        return _gpstk.vector_string_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_string self) -> bool"""
        return _gpstk.vector_string___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_string self) -> bool"""
        return _gpstk.vector_string___bool__(self)


    def __len__(self):
        """__len__(vector_string self) -> std::vector< std::string >::size_type"""
        return _gpstk.vector_string___len__(self)


    def pop(self):
        """pop(vector_string self) -> std::vector< std::string >::value_type"""
        return _gpstk.vector_string_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> vector_string"""
        return _gpstk.vector_string___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, vector_string v)
        __setslice__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        """
        return _gpstk.vector_string___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _gpstk.vector_string___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_string self, std::vector< std::string >::difference_type i)
        __delitem__(vector_string self, PySliceObject * slice)
        """
        return _gpstk.vector_string___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_string self, PySliceObject * slice) -> vector_string
        __getitem__(vector_string self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _gpstk.vector_string___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_string self, PySliceObject * slice, vector_string v)
        __setitem__(vector_string self, PySliceObject * slice)
        __setitem__(vector_string self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _gpstk.vector_string___setitem__(self, *args)


    def append(self, x):
        """append(vector_string self, std::vector< std::string >::value_type const & x)"""
        return _gpstk.vector_string_append(self, x)


    def empty(self):
        """empty(vector_string self) -> bool"""
        return _gpstk.vector_string_empty(self)


    def size(self):
        """size(vector_string self) -> std::vector< std::string >::size_type"""
        return _gpstk.vector_string_size(self)


    def clear(self):
        """clear(vector_string self)"""
        return _gpstk.vector_string_clear(self)


    def swap(self, v):
        """swap(vector_string self, vector_string v)"""
        return _gpstk.vector_string_swap(self, v)


    def get_allocator(self):
        """get_allocator(vector_string self) -> std::vector< std::string >::allocator_type"""
        return _gpstk.vector_string_get_allocator(self)


    def begin(self):
        """begin(vector_string self) -> std::vector< std::string >::iterator"""
        return _gpstk.vector_string_begin(self)


    def end(self):
        """end(vector_string self) -> std::vector< std::string >::iterator"""
        return _gpstk.vector_string_end(self)


    def rbegin(self):
        """rbegin(vector_string self) -> std::vector< std::string >::reverse_iterator"""
        return _gpstk.vector_string_rbegin(self)


    def rend(self):
        """rend(vector_string self) -> std::vector< std::string >::reverse_iterator"""
        return _gpstk.vector_string_rend(self)


    def pop_back(self):
        """pop_back(vector_string self)"""
        return _gpstk.vector_string_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_string self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(vector_string self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _gpstk.vector_string_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::string)> self) -> vector_string
        __init__(std::vector<(std::string)> self, vector_string arg2) -> vector_string
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> vector_string
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vector_string
        """
        this = _gpstk.new_vector_string(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(vector_string self, std::vector< std::string >::value_type const & x)"""
        return _gpstk.vector_string_push_back(self, x)


    def front(self):
        """front(vector_string self) -> std::vector< std::string >::value_type const &"""
        return _gpstk.vector_string_front(self)


    def back(self):
        """back(vector_string self) -> std::vector< std::string >::value_type const &"""
        return _gpstk.vector_string_back(self)


    def assign(self, n, x):
        """assign(vector_string self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _gpstk.vector_string_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_string self, std::vector< std::string >::size_type new_size)
        resize(vector_string self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _gpstk.vector_string_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_string self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(vector_string self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _gpstk.vector_string_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_string self, std::vector< std::string >::size_type n)"""
        return _gpstk.vector_string_reserve(self, n)


    def capacity(self):
        """capacity(vector_string self) -> std::vector< std::string >::size_type"""
        return _gpstk.vector_string_capacity(self)

    __swig_destroy__ = _gpstk.delete_vector_string
    __del__ = lambda self: None
vector_string_swigregister = _gpstk.vector_string_swigregister
vector_string_swigregister(vector_string)

class vector_RinexDatum(_object):
    """Proxy of C++ std::vector<(gpstk::RinexDatum)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_RinexDatum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_RinexDatum, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_RinexDatum self) -> SwigPyIterator"""
        return _gpstk.vector_RinexDatum_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_RinexDatum self) -> bool"""
        return _gpstk.vector_RinexDatum___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_RinexDatum self) -> bool"""
        return _gpstk.vector_RinexDatum___bool__(self)


    def __len__(self):
        """__len__(vector_RinexDatum self) -> std::vector< gpstk::RinexDatum >::size_type"""
        return _gpstk.vector_RinexDatum___len__(self)


    def pop(self):
        """pop(vector_RinexDatum self) -> RinexDatum"""
        return _gpstk.vector_RinexDatum_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_RinexDatum self, std::vector< gpstk::RinexDatum >::difference_type i, std::vector< gpstk::RinexDatum >::difference_type j) -> vector_RinexDatum"""
        return _gpstk.vector_RinexDatum___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_RinexDatum self, std::vector< gpstk::RinexDatum >::difference_type i, std::vector< gpstk::RinexDatum >::difference_type j, vector_RinexDatum v)
        __setslice__(vector_RinexDatum self, std::vector< gpstk::RinexDatum >::difference_type i, std::vector< gpstk::RinexDatum >::difference_type j)
        """
        return _gpstk.vector_RinexDatum___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_RinexDatum self, std::vector< gpstk::RinexDatum >::difference_type i, std::vector< gpstk::RinexDatum >::difference_type j)"""
        return _gpstk.vector_RinexDatum___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_RinexDatum self, std::vector< gpstk::RinexDatum >::difference_type i)
        __delitem__(vector_RinexDatum self, PySliceObject * slice)
        """
        return _gpstk.vector_RinexDatum___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_RinexDatum self, PySliceObject * slice) -> vector_RinexDatum
        __getitem__(vector_RinexDatum self, std::vector< gpstk::RinexDatum >::difference_type i) -> RinexDatum
        """
        return _gpstk.vector_RinexDatum___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_RinexDatum self, PySliceObject * slice, vector_RinexDatum v)
        __setitem__(vector_RinexDatum self, PySliceObject * slice)
        __setitem__(vector_RinexDatum self, std::vector< gpstk::RinexDatum >::difference_type i, RinexDatum x)
        """
        return _gpstk.vector_RinexDatum___setitem__(self, *args)


    def append(self, x):
        """append(vector_RinexDatum self, RinexDatum x)"""
        return _gpstk.vector_RinexDatum_append(self, x)


    def empty(self):
        """empty(vector_RinexDatum self) -> bool"""
        return _gpstk.vector_RinexDatum_empty(self)


    def size(self):
        """size(vector_RinexDatum self) -> std::vector< gpstk::RinexDatum >::size_type"""
        return _gpstk.vector_RinexDatum_size(self)


    def clear(self):
        """clear(vector_RinexDatum self)"""
        return _gpstk.vector_RinexDatum_clear(self)


    def swap(self, v):
        """swap(vector_RinexDatum self, vector_RinexDatum v)"""
        return _gpstk.vector_RinexDatum_swap(self, v)


    def get_allocator(self):
        """get_allocator(vector_RinexDatum self) -> std::vector< gpstk::RinexDatum >::allocator_type"""
        return _gpstk.vector_RinexDatum_get_allocator(self)


    def begin(self):
        """begin(vector_RinexDatum self) -> std::vector< gpstk::RinexDatum >::iterator"""
        return _gpstk.vector_RinexDatum_begin(self)


    def end(self):
        """end(vector_RinexDatum self) -> std::vector< gpstk::RinexDatum >::iterator"""
        return _gpstk.vector_RinexDatum_end(self)


    def rbegin(self):
        """rbegin(vector_RinexDatum self) -> std::vector< gpstk::RinexDatum >::reverse_iterator"""
        return _gpstk.vector_RinexDatum_rbegin(self)


    def rend(self):
        """rend(vector_RinexDatum self) -> std::vector< gpstk::RinexDatum >::reverse_iterator"""
        return _gpstk.vector_RinexDatum_rend(self)


    def pop_back(self):
        """pop_back(vector_RinexDatum self)"""
        return _gpstk.vector_RinexDatum_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_RinexDatum self, std::vector< gpstk::RinexDatum >::iterator pos) -> std::vector< gpstk::RinexDatum >::iterator
        erase(vector_RinexDatum self, std::vector< gpstk::RinexDatum >::iterator first, std::vector< gpstk::RinexDatum >::iterator last) -> std::vector< gpstk::RinexDatum >::iterator
        """
        return _gpstk.vector_RinexDatum_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(gpstk::RinexDatum)> self) -> vector_RinexDatum
        __init__(std::vector<(gpstk::RinexDatum)> self, vector_RinexDatum arg2) -> vector_RinexDatum
        __init__(std::vector<(gpstk::RinexDatum)> self, std::vector< gpstk::RinexDatum >::size_type size) -> vector_RinexDatum
        __init__(std::vector<(gpstk::RinexDatum)> self, std::vector< gpstk::RinexDatum >::size_type size, RinexDatum value) -> vector_RinexDatum
        """
        this = _gpstk.new_vector_RinexDatum(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(vector_RinexDatum self, RinexDatum x)"""
        return _gpstk.vector_RinexDatum_push_back(self, x)


    def front(self):
        """front(vector_RinexDatum self) -> RinexDatum"""
        return _gpstk.vector_RinexDatum_front(self)


    def back(self):
        """back(vector_RinexDatum self) -> RinexDatum"""
        return _gpstk.vector_RinexDatum_back(self)


    def assign(self, n, x):
        """assign(vector_RinexDatum self, std::vector< gpstk::RinexDatum >::size_type n, RinexDatum x)"""
        return _gpstk.vector_RinexDatum_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_RinexDatum self, std::vector< gpstk::RinexDatum >::size_type new_size)
        resize(vector_RinexDatum self, std::vector< gpstk::RinexDatum >::size_type new_size, RinexDatum x)
        """
        return _gpstk.vector_RinexDatum_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_RinexDatum self, std::vector< gpstk::RinexDatum >::iterator pos, RinexDatum x) -> std::vector< gpstk::RinexDatum >::iterator
        insert(vector_RinexDatum self, std::vector< gpstk::RinexDatum >::iterator pos, std::vector< gpstk::RinexDatum >::size_type n, RinexDatum x)
        """
        return _gpstk.vector_RinexDatum_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_RinexDatum self, std::vector< gpstk::RinexDatum >::size_type n)"""
        return _gpstk.vector_RinexDatum_reserve(self, n)


    def capacity(self):
        """capacity(vector_RinexDatum self) -> std::vector< gpstk::RinexDatum >::size_type"""
        return _gpstk.vector_RinexDatum_capacity(self)

    __swig_destroy__ = _gpstk.delete_vector_RinexDatum
    __del__ = lambda self: None
vector_RinexDatum_swigregister = _gpstk.vector_RinexDatum_swigregister
vector_RinexDatum_swigregister(vector_RinexDatum)

class vector_RinexSatID(_object):
    """Proxy of C++ std::vector<(gpstk::RinexSatID)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_RinexSatID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_RinexSatID, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_RinexSatID self) -> SwigPyIterator"""
        return _gpstk.vector_RinexSatID_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_RinexSatID self) -> bool"""
        return _gpstk.vector_RinexSatID___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_RinexSatID self) -> bool"""
        return _gpstk.vector_RinexSatID___bool__(self)


    def __len__(self):
        """__len__(vector_RinexSatID self) -> std::vector< gpstk::RinexSatID >::size_type"""
        return _gpstk.vector_RinexSatID___len__(self)


    def pop(self):
        """pop(vector_RinexSatID self) -> RinexSatID"""
        return _gpstk.vector_RinexSatID_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_RinexSatID self, std::vector< gpstk::RinexSatID >::difference_type i, std::vector< gpstk::RinexSatID >::difference_type j) -> vector_RinexSatID"""
        return _gpstk.vector_RinexSatID___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_RinexSatID self, std::vector< gpstk::RinexSatID >::difference_type i, std::vector< gpstk::RinexSatID >::difference_type j, vector_RinexSatID v)
        __setslice__(vector_RinexSatID self, std::vector< gpstk::RinexSatID >::difference_type i, std::vector< gpstk::RinexSatID >::difference_type j)
        """
        return _gpstk.vector_RinexSatID___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_RinexSatID self, std::vector< gpstk::RinexSatID >::difference_type i, std::vector< gpstk::RinexSatID >::difference_type j)"""
        return _gpstk.vector_RinexSatID___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_RinexSatID self, std::vector< gpstk::RinexSatID >::difference_type i)
        __delitem__(vector_RinexSatID self, PySliceObject * slice)
        """
        return _gpstk.vector_RinexSatID___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_RinexSatID self, PySliceObject * slice) -> vector_RinexSatID
        __getitem__(vector_RinexSatID self, std::vector< gpstk::RinexSatID >::difference_type i) -> RinexSatID
        """
        return _gpstk.vector_RinexSatID___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_RinexSatID self, PySliceObject * slice, vector_RinexSatID v)
        __setitem__(vector_RinexSatID self, PySliceObject * slice)
        __setitem__(vector_RinexSatID self, std::vector< gpstk::RinexSatID >::difference_type i, RinexSatID x)
        """
        return _gpstk.vector_RinexSatID___setitem__(self, *args)


    def append(self, x):
        """append(vector_RinexSatID self, RinexSatID x)"""
        return _gpstk.vector_RinexSatID_append(self, x)


    def empty(self):
        """empty(vector_RinexSatID self) -> bool"""
        return _gpstk.vector_RinexSatID_empty(self)


    def size(self):
        """size(vector_RinexSatID self) -> std::vector< gpstk::RinexSatID >::size_type"""
        return _gpstk.vector_RinexSatID_size(self)


    def clear(self):
        """clear(vector_RinexSatID self)"""
        return _gpstk.vector_RinexSatID_clear(self)


    def swap(self, v):
        """swap(vector_RinexSatID self, vector_RinexSatID v)"""
        return _gpstk.vector_RinexSatID_swap(self, v)


    def get_allocator(self):
        """get_allocator(vector_RinexSatID self) -> std::vector< gpstk::RinexSatID >::allocator_type"""
        return _gpstk.vector_RinexSatID_get_allocator(self)


    def begin(self):
        """begin(vector_RinexSatID self) -> std::vector< gpstk::RinexSatID >::iterator"""
        return _gpstk.vector_RinexSatID_begin(self)


    def end(self):
        """end(vector_RinexSatID self) -> std::vector< gpstk::RinexSatID >::iterator"""
        return _gpstk.vector_RinexSatID_end(self)


    def rbegin(self):
        """rbegin(vector_RinexSatID self) -> std::vector< gpstk::RinexSatID >::reverse_iterator"""
        return _gpstk.vector_RinexSatID_rbegin(self)


    def rend(self):
        """rend(vector_RinexSatID self) -> std::vector< gpstk::RinexSatID >::reverse_iterator"""
        return _gpstk.vector_RinexSatID_rend(self)


    def pop_back(self):
        """pop_back(vector_RinexSatID self)"""
        return _gpstk.vector_RinexSatID_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_RinexSatID self, std::vector< gpstk::RinexSatID >::iterator pos) -> std::vector< gpstk::RinexSatID >::iterator
        erase(vector_RinexSatID self, std::vector< gpstk::RinexSatID >::iterator first, std::vector< gpstk::RinexSatID >::iterator last) -> std::vector< gpstk::RinexSatID >::iterator
        """
        return _gpstk.vector_RinexSatID_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(gpstk::RinexSatID)> self) -> vector_RinexSatID
        __init__(std::vector<(gpstk::RinexSatID)> self, vector_RinexSatID arg2) -> vector_RinexSatID
        __init__(std::vector<(gpstk::RinexSatID)> self, std::vector< gpstk::RinexSatID >::size_type size) -> vector_RinexSatID
        __init__(std::vector<(gpstk::RinexSatID)> self, std::vector< gpstk::RinexSatID >::size_type size, RinexSatID value) -> vector_RinexSatID
        """
        this = _gpstk.new_vector_RinexSatID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(vector_RinexSatID self, RinexSatID x)"""
        return _gpstk.vector_RinexSatID_push_back(self, x)


    def front(self):
        """front(vector_RinexSatID self) -> RinexSatID"""
        return _gpstk.vector_RinexSatID_front(self)


    def back(self):
        """back(vector_RinexSatID self) -> RinexSatID"""
        return _gpstk.vector_RinexSatID_back(self)


    def assign(self, n, x):
        """assign(vector_RinexSatID self, std::vector< gpstk::RinexSatID >::size_type n, RinexSatID x)"""
        return _gpstk.vector_RinexSatID_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_RinexSatID self, std::vector< gpstk::RinexSatID >::size_type new_size)
        resize(vector_RinexSatID self, std::vector< gpstk::RinexSatID >::size_type new_size, RinexSatID x)
        """
        return _gpstk.vector_RinexSatID_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_RinexSatID self, std::vector< gpstk::RinexSatID >::iterator pos, RinexSatID x) -> std::vector< gpstk::RinexSatID >::iterator
        insert(vector_RinexSatID self, std::vector< gpstk::RinexSatID >::iterator pos, std::vector< gpstk::RinexSatID >::size_type n, RinexSatID x)
        """
        return _gpstk.vector_RinexSatID_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_RinexSatID self, std::vector< gpstk::RinexSatID >::size_type n)"""
        return _gpstk.vector_RinexSatID_reserve(self, n)


    def capacity(self):
        """capacity(vector_RinexSatID self) -> std::vector< gpstk::RinexSatID >::size_type"""
        return _gpstk.vector_RinexSatID_capacity(self)

    __swig_destroy__ = _gpstk.delete_vector_RinexSatID
    __del__ = lambda self: None
vector_RinexSatID_swigregister = _gpstk.vector_RinexSatID_swigregister
vector_RinexSatID_swigregister(vector_RinexSatID)

class vector_RinexObsID(_object):
    """Proxy of C++ std::vector<(gpstk::RinexObsID)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_RinexObsID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_RinexObsID, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_RinexObsID self) -> SwigPyIterator"""
        return _gpstk.vector_RinexObsID_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_RinexObsID self) -> bool"""
        return _gpstk.vector_RinexObsID___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_RinexObsID self) -> bool"""
        return _gpstk.vector_RinexObsID___bool__(self)


    def __len__(self):
        """__len__(vector_RinexObsID self) -> std::vector< gpstk::RinexObsID >::size_type"""
        return _gpstk.vector_RinexObsID___len__(self)


    def pop(self):
        """pop(vector_RinexObsID self) -> RinexObsID"""
        return _gpstk.vector_RinexObsID_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_RinexObsID self, std::vector< gpstk::RinexObsID >::difference_type i, std::vector< gpstk::RinexObsID >::difference_type j) -> vector_RinexObsID"""
        return _gpstk.vector_RinexObsID___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_RinexObsID self, std::vector< gpstk::RinexObsID >::difference_type i, std::vector< gpstk::RinexObsID >::difference_type j, vector_RinexObsID v)
        __setslice__(vector_RinexObsID self, std::vector< gpstk::RinexObsID >::difference_type i, std::vector< gpstk::RinexObsID >::difference_type j)
        """
        return _gpstk.vector_RinexObsID___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_RinexObsID self, std::vector< gpstk::RinexObsID >::difference_type i, std::vector< gpstk::RinexObsID >::difference_type j)"""
        return _gpstk.vector_RinexObsID___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_RinexObsID self, std::vector< gpstk::RinexObsID >::difference_type i)
        __delitem__(vector_RinexObsID self, PySliceObject * slice)
        """
        return _gpstk.vector_RinexObsID___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_RinexObsID self, PySliceObject * slice) -> vector_RinexObsID
        __getitem__(vector_RinexObsID self, std::vector< gpstk::RinexObsID >::difference_type i) -> RinexObsID
        """
        return _gpstk.vector_RinexObsID___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_RinexObsID self, PySliceObject * slice, vector_RinexObsID v)
        __setitem__(vector_RinexObsID self, PySliceObject * slice)
        __setitem__(vector_RinexObsID self, std::vector< gpstk::RinexObsID >::difference_type i, RinexObsID x)
        """
        return _gpstk.vector_RinexObsID___setitem__(self, *args)


    def append(self, x):
        """append(vector_RinexObsID self, RinexObsID x)"""
        return _gpstk.vector_RinexObsID_append(self, x)


    def empty(self):
        """empty(vector_RinexObsID self) -> bool"""
        return _gpstk.vector_RinexObsID_empty(self)


    def size(self):
        """size(vector_RinexObsID self) -> std::vector< gpstk::RinexObsID >::size_type"""
        return _gpstk.vector_RinexObsID_size(self)


    def clear(self):
        """clear(vector_RinexObsID self)"""
        return _gpstk.vector_RinexObsID_clear(self)


    def swap(self, v):
        """swap(vector_RinexObsID self, vector_RinexObsID v)"""
        return _gpstk.vector_RinexObsID_swap(self, v)


    def get_allocator(self):
        """get_allocator(vector_RinexObsID self) -> std::vector< gpstk::RinexObsID >::allocator_type"""
        return _gpstk.vector_RinexObsID_get_allocator(self)


    def begin(self):
        """begin(vector_RinexObsID self) -> std::vector< gpstk::RinexObsID >::iterator"""
        return _gpstk.vector_RinexObsID_begin(self)


    def end(self):
        """end(vector_RinexObsID self) -> std::vector< gpstk::RinexObsID >::iterator"""
        return _gpstk.vector_RinexObsID_end(self)


    def rbegin(self):
        """rbegin(vector_RinexObsID self) -> std::vector< gpstk::RinexObsID >::reverse_iterator"""
        return _gpstk.vector_RinexObsID_rbegin(self)


    def rend(self):
        """rend(vector_RinexObsID self) -> std::vector< gpstk::RinexObsID >::reverse_iterator"""
        return _gpstk.vector_RinexObsID_rend(self)


    def pop_back(self):
        """pop_back(vector_RinexObsID self)"""
        return _gpstk.vector_RinexObsID_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_RinexObsID self, std::vector< gpstk::RinexObsID >::iterator pos) -> std::vector< gpstk::RinexObsID >::iterator
        erase(vector_RinexObsID self, std::vector< gpstk::RinexObsID >::iterator first, std::vector< gpstk::RinexObsID >::iterator last) -> std::vector< gpstk::RinexObsID >::iterator
        """
        return _gpstk.vector_RinexObsID_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(gpstk::RinexObsID)> self) -> vector_RinexObsID
        __init__(std::vector<(gpstk::RinexObsID)> self, vector_RinexObsID arg2) -> vector_RinexObsID
        __init__(std::vector<(gpstk::RinexObsID)> self, std::vector< gpstk::RinexObsID >::size_type size) -> vector_RinexObsID
        __init__(std::vector<(gpstk::RinexObsID)> self, std::vector< gpstk::RinexObsID >::size_type size, RinexObsID value) -> vector_RinexObsID
        """
        this = _gpstk.new_vector_RinexObsID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(vector_RinexObsID self, RinexObsID x)"""
        return _gpstk.vector_RinexObsID_push_back(self, x)


    def front(self):
        """front(vector_RinexObsID self) -> RinexObsID"""
        return _gpstk.vector_RinexObsID_front(self)


    def back(self):
        """back(vector_RinexObsID self) -> RinexObsID"""
        return _gpstk.vector_RinexObsID_back(self)


    def assign(self, n, x):
        """assign(vector_RinexObsID self, std::vector< gpstk::RinexObsID >::size_type n, RinexObsID x)"""
        return _gpstk.vector_RinexObsID_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_RinexObsID self, std::vector< gpstk::RinexObsID >::size_type new_size)
        resize(vector_RinexObsID self, std::vector< gpstk::RinexObsID >::size_type new_size, RinexObsID x)
        """
        return _gpstk.vector_RinexObsID_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_RinexObsID self, std::vector< gpstk::RinexObsID >::iterator pos, RinexObsID x) -> std::vector< gpstk::RinexObsID >::iterator
        insert(vector_RinexObsID self, std::vector< gpstk::RinexObsID >::iterator pos, std::vector< gpstk::RinexObsID >::size_type n, RinexObsID x)
        """
        return _gpstk.vector_RinexObsID_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_RinexObsID self, std::vector< gpstk::RinexObsID >::size_type n)"""
        return _gpstk.vector_RinexObsID_reserve(self, n)


    def capacity(self):
        """capacity(vector_RinexObsID self) -> std::vector< gpstk::RinexObsID >::size_type"""
        return _gpstk.vector_RinexObsID_capacity(self)

    __swig_destroy__ = _gpstk.delete_vector_RinexObsID
    __del__ = lambda self: None
vector_RinexObsID_swigregister = _gpstk.vector_RinexObsID_swigregister
vector_RinexObsID_swigregister(vector_RinexObsID)

class vector_RinexObsType(_object):
    """Proxy of C++ std::vector<(gpstk::RinexObsType)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_RinexObsType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_RinexObsType, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_RinexObsType self) -> SwigPyIterator"""
        return _gpstk.vector_RinexObsType_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_RinexObsType self) -> bool"""
        return _gpstk.vector_RinexObsType___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_RinexObsType self) -> bool"""
        return _gpstk.vector_RinexObsType___bool__(self)


    def __len__(self):
        """__len__(vector_RinexObsType self) -> std::vector< gpstk::RinexObsType >::size_type"""
        return _gpstk.vector_RinexObsType___len__(self)


    def pop(self):
        """pop(vector_RinexObsType self) -> RinexObsType"""
        return _gpstk.vector_RinexObsType_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_RinexObsType self, std::vector< gpstk::RinexObsType >::difference_type i, std::vector< gpstk::RinexObsType >::difference_type j) -> vector_RinexObsType"""
        return _gpstk.vector_RinexObsType___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_RinexObsType self, std::vector< gpstk::RinexObsType >::difference_type i, std::vector< gpstk::RinexObsType >::difference_type j, vector_RinexObsType v)
        __setslice__(vector_RinexObsType self, std::vector< gpstk::RinexObsType >::difference_type i, std::vector< gpstk::RinexObsType >::difference_type j)
        """
        return _gpstk.vector_RinexObsType___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_RinexObsType self, std::vector< gpstk::RinexObsType >::difference_type i, std::vector< gpstk::RinexObsType >::difference_type j)"""
        return _gpstk.vector_RinexObsType___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_RinexObsType self, std::vector< gpstk::RinexObsType >::difference_type i)
        __delitem__(vector_RinexObsType self, PySliceObject * slice)
        """
        return _gpstk.vector_RinexObsType___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_RinexObsType self, PySliceObject * slice) -> vector_RinexObsType
        __getitem__(vector_RinexObsType self, std::vector< gpstk::RinexObsType >::difference_type i) -> RinexObsType
        """
        return _gpstk.vector_RinexObsType___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_RinexObsType self, PySliceObject * slice, vector_RinexObsType v)
        __setitem__(vector_RinexObsType self, PySliceObject * slice)
        __setitem__(vector_RinexObsType self, std::vector< gpstk::RinexObsType >::difference_type i, RinexObsType x)
        """
        return _gpstk.vector_RinexObsType___setitem__(self, *args)


    def append(self, x):
        """append(vector_RinexObsType self, RinexObsType x)"""
        return _gpstk.vector_RinexObsType_append(self, x)


    def empty(self):
        """empty(vector_RinexObsType self) -> bool"""
        return _gpstk.vector_RinexObsType_empty(self)


    def size(self):
        """size(vector_RinexObsType self) -> std::vector< gpstk::RinexObsType >::size_type"""
        return _gpstk.vector_RinexObsType_size(self)


    def clear(self):
        """clear(vector_RinexObsType self)"""
        return _gpstk.vector_RinexObsType_clear(self)


    def swap(self, v):
        """swap(vector_RinexObsType self, vector_RinexObsType v)"""
        return _gpstk.vector_RinexObsType_swap(self, v)


    def get_allocator(self):
        """get_allocator(vector_RinexObsType self) -> std::vector< gpstk::RinexObsType >::allocator_type"""
        return _gpstk.vector_RinexObsType_get_allocator(self)


    def begin(self):
        """begin(vector_RinexObsType self) -> std::vector< gpstk::RinexObsType >::iterator"""
        return _gpstk.vector_RinexObsType_begin(self)


    def end(self):
        """end(vector_RinexObsType self) -> std::vector< gpstk::RinexObsType >::iterator"""
        return _gpstk.vector_RinexObsType_end(self)


    def rbegin(self):
        """rbegin(vector_RinexObsType self) -> std::vector< gpstk::RinexObsType >::reverse_iterator"""
        return _gpstk.vector_RinexObsType_rbegin(self)


    def rend(self):
        """rend(vector_RinexObsType self) -> std::vector< gpstk::RinexObsType >::reverse_iterator"""
        return _gpstk.vector_RinexObsType_rend(self)


    def pop_back(self):
        """pop_back(vector_RinexObsType self)"""
        return _gpstk.vector_RinexObsType_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_RinexObsType self, std::vector< gpstk::RinexObsType >::iterator pos) -> std::vector< gpstk::RinexObsType >::iterator
        erase(vector_RinexObsType self, std::vector< gpstk::RinexObsType >::iterator first, std::vector< gpstk::RinexObsType >::iterator last) -> std::vector< gpstk::RinexObsType >::iterator
        """
        return _gpstk.vector_RinexObsType_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(gpstk::RinexObsType)> self) -> vector_RinexObsType
        __init__(std::vector<(gpstk::RinexObsType)> self, vector_RinexObsType arg2) -> vector_RinexObsType
        __init__(std::vector<(gpstk::RinexObsType)> self, std::vector< gpstk::RinexObsType >::size_type size) -> vector_RinexObsType
        __init__(std::vector<(gpstk::RinexObsType)> self, std::vector< gpstk::RinexObsType >::size_type size, RinexObsType value) -> vector_RinexObsType
        """
        this = _gpstk.new_vector_RinexObsType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(vector_RinexObsType self, RinexObsType x)"""
        return _gpstk.vector_RinexObsType_push_back(self, x)


    def front(self):
        """front(vector_RinexObsType self) -> RinexObsType"""
        return _gpstk.vector_RinexObsType_front(self)


    def back(self):
        """back(vector_RinexObsType self) -> RinexObsType"""
        return _gpstk.vector_RinexObsType_back(self)


    def assign(self, n, x):
        """assign(vector_RinexObsType self, std::vector< gpstk::RinexObsType >::size_type n, RinexObsType x)"""
        return _gpstk.vector_RinexObsType_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_RinexObsType self, std::vector< gpstk::RinexObsType >::size_type new_size)
        resize(vector_RinexObsType self, std::vector< gpstk::RinexObsType >::size_type new_size, RinexObsType x)
        """
        return _gpstk.vector_RinexObsType_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_RinexObsType self, std::vector< gpstk::RinexObsType >::iterator pos, RinexObsType x) -> std::vector< gpstk::RinexObsType >::iterator
        insert(vector_RinexObsType self, std::vector< gpstk::RinexObsType >::iterator pos, std::vector< gpstk::RinexObsType >::size_type n, RinexObsType x)
        """
        return _gpstk.vector_RinexObsType_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_RinexObsType self, std::vector< gpstk::RinexObsType >::size_type n)"""
        return _gpstk.vector_RinexObsType_reserve(self, n)


    def capacity(self):
        """capacity(vector_RinexObsType self) -> std::vector< gpstk::RinexObsType >::size_type"""
        return _gpstk.vector_RinexObsType_capacity(self)

    __swig_destroy__ = _gpstk.delete_vector_RinexObsType
    __del__ = lambda self: None
vector_RinexObsType_swigregister = _gpstk.vector_RinexObsType_swigregister
vector_RinexObsType_swigregister(vector_RinexObsType)

class vector_Rinex3ObsData(_object):
    """Proxy of C++ std::vector<(gpstk::Rinex3ObsData)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_Rinex3ObsData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_Rinex3ObsData, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vector_Rinex3ObsData self) -> SwigPyIterator"""
        return _gpstk.vector_Rinex3ObsData_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vector_Rinex3ObsData self) -> bool"""
        return _gpstk.vector_Rinex3ObsData___nonzero__(self)


    def __bool__(self):
        """__bool__(vector_Rinex3ObsData self) -> bool"""
        return _gpstk.vector_Rinex3ObsData___bool__(self)


    def __len__(self):
        """__len__(vector_Rinex3ObsData self) -> std::vector< gpstk::Rinex3ObsData >::size_type"""
        return _gpstk.vector_Rinex3ObsData___len__(self)


    def pop(self):
        """pop(vector_Rinex3ObsData self) -> Rinex3ObsData"""
        return _gpstk.vector_Rinex3ObsData_pop(self)


    def __getslice__(self, i, j):
        """__getslice__(vector_Rinex3ObsData self, std::vector< gpstk::Rinex3ObsData >::difference_type i, std::vector< gpstk::Rinex3ObsData >::difference_type j) -> vector_Rinex3ObsData"""
        return _gpstk.vector_Rinex3ObsData___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vector_Rinex3ObsData self, std::vector< gpstk::Rinex3ObsData >::difference_type i, std::vector< gpstk::Rinex3ObsData >::difference_type j, vector_Rinex3ObsData v)
        __setslice__(vector_Rinex3ObsData self, std::vector< gpstk::Rinex3ObsData >::difference_type i, std::vector< gpstk::Rinex3ObsData >::difference_type j)
        """
        return _gpstk.vector_Rinex3ObsData___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vector_Rinex3ObsData self, std::vector< gpstk::Rinex3ObsData >::difference_type i, std::vector< gpstk::Rinex3ObsData >::difference_type j)"""
        return _gpstk.vector_Rinex3ObsData___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vector_Rinex3ObsData self, std::vector< gpstk::Rinex3ObsData >::difference_type i)
        __delitem__(vector_Rinex3ObsData self, PySliceObject * slice)
        """
        return _gpstk.vector_Rinex3ObsData___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vector_Rinex3ObsData self, PySliceObject * slice) -> vector_Rinex3ObsData
        __getitem__(vector_Rinex3ObsData self, std::vector< gpstk::Rinex3ObsData >::difference_type i) -> Rinex3ObsData
        """
        return _gpstk.vector_Rinex3ObsData___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vector_Rinex3ObsData self, PySliceObject * slice, vector_Rinex3ObsData v)
        __setitem__(vector_Rinex3ObsData self, PySliceObject * slice)
        __setitem__(vector_Rinex3ObsData self, std::vector< gpstk::Rinex3ObsData >::difference_type i, Rinex3ObsData x)
        """
        return _gpstk.vector_Rinex3ObsData___setitem__(self, *args)


    def append(self, x):
        """append(vector_Rinex3ObsData self, Rinex3ObsData x)"""
        return _gpstk.vector_Rinex3ObsData_append(self, x)


    def empty(self):
        """empty(vector_Rinex3ObsData self) -> bool"""
        return _gpstk.vector_Rinex3ObsData_empty(self)


    def size(self):
        """size(vector_Rinex3ObsData self) -> std::vector< gpstk::Rinex3ObsData >::size_type"""
        return _gpstk.vector_Rinex3ObsData_size(self)


    def clear(self):
        """clear(vector_Rinex3ObsData self)"""
        return _gpstk.vector_Rinex3ObsData_clear(self)


    def swap(self, v):
        """swap(vector_Rinex3ObsData self, vector_Rinex3ObsData v)"""
        return _gpstk.vector_Rinex3ObsData_swap(self, v)


    def get_allocator(self):
        """get_allocator(vector_Rinex3ObsData self) -> std::vector< gpstk::Rinex3ObsData >::allocator_type"""
        return _gpstk.vector_Rinex3ObsData_get_allocator(self)


    def begin(self):
        """begin(vector_Rinex3ObsData self) -> std::vector< gpstk::Rinex3ObsData >::iterator"""
        return _gpstk.vector_Rinex3ObsData_begin(self)


    def end(self):
        """end(vector_Rinex3ObsData self) -> std::vector< gpstk::Rinex3ObsData >::iterator"""
        return _gpstk.vector_Rinex3ObsData_end(self)


    def rbegin(self):
        """rbegin(vector_Rinex3ObsData self) -> std::vector< gpstk::Rinex3ObsData >::reverse_iterator"""
        return _gpstk.vector_Rinex3ObsData_rbegin(self)


    def rend(self):
        """rend(vector_Rinex3ObsData self) -> std::vector< gpstk::Rinex3ObsData >::reverse_iterator"""
        return _gpstk.vector_Rinex3ObsData_rend(self)


    def pop_back(self):
        """pop_back(vector_Rinex3ObsData self)"""
        return _gpstk.vector_Rinex3ObsData_pop_back(self)


    def erase(self, *args):
        """
        erase(vector_Rinex3ObsData self, std::vector< gpstk::Rinex3ObsData >::iterator pos) -> std::vector< gpstk::Rinex3ObsData >::iterator
        erase(vector_Rinex3ObsData self, std::vector< gpstk::Rinex3ObsData >::iterator first, std::vector< gpstk::Rinex3ObsData >::iterator last) -> std::vector< gpstk::Rinex3ObsData >::iterator
        """
        return _gpstk.vector_Rinex3ObsData_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(gpstk::Rinex3ObsData)> self) -> vector_Rinex3ObsData
        __init__(std::vector<(gpstk::Rinex3ObsData)> self, vector_Rinex3ObsData arg2) -> vector_Rinex3ObsData
        __init__(std::vector<(gpstk::Rinex3ObsData)> self, std::vector< gpstk::Rinex3ObsData >::size_type size) -> vector_Rinex3ObsData
        __init__(std::vector<(gpstk::Rinex3ObsData)> self, std::vector< gpstk::Rinex3ObsData >::size_type size, Rinex3ObsData value) -> vector_Rinex3ObsData
        """
        this = _gpstk.new_vector_Rinex3ObsData(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        """push_back(vector_Rinex3ObsData self, Rinex3ObsData x)"""
        return _gpstk.vector_Rinex3ObsData_push_back(self, x)


    def front(self):
        """front(vector_Rinex3ObsData self) -> Rinex3ObsData"""
        return _gpstk.vector_Rinex3ObsData_front(self)


    def back(self):
        """back(vector_Rinex3ObsData self) -> Rinex3ObsData"""
        return _gpstk.vector_Rinex3ObsData_back(self)


    def assign(self, n, x):
        """assign(vector_Rinex3ObsData self, std::vector< gpstk::Rinex3ObsData >::size_type n, Rinex3ObsData x)"""
        return _gpstk.vector_Rinex3ObsData_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vector_Rinex3ObsData self, std::vector< gpstk::Rinex3ObsData >::size_type new_size)
        resize(vector_Rinex3ObsData self, std::vector< gpstk::Rinex3ObsData >::size_type new_size, Rinex3ObsData x)
        """
        return _gpstk.vector_Rinex3ObsData_resize(self, *args)


    def insert(self, *args):
        """
        insert(vector_Rinex3ObsData self, std::vector< gpstk::Rinex3ObsData >::iterator pos, Rinex3ObsData x) -> std::vector< gpstk::Rinex3ObsData >::iterator
        insert(vector_Rinex3ObsData self, std::vector< gpstk::Rinex3ObsData >::iterator pos, std::vector< gpstk::Rinex3ObsData >::size_type n, Rinex3ObsData x)
        """
        return _gpstk.vector_Rinex3ObsData_insert(self, *args)


    def reserve(self, n):
        """reserve(vector_Rinex3ObsData self, std::vector< gpstk::Rinex3ObsData >::size_type n)"""
        return _gpstk.vector_Rinex3ObsData_reserve(self, n)


    def capacity(self):
        """capacity(vector_Rinex3ObsData self) -> std::vector< gpstk::Rinex3ObsData >::size_type"""
        return _gpstk.vector_Rinex3ObsData_capacity(self)

    __swig_destroy__ = _gpstk.delete_vector_Rinex3ObsData
    __del__ = lambda self: None
vector_Rinex3ObsData_swigregister = _gpstk.vector_Rinex3ObsData_swigregister
vector_Rinex3ObsData_swigregister(vector_Rinex3ObsData)

class cmap(_object):
    """Proxy of C++ std::map<(swig::SwigPtr_PyObject,swig::SwigPtr_PyObject)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cmap, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(cmap self) -> SwigPyIterator"""
        return _gpstk.cmap_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(cmap self) -> bool"""
        return _gpstk.cmap___nonzero__(self)


    def __bool__(self):
        """__bool__(cmap self) -> bool"""
        return _gpstk.cmap___bool__(self)


    def __len__(self):
        """__len__(cmap self) -> std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::size_type"""
        return _gpstk.cmap___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(cmap self, std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::key_type const & key) -> std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::mapped_type const &"""
        return _gpstk.cmap___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(cmap self, std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::key_type const & key)"""
        return _gpstk.cmap___delitem__(self, key)


    def has_key(self, key):
        """has_key(cmap self, std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::key_type const & key) -> bool"""
        return _gpstk.cmap_has_key(self, key)


    def keys(self):
        """keys(cmap self) -> PyObject *"""
        return _gpstk.cmap_keys(self)


    def values(self):
        """values(cmap self) -> PyObject *"""
        return _gpstk.cmap_values(self)


    def items(self):
        """items(cmap self) -> PyObject *"""
        return _gpstk.cmap_items(self)


    def __contains__(self, key):
        """__contains__(cmap self, std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::key_type const & key) -> bool"""
        return _gpstk.cmap___contains__(self, key)


    def key_iterator(self):
        """key_iterator(cmap self) -> SwigPyIterator"""
        return _gpstk.cmap_key_iterator(self)


    def value_iterator(self):
        """value_iterator(cmap self) -> SwigPyIterator"""
        return _gpstk.cmap_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(cmap self, std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::key_type const & key)
        __setitem__(cmap self, std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::key_type const & key, std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::mapped_type const & x)
        """
        return _gpstk.cmap___setitem__(self, *args)


    def asdict(self):
        """asdict(cmap self) -> PyObject *"""
        return _gpstk.cmap_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(swig::SwigPtr_PyObject,swig::SwigPtr_PyObject)> self, std::less< swig::SwigPtr_PyObject > const & arg2) -> cmap
        __init__(std::map<(swig::SwigPtr_PyObject,swig::SwigPtr_PyObject)> self) -> cmap
        __init__(std::map<(swig::SwigPtr_PyObject,swig::SwigPtr_PyObject)> self, cmap arg2) -> cmap
        """
        this = _gpstk.new_cmap(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(cmap self) -> bool"""
        return _gpstk.cmap_empty(self)


    def size(self):
        """size(cmap self) -> std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::size_type"""
        return _gpstk.cmap_size(self)


    def clear(self):
        """clear(cmap self)"""
        return _gpstk.cmap_clear(self)


    def swap(self, v):
        """swap(cmap self, cmap v)"""
        return _gpstk.cmap_swap(self, v)


    def get_allocator(self):
        """get_allocator(cmap self) -> std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::allocator_type"""
        return _gpstk.cmap_get_allocator(self)


    def begin(self):
        """begin(cmap self) -> std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::iterator"""
        return _gpstk.cmap_begin(self)


    def end(self):
        """end(cmap self) -> std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::iterator"""
        return _gpstk.cmap_end(self)


    def rbegin(self):
        """rbegin(cmap self) -> std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::reverse_iterator"""
        return _gpstk.cmap_rbegin(self)


    def rend(self):
        """rend(cmap self) -> std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::reverse_iterator"""
        return _gpstk.cmap_rend(self)


    def count(self, x):
        """count(cmap self, std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::key_type const & x) -> std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::size_type"""
        return _gpstk.cmap_count(self, x)


    def erase(self, *args):
        """
        erase(cmap self, std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::key_type const & x) -> std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::size_type
        erase(cmap self, std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::iterator position)
        erase(cmap self, std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::iterator first, std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::iterator last)
        """
        return _gpstk.cmap_erase(self, *args)


    def find(self, x):
        """find(cmap self, std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::key_type const & x) -> std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::iterator"""
        return _gpstk.cmap_find(self, x)


    def lower_bound(self, x):
        """lower_bound(cmap self, std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::key_type const & x) -> std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::iterator"""
        return _gpstk.cmap_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(cmap self, std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::key_type const & x) -> std::map< swig::SwigPtr_PyObject,swig::SwigPtr_PyObject >::iterator"""
        return _gpstk.cmap_upper_bound(self, x)

    __swig_destroy__ = _gpstk.delete_cmap
    __del__ = lambda self: None
cmap_swigregister = _gpstk.cmap_swigregister
cmap_swigregister(cmap)

class map_string_double(_object):
    """Proxy of C++ std::map<(std::string,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_double, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(map_string_double self) -> SwigPyIterator"""
        return _gpstk.map_string_double_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(map_string_double self) -> bool"""
        return _gpstk.map_string_double___nonzero__(self)


    def __bool__(self):
        """__bool__(map_string_double self) -> bool"""
        return _gpstk.map_string_double___bool__(self)


    def __len__(self):
        """__len__(map_string_double self) -> std::map< std::string,double >::size_type"""
        return _gpstk.map_string_double___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(map_string_double self, std::map< std::string,double >::key_type const & key) -> std::map< std::string,double >::mapped_type const &"""
        return _gpstk.map_string_double___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(map_string_double self, std::map< std::string,double >::key_type const & key)"""
        return _gpstk.map_string_double___delitem__(self, key)


    def has_key(self, key):
        """has_key(map_string_double self, std::map< std::string,double >::key_type const & key) -> bool"""
        return _gpstk.map_string_double_has_key(self, key)


    def keys(self):
        """keys(map_string_double self) -> PyObject *"""
        return _gpstk.map_string_double_keys(self)


    def values(self):
        """values(map_string_double self) -> PyObject *"""
        return _gpstk.map_string_double_values(self)


    def items(self):
        """items(map_string_double self) -> PyObject *"""
        return _gpstk.map_string_double_items(self)


    def __contains__(self, key):
        """__contains__(map_string_double self, std::map< std::string,double >::key_type const & key) -> bool"""
        return _gpstk.map_string_double___contains__(self, key)


    def key_iterator(self):
        """key_iterator(map_string_double self) -> SwigPyIterator"""
        return _gpstk.map_string_double_key_iterator(self)


    def value_iterator(self):
        """value_iterator(map_string_double self) -> SwigPyIterator"""
        return _gpstk.map_string_double_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(map_string_double self, std::map< std::string,double >::key_type const & key)
        __setitem__(map_string_double self, std::map< std::string,double >::key_type const & key, std::map< std::string,double >::mapped_type const & x)
        """
        return _gpstk.map_string_double___setitem__(self, *args)


    def asdict(self):
        """asdict(map_string_double self) -> PyObject *"""
        return _gpstk.map_string_double_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(std::string,double)> self, std::less< std::string > const & arg2) -> map_string_double
        __init__(std::map<(std::string,double)> self) -> map_string_double
        __init__(std::map<(std::string,double)> self, map_string_double arg2) -> map_string_double
        """
        this = _gpstk.new_map_string_double(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(map_string_double self) -> bool"""
        return _gpstk.map_string_double_empty(self)


    def size(self):
        """size(map_string_double self) -> std::map< std::string,double >::size_type"""
        return _gpstk.map_string_double_size(self)


    def clear(self):
        """clear(map_string_double self)"""
        return _gpstk.map_string_double_clear(self)


    def swap(self, v):
        """swap(map_string_double self, map_string_double v)"""
        return _gpstk.map_string_double_swap(self, v)


    def get_allocator(self):
        """get_allocator(map_string_double self) -> std::map< std::string,double >::allocator_type"""
        return _gpstk.map_string_double_get_allocator(self)


    def begin(self):
        """begin(map_string_double self) -> std::map< std::string,double >::iterator"""
        return _gpstk.map_string_double_begin(self)


    def end(self):
        """end(map_string_double self) -> std::map< std::string,double >::iterator"""
        return _gpstk.map_string_double_end(self)


    def rbegin(self):
        """rbegin(map_string_double self) -> std::map< std::string,double >::reverse_iterator"""
        return _gpstk.map_string_double_rbegin(self)


    def rend(self):
        """rend(map_string_double self) -> std::map< std::string,double >::reverse_iterator"""
        return _gpstk.map_string_double_rend(self)


    def count(self, x):
        """count(map_string_double self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::size_type"""
        return _gpstk.map_string_double_count(self, x)


    def erase(self, *args):
        """
        erase(map_string_double self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::size_type
        erase(map_string_double self, std::map< std::string,double >::iterator position)
        erase(map_string_double self, std::map< std::string,double >::iterator first, std::map< std::string,double >::iterator last)
        """
        return _gpstk.map_string_double_erase(self, *args)


    def find(self, x):
        """find(map_string_double self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator"""
        return _gpstk.map_string_double_find(self, x)


    def lower_bound(self, x):
        """lower_bound(map_string_double self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator"""
        return _gpstk.map_string_double_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(map_string_double self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator"""
        return _gpstk.map_string_double_upper_bound(self, x)

    __swig_destroy__ = _gpstk.delete_map_string_double
    __del__ = lambda self: None
map_string_double_swigregister = _gpstk.map_string_double_swigregister
map_string_double_swigregister(map_string_double)

class map_string_int(_object):
    """Proxy of C++ std::map<(std::string,int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_int, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(map_string_int self) -> SwigPyIterator"""
        return _gpstk.map_string_int_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(map_string_int self) -> bool"""
        return _gpstk.map_string_int___nonzero__(self)


    def __bool__(self):
        """__bool__(map_string_int self) -> bool"""
        return _gpstk.map_string_int___bool__(self)


    def __len__(self):
        """__len__(map_string_int self) -> std::map< std::string,int >::size_type"""
        return _gpstk.map_string_int___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(map_string_int self, std::map< std::string,int >::key_type const & key) -> std::map< std::string,int >::mapped_type const &"""
        return _gpstk.map_string_int___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(map_string_int self, std::map< std::string,int >::key_type const & key)"""
        return _gpstk.map_string_int___delitem__(self, key)


    def has_key(self, key):
        """has_key(map_string_int self, std::map< std::string,int >::key_type const & key) -> bool"""
        return _gpstk.map_string_int_has_key(self, key)


    def keys(self):
        """keys(map_string_int self) -> PyObject *"""
        return _gpstk.map_string_int_keys(self)


    def values(self):
        """values(map_string_int self) -> PyObject *"""
        return _gpstk.map_string_int_values(self)


    def items(self):
        """items(map_string_int self) -> PyObject *"""
        return _gpstk.map_string_int_items(self)


    def __contains__(self, key):
        """__contains__(map_string_int self, std::map< std::string,int >::key_type const & key) -> bool"""
        return _gpstk.map_string_int___contains__(self, key)


    def key_iterator(self):
        """key_iterator(map_string_int self) -> SwigPyIterator"""
        return _gpstk.map_string_int_key_iterator(self)


    def value_iterator(self):
        """value_iterator(map_string_int self) -> SwigPyIterator"""
        return _gpstk.map_string_int_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(map_string_int self, std::map< std::string,int >::key_type const & key)
        __setitem__(map_string_int self, std::map< std::string,int >::key_type const & key, std::map< std::string,int >::mapped_type const & x)
        """
        return _gpstk.map_string_int___setitem__(self, *args)


    def asdict(self):
        """asdict(map_string_int self) -> PyObject *"""
        return _gpstk.map_string_int_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(std::string,int)> self, std::less< std::string > const & arg2) -> map_string_int
        __init__(std::map<(std::string,int)> self) -> map_string_int
        __init__(std::map<(std::string,int)> self, map_string_int arg2) -> map_string_int
        """
        this = _gpstk.new_map_string_int(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(map_string_int self) -> bool"""
        return _gpstk.map_string_int_empty(self)


    def size(self):
        """size(map_string_int self) -> std::map< std::string,int >::size_type"""
        return _gpstk.map_string_int_size(self)


    def clear(self):
        """clear(map_string_int self)"""
        return _gpstk.map_string_int_clear(self)


    def swap(self, v):
        """swap(map_string_int self, map_string_int v)"""
        return _gpstk.map_string_int_swap(self, v)


    def get_allocator(self):
        """get_allocator(map_string_int self) -> std::map< std::string,int >::allocator_type"""
        return _gpstk.map_string_int_get_allocator(self)


    def begin(self):
        """begin(map_string_int self) -> std::map< std::string,int >::iterator"""
        return _gpstk.map_string_int_begin(self)


    def end(self):
        """end(map_string_int self) -> std::map< std::string,int >::iterator"""
        return _gpstk.map_string_int_end(self)


    def rbegin(self):
        """rbegin(map_string_int self) -> std::map< std::string,int >::reverse_iterator"""
        return _gpstk.map_string_int_rbegin(self)


    def rend(self):
        """rend(map_string_int self) -> std::map< std::string,int >::reverse_iterator"""
        return _gpstk.map_string_int_rend(self)


    def count(self, x):
        """count(map_string_int self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::size_type"""
        return _gpstk.map_string_int_count(self, x)


    def erase(self, *args):
        """
        erase(map_string_int self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::size_type
        erase(map_string_int self, std::map< std::string,int >::iterator position)
        erase(map_string_int self, std::map< std::string,int >::iterator first, std::map< std::string,int >::iterator last)
        """
        return _gpstk.map_string_int_erase(self, *args)


    def find(self, x):
        """find(map_string_int self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::iterator"""
        return _gpstk.map_string_int_find(self, x)


    def lower_bound(self, x):
        """lower_bound(map_string_int self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::iterator"""
        return _gpstk.map_string_int_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(map_string_int self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::iterator"""
        return _gpstk.map_string_int_upper_bound(self, x)

    __swig_destroy__ = _gpstk.delete_map_string_int
    __del__ = lambda self: None
map_string_int_swigregister = _gpstk.map_string_int_swigregister
map_string_int_swigregister(map_string_int)

class map_string_char(_object):
    """Proxy of C++ std::map<(std::string,char)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_char, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_char, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(map_string_char self) -> SwigPyIterator"""
        return _gpstk.map_string_char_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(map_string_char self) -> bool"""
        return _gpstk.map_string_char___nonzero__(self)


    def __bool__(self):
        """__bool__(map_string_char self) -> bool"""
        return _gpstk.map_string_char___bool__(self)


    def __len__(self):
        """__len__(map_string_char self) -> std::map< std::string,char >::size_type"""
        return _gpstk.map_string_char___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(map_string_char self, std::map< std::string,char >::key_type const & key) -> std::map< std::string,char >::mapped_type const &"""
        return _gpstk.map_string_char___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(map_string_char self, std::map< std::string,char >::key_type const & key)"""
        return _gpstk.map_string_char___delitem__(self, key)


    def has_key(self, key):
        """has_key(map_string_char self, std::map< std::string,char >::key_type const & key) -> bool"""
        return _gpstk.map_string_char_has_key(self, key)


    def keys(self):
        """keys(map_string_char self) -> PyObject *"""
        return _gpstk.map_string_char_keys(self)


    def values(self):
        """values(map_string_char self) -> PyObject *"""
        return _gpstk.map_string_char_values(self)


    def items(self):
        """items(map_string_char self) -> PyObject *"""
        return _gpstk.map_string_char_items(self)


    def __contains__(self, key):
        """__contains__(map_string_char self, std::map< std::string,char >::key_type const & key) -> bool"""
        return _gpstk.map_string_char___contains__(self, key)


    def key_iterator(self):
        """key_iterator(map_string_char self) -> SwigPyIterator"""
        return _gpstk.map_string_char_key_iterator(self)


    def value_iterator(self):
        """value_iterator(map_string_char self) -> SwigPyIterator"""
        return _gpstk.map_string_char_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(map_string_char self, std::map< std::string,char >::key_type const & key)
        __setitem__(map_string_char self, std::map< std::string,char >::key_type const & key, std::map< std::string,char >::mapped_type const & x)
        """
        return _gpstk.map_string_char___setitem__(self, *args)


    def asdict(self):
        """asdict(map_string_char self) -> PyObject *"""
        return _gpstk.map_string_char_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(std::string,char)> self, std::less< std::string > const & arg2) -> map_string_char
        __init__(std::map<(std::string,char)> self) -> map_string_char
        __init__(std::map<(std::string,char)> self, map_string_char arg2) -> map_string_char
        """
        this = _gpstk.new_map_string_char(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(map_string_char self) -> bool"""
        return _gpstk.map_string_char_empty(self)


    def size(self):
        """size(map_string_char self) -> std::map< std::string,char >::size_type"""
        return _gpstk.map_string_char_size(self)


    def clear(self):
        """clear(map_string_char self)"""
        return _gpstk.map_string_char_clear(self)


    def swap(self, v):
        """swap(map_string_char self, map_string_char v)"""
        return _gpstk.map_string_char_swap(self, v)


    def get_allocator(self):
        """get_allocator(map_string_char self) -> std::map< std::string,char >::allocator_type"""
        return _gpstk.map_string_char_get_allocator(self)


    def begin(self):
        """begin(map_string_char self) -> std::map< std::string,char >::iterator"""
        return _gpstk.map_string_char_begin(self)


    def end(self):
        """end(map_string_char self) -> std::map< std::string,char >::iterator"""
        return _gpstk.map_string_char_end(self)


    def rbegin(self):
        """rbegin(map_string_char self) -> std::map< std::string,char >::reverse_iterator"""
        return _gpstk.map_string_char_rbegin(self)


    def rend(self):
        """rend(map_string_char self) -> std::map< std::string,char >::reverse_iterator"""
        return _gpstk.map_string_char_rend(self)


    def count(self, x):
        """count(map_string_char self, std::map< std::string,char >::key_type const & x) -> std::map< std::string,char >::size_type"""
        return _gpstk.map_string_char_count(self, x)


    def erase(self, *args):
        """
        erase(map_string_char self, std::map< std::string,char >::key_type const & x) -> std::map< std::string,char >::size_type
        erase(map_string_char self, std::map< std::string,char >::iterator position)
        erase(map_string_char self, std::map< std::string,char >::iterator first, std::map< std::string,char >::iterator last)
        """
        return _gpstk.map_string_char_erase(self, *args)


    def find(self, x):
        """find(map_string_char self, std::map< std::string,char >::key_type const & x) -> std::map< std::string,char >::iterator"""
        return _gpstk.map_string_char_find(self, x)


    def lower_bound(self, x):
        """lower_bound(map_string_char self, std::map< std::string,char >::key_type const & x) -> std::map< std::string,char >::iterator"""
        return _gpstk.map_string_char_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(map_string_char self, std::map< std::string,char >::key_type const & x) -> std::map< std::string,char >::iterator"""
        return _gpstk.map_string_char_upper_bound(self, x)

    __swig_destroy__ = _gpstk.delete_map_string_char
    __del__ = lambda self: None
map_string_char_swigregister = _gpstk.map_string_char_swigregister
map_string_char_swigregister(map_string_char)

class map_double_string(_object):
    """Proxy of C++ std::map<(double,std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_double_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_double_string, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(map_double_string self) -> SwigPyIterator"""
        return _gpstk.map_double_string_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(map_double_string self) -> bool"""
        return _gpstk.map_double_string___nonzero__(self)


    def __bool__(self):
        """__bool__(map_double_string self) -> bool"""
        return _gpstk.map_double_string___bool__(self)


    def __len__(self):
        """__len__(map_double_string self) -> std::map< double,std::string >::size_type"""
        return _gpstk.map_double_string___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(map_double_string self, std::map< double,std::string >::key_type const & key) -> std::map< double,std::string >::mapped_type const &"""
        return _gpstk.map_double_string___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(map_double_string self, std::map< double,std::string >::key_type const & key)"""
        return _gpstk.map_double_string___delitem__(self, key)


    def has_key(self, key):
        """has_key(map_double_string self, std::map< double,std::string >::key_type const & key) -> bool"""
        return _gpstk.map_double_string_has_key(self, key)


    def keys(self):
        """keys(map_double_string self) -> PyObject *"""
        return _gpstk.map_double_string_keys(self)


    def values(self):
        """values(map_double_string self) -> PyObject *"""
        return _gpstk.map_double_string_values(self)


    def items(self):
        """items(map_double_string self) -> PyObject *"""
        return _gpstk.map_double_string_items(self)


    def __contains__(self, key):
        """__contains__(map_double_string self, std::map< double,std::string >::key_type const & key) -> bool"""
        return _gpstk.map_double_string___contains__(self, key)


    def key_iterator(self):
        """key_iterator(map_double_string self) -> SwigPyIterator"""
        return _gpstk.map_double_string_key_iterator(self)


    def value_iterator(self):
        """value_iterator(map_double_string self) -> SwigPyIterator"""
        return _gpstk.map_double_string_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(map_double_string self, std::map< double,std::string >::key_type const & key)
        __setitem__(map_double_string self, std::map< double,std::string >::key_type const & key, std::map< double,std::string >::mapped_type const & x)
        """
        return _gpstk.map_double_string___setitem__(self, *args)


    def asdict(self):
        """asdict(map_double_string self) -> PyObject *"""
        return _gpstk.map_double_string_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(double,std::string)> self, std::less< double > const & arg2) -> map_double_string
        __init__(std::map<(double,std::string)> self) -> map_double_string
        __init__(std::map<(double,std::string)> self, map_double_string arg2) -> map_double_string
        """
        this = _gpstk.new_map_double_string(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(map_double_string self) -> bool"""
        return _gpstk.map_double_string_empty(self)


    def size(self):
        """size(map_double_string self) -> std::map< double,std::string >::size_type"""
        return _gpstk.map_double_string_size(self)


    def clear(self):
        """clear(map_double_string self)"""
        return _gpstk.map_double_string_clear(self)


    def swap(self, v):
        """swap(map_double_string self, map_double_string v)"""
        return _gpstk.map_double_string_swap(self, v)


    def get_allocator(self):
        """get_allocator(map_double_string self) -> std::map< double,std::string >::allocator_type"""
        return _gpstk.map_double_string_get_allocator(self)


    def begin(self):
        """begin(map_double_string self) -> std::map< double,std::string >::iterator"""
        return _gpstk.map_double_string_begin(self)


    def end(self):
        """end(map_double_string self) -> std::map< double,std::string >::iterator"""
        return _gpstk.map_double_string_end(self)


    def rbegin(self):
        """rbegin(map_double_string self) -> std::map< double,std::string >::reverse_iterator"""
        return _gpstk.map_double_string_rbegin(self)


    def rend(self):
        """rend(map_double_string self) -> std::map< double,std::string >::reverse_iterator"""
        return _gpstk.map_double_string_rend(self)


    def count(self, x):
        """count(map_double_string self, std::map< double,std::string >::key_type const & x) -> std::map< double,std::string >::size_type"""
        return _gpstk.map_double_string_count(self, x)


    def erase(self, *args):
        """
        erase(map_double_string self, std::map< double,std::string >::key_type const & x) -> std::map< double,std::string >::size_type
        erase(map_double_string self, std::map< double,std::string >::iterator position)
        erase(map_double_string self, std::map< double,std::string >::iterator first, std::map< double,std::string >::iterator last)
        """
        return _gpstk.map_double_string_erase(self, *args)


    def find(self, x):
        """find(map_double_string self, std::map< double,std::string >::key_type const & x) -> std::map< double,std::string >::iterator"""
        return _gpstk.map_double_string_find(self, x)


    def lower_bound(self, x):
        """lower_bound(map_double_string self, std::map< double,std::string >::key_type const & x) -> std::map< double,std::string >::iterator"""
        return _gpstk.map_double_string_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(map_double_string self, std::map< double,std::string >::key_type const & x) -> std::map< double,std::string >::iterator"""
        return _gpstk.map_double_string_upper_bound(self, x)

    __swig_destroy__ = _gpstk.delete_map_double_string
    __del__ = lambda self: None
map_double_string_swigregister = _gpstk.map_double_string_swigregister
map_double_string_swigregister(map_double_string)

class map_double_int(_object):
    """Proxy of C++ std::map<(double,int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_double_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_double_int, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(map_double_int self) -> SwigPyIterator"""
        return _gpstk.map_double_int_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(map_double_int self) -> bool"""
        return _gpstk.map_double_int___nonzero__(self)


    def __bool__(self):
        """__bool__(map_double_int self) -> bool"""
        return _gpstk.map_double_int___bool__(self)


    def __len__(self):
        """__len__(map_double_int self) -> std::map< double,int >::size_type"""
        return _gpstk.map_double_int___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(map_double_int self, std::map< double,int >::key_type const & key) -> std::map< double,int >::mapped_type const &"""
        return _gpstk.map_double_int___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(map_double_int self, std::map< double,int >::key_type const & key)"""
        return _gpstk.map_double_int___delitem__(self, key)


    def has_key(self, key):
        """has_key(map_double_int self, std::map< double,int >::key_type const & key) -> bool"""
        return _gpstk.map_double_int_has_key(self, key)


    def keys(self):
        """keys(map_double_int self) -> PyObject *"""
        return _gpstk.map_double_int_keys(self)


    def values(self):
        """values(map_double_int self) -> PyObject *"""
        return _gpstk.map_double_int_values(self)


    def items(self):
        """items(map_double_int self) -> PyObject *"""
        return _gpstk.map_double_int_items(self)


    def __contains__(self, key):
        """__contains__(map_double_int self, std::map< double,int >::key_type const & key) -> bool"""
        return _gpstk.map_double_int___contains__(self, key)


    def key_iterator(self):
        """key_iterator(map_double_int self) -> SwigPyIterator"""
        return _gpstk.map_double_int_key_iterator(self)


    def value_iterator(self):
        """value_iterator(map_double_int self) -> SwigPyIterator"""
        return _gpstk.map_double_int_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(map_double_int self, std::map< double,int >::key_type const & key)
        __setitem__(map_double_int self, std::map< double,int >::key_type const & key, std::map< double,int >::mapped_type const & x)
        """
        return _gpstk.map_double_int___setitem__(self, *args)


    def asdict(self):
        """asdict(map_double_int self) -> PyObject *"""
        return _gpstk.map_double_int_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(double,int)> self, std::less< double > const & arg2) -> map_double_int
        __init__(std::map<(double,int)> self) -> map_double_int
        __init__(std::map<(double,int)> self, map_double_int arg2) -> map_double_int
        """
        this = _gpstk.new_map_double_int(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(map_double_int self) -> bool"""
        return _gpstk.map_double_int_empty(self)


    def size(self):
        """size(map_double_int self) -> std::map< double,int >::size_type"""
        return _gpstk.map_double_int_size(self)


    def clear(self):
        """clear(map_double_int self)"""
        return _gpstk.map_double_int_clear(self)


    def swap(self, v):
        """swap(map_double_int self, map_double_int v)"""
        return _gpstk.map_double_int_swap(self, v)


    def get_allocator(self):
        """get_allocator(map_double_int self) -> std::map< double,int >::allocator_type"""
        return _gpstk.map_double_int_get_allocator(self)


    def begin(self):
        """begin(map_double_int self) -> std::map< double,int >::iterator"""
        return _gpstk.map_double_int_begin(self)


    def end(self):
        """end(map_double_int self) -> std::map< double,int >::iterator"""
        return _gpstk.map_double_int_end(self)


    def rbegin(self):
        """rbegin(map_double_int self) -> std::map< double,int >::reverse_iterator"""
        return _gpstk.map_double_int_rbegin(self)


    def rend(self):
        """rend(map_double_int self) -> std::map< double,int >::reverse_iterator"""
        return _gpstk.map_double_int_rend(self)


    def count(self, x):
        """count(map_double_int self, std::map< double,int >::key_type const & x) -> std::map< double,int >::size_type"""
        return _gpstk.map_double_int_count(self, x)


    def erase(self, *args):
        """
        erase(map_double_int self, std::map< double,int >::key_type const & x) -> std::map< double,int >::size_type
        erase(map_double_int self, std::map< double,int >::iterator position)
        erase(map_double_int self, std::map< double,int >::iterator first, std::map< double,int >::iterator last)
        """
        return _gpstk.map_double_int_erase(self, *args)


    def find(self, x):
        """find(map_double_int self, std::map< double,int >::key_type const & x) -> std::map< double,int >::iterator"""
        return _gpstk.map_double_int_find(self, x)


    def lower_bound(self, x):
        """lower_bound(map_double_int self, std::map< double,int >::key_type const & x) -> std::map< double,int >::iterator"""
        return _gpstk.map_double_int_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(map_double_int self, std::map< double,int >::key_type const & x) -> std::map< double,int >::iterator"""
        return _gpstk.map_double_int_upper_bound(self, x)

    __swig_destroy__ = _gpstk.delete_map_double_int
    __del__ = lambda self: None
map_double_int_swigregister = _gpstk.map_double_int_swigregister
map_double_int_swigregister(map_double_int)

class map_int_char(_object):
    """Proxy of C++ std::map<(int,char)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_int_char, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_int_char, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(map_int_char self) -> SwigPyIterator"""
        return _gpstk.map_int_char_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(map_int_char self) -> bool"""
        return _gpstk.map_int_char___nonzero__(self)


    def __bool__(self):
        """__bool__(map_int_char self) -> bool"""
        return _gpstk.map_int_char___bool__(self)


    def __len__(self):
        """__len__(map_int_char self) -> std::map< int,char >::size_type"""
        return _gpstk.map_int_char___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(map_int_char self, std::map< int,char >::key_type const & key) -> std::map< int,char >::mapped_type const &"""
        return _gpstk.map_int_char___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(map_int_char self, std::map< int,char >::key_type const & key)"""
        return _gpstk.map_int_char___delitem__(self, key)


    def has_key(self, key):
        """has_key(map_int_char self, std::map< int,char >::key_type const & key) -> bool"""
        return _gpstk.map_int_char_has_key(self, key)


    def keys(self):
        """keys(map_int_char self) -> PyObject *"""
        return _gpstk.map_int_char_keys(self)


    def values(self):
        """values(map_int_char self) -> PyObject *"""
        return _gpstk.map_int_char_values(self)


    def items(self):
        """items(map_int_char self) -> PyObject *"""
        return _gpstk.map_int_char_items(self)


    def __contains__(self, key):
        """__contains__(map_int_char self, std::map< int,char >::key_type const & key) -> bool"""
        return _gpstk.map_int_char___contains__(self, key)


    def key_iterator(self):
        """key_iterator(map_int_char self) -> SwigPyIterator"""
        return _gpstk.map_int_char_key_iterator(self)


    def value_iterator(self):
        """value_iterator(map_int_char self) -> SwigPyIterator"""
        return _gpstk.map_int_char_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(map_int_char self, std::map< int,char >::key_type const & key)
        __setitem__(map_int_char self, std::map< int,char >::key_type const & key, std::map< int,char >::mapped_type const & x)
        """
        return _gpstk.map_int_char___setitem__(self, *args)


    def asdict(self):
        """asdict(map_int_char self) -> PyObject *"""
        return _gpstk.map_int_char_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(int,char)> self, std::less< int > const & arg2) -> map_int_char
        __init__(std::map<(int,char)> self) -> map_int_char
        __init__(std::map<(int,char)> self, map_int_char arg2) -> map_int_char
        """
        this = _gpstk.new_map_int_char(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(map_int_char self) -> bool"""
        return _gpstk.map_int_char_empty(self)


    def size(self):
        """size(map_int_char self) -> std::map< int,char >::size_type"""
        return _gpstk.map_int_char_size(self)


    def clear(self):
        """clear(map_int_char self)"""
        return _gpstk.map_int_char_clear(self)


    def swap(self, v):
        """swap(map_int_char self, map_int_char v)"""
        return _gpstk.map_int_char_swap(self, v)


    def get_allocator(self):
        """get_allocator(map_int_char self) -> std::map< int,char >::allocator_type"""
        return _gpstk.map_int_char_get_allocator(self)


    def begin(self):
        """begin(map_int_char self) -> std::map< int,char >::iterator"""
        return _gpstk.map_int_char_begin(self)


    def end(self):
        """end(map_int_char self) -> std::map< int,char >::iterator"""
        return _gpstk.map_int_char_end(self)


    def rbegin(self):
        """rbegin(map_int_char self) -> std::map< int,char >::reverse_iterator"""
        return _gpstk.map_int_char_rbegin(self)


    def rend(self):
        """rend(map_int_char self) -> std::map< int,char >::reverse_iterator"""
        return _gpstk.map_int_char_rend(self)


    def count(self, x):
        """count(map_int_char self, std::map< int,char >::key_type const & x) -> std::map< int,char >::size_type"""
        return _gpstk.map_int_char_count(self, x)


    def erase(self, *args):
        """
        erase(map_int_char self, std::map< int,char >::key_type const & x) -> std::map< int,char >::size_type
        erase(map_int_char self, std::map< int,char >::iterator position)
        erase(map_int_char self, std::map< int,char >::iterator first, std::map< int,char >::iterator last)
        """
        return _gpstk.map_int_char_erase(self, *args)


    def find(self, x):
        """find(map_int_char self, std::map< int,char >::key_type const & x) -> std::map< int,char >::iterator"""
        return _gpstk.map_int_char_find(self, x)


    def lower_bound(self, x):
        """lower_bound(map_int_char self, std::map< int,char >::key_type const & x) -> std::map< int,char >::iterator"""
        return _gpstk.map_int_char_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(map_int_char self, std::map< int,char >::key_type const & x) -> std::map< int,char >::iterator"""
        return _gpstk.map_int_char_upper_bound(self, x)

    __swig_destroy__ = _gpstk.delete_map_int_char
    __del__ = lambda self: None
map_int_char_swigregister = _gpstk.map_int_char_swigregister
map_int_char_swigregister(map_int_char)

class map_int_double(_object):
    """Proxy of C++ std::map<(int,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_int_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_int_double, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(map_int_double self) -> SwigPyIterator"""
        return _gpstk.map_int_double_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(map_int_double self) -> bool"""
        return _gpstk.map_int_double___nonzero__(self)


    def __bool__(self):
        """__bool__(map_int_double self) -> bool"""
        return _gpstk.map_int_double___bool__(self)


    def __len__(self):
        """__len__(map_int_double self) -> std::map< int,double >::size_type"""
        return _gpstk.map_int_double___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(map_int_double self, std::map< int,double >::key_type const & key) -> std::map< int,double >::mapped_type const &"""
        return _gpstk.map_int_double___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(map_int_double self, std::map< int,double >::key_type const & key)"""
        return _gpstk.map_int_double___delitem__(self, key)


    def has_key(self, key):
        """has_key(map_int_double self, std::map< int,double >::key_type const & key) -> bool"""
        return _gpstk.map_int_double_has_key(self, key)


    def keys(self):
        """keys(map_int_double self) -> PyObject *"""
        return _gpstk.map_int_double_keys(self)


    def values(self):
        """values(map_int_double self) -> PyObject *"""
        return _gpstk.map_int_double_values(self)


    def items(self):
        """items(map_int_double self) -> PyObject *"""
        return _gpstk.map_int_double_items(self)


    def __contains__(self, key):
        """__contains__(map_int_double self, std::map< int,double >::key_type const & key) -> bool"""
        return _gpstk.map_int_double___contains__(self, key)


    def key_iterator(self):
        """key_iterator(map_int_double self) -> SwigPyIterator"""
        return _gpstk.map_int_double_key_iterator(self)


    def value_iterator(self):
        """value_iterator(map_int_double self) -> SwigPyIterator"""
        return _gpstk.map_int_double_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(map_int_double self, std::map< int,double >::key_type const & key)
        __setitem__(map_int_double self, std::map< int,double >::key_type const & key, std::map< int,double >::mapped_type const & x)
        """
        return _gpstk.map_int_double___setitem__(self, *args)


    def asdict(self):
        """asdict(map_int_double self) -> PyObject *"""
        return _gpstk.map_int_double_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(int,double)> self, std::less< int > const & arg2) -> map_int_double
        __init__(std::map<(int,double)> self) -> map_int_double
        __init__(std::map<(int,double)> self, map_int_double arg2) -> map_int_double
        """
        this = _gpstk.new_map_int_double(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(map_int_double self) -> bool"""
        return _gpstk.map_int_double_empty(self)


    def size(self):
        """size(map_int_double self) -> std::map< int,double >::size_type"""
        return _gpstk.map_int_double_size(self)


    def clear(self):
        """clear(map_int_double self)"""
        return _gpstk.map_int_double_clear(self)


    def swap(self, v):
        """swap(map_int_double self, map_int_double v)"""
        return _gpstk.map_int_double_swap(self, v)


    def get_allocator(self):
        """get_allocator(map_int_double self) -> std::map< int,double >::allocator_type"""
        return _gpstk.map_int_double_get_allocator(self)


    def begin(self):
        """begin(map_int_double self) -> std::map< int,double >::iterator"""
        return _gpstk.map_int_double_begin(self)


    def end(self):
        """end(map_int_double self) -> std::map< int,double >::iterator"""
        return _gpstk.map_int_double_end(self)


    def rbegin(self):
        """rbegin(map_int_double self) -> std::map< int,double >::reverse_iterator"""
        return _gpstk.map_int_double_rbegin(self)


    def rend(self):
        """rend(map_int_double self) -> std::map< int,double >::reverse_iterator"""
        return _gpstk.map_int_double_rend(self)


    def count(self, x):
        """count(map_int_double self, std::map< int,double >::key_type const & x) -> std::map< int,double >::size_type"""
        return _gpstk.map_int_double_count(self, x)


    def erase(self, *args):
        """
        erase(map_int_double self, std::map< int,double >::key_type const & x) -> std::map< int,double >::size_type
        erase(map_int_double self, std::map< int,double >::iterator position)
        erase(map_int_double self, std::map< int,double >::iterator first, std::map< int,double >::iterator last)
        """
        return _gpstk.map_int_double_erase(self, *args)


    def find(self, x):
        """find(map_int_double self, std::map< int,double >::key_type const & x) -> std::map< int,double >::iterator"""
        return _gpstk.map_int_double_find(self, x)


    def lower_bound(self, x):
        """lower_bound(map_int_double self, std::map< int,double >::key_type const & x) -> std::map< int,double >::iterator"""
        return _gpstk.map_int_double_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(map_int_double self, std::map< int,double >::key_type const & x) -> std::map< int,double >::iterator"""
        return _gpstk.map_int_double_upper_bound(self, x)

    __swig_destroy__ = _gpstk.delete_map_int_double
    __del__ = lambda self: None
map_int_double_swigregister = _gpstk.map_int_double_swigregister
map_int_double_swigregister(map_int_double)

class map_int_string(_object):
    """Proxy of C++ std::map<(int,std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_int_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_int_string, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(map_int_string self) -> SwigPyIterator"""
        return _gpstk.map_int_string_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(map_int_string self) -> bool"""
        return _gpstk.map_int_string___nonzero__(self)


    def __bool__(self):
        """__bool__(map_int_string self) -> bool"""
        return _gpstk.map_int_string___bool__(self)


    def __len__(self):
        """__len__(map_int_string self) -> std::map< int,std::string >::size_type"""
        return _gpstk.map_int_string___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(map_int_string self, std::map< int,std::string >::key_type const & key) -> std::map< int,std::string >::mapped_type const &"""
        return _gpstk.map_int_string___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(map_int_string self, std::map< int,std::string >::key_type const & key)"""
        return _gpstk.map_int_string___delitem__(self, key)


    def has_key(self, key):
        """has_key(map_int_string self, std::map< int,std::string >::key_type const & key) -> bool"""
        return _gpstk.map_int_string_has_key(self, key)


    def keys(self):
        """keys(map_int_string self) -> PyObject *"""
        return _gpstk.map_int_string_keys(self)


    def values(self):
        """values(map_int_string self) -> PyObject *"""
        return _gpstk.map_int_string_values(self)


    def items(self):
        """items(map_int_string self) -> PyObject *"""
        return _gpstk.map_int_string_items(self)


    def __contains__(self, key):
        """__contains__(map_int_string self, std::map< int,std::string >::key_type const & key) -> bool"""
        return _gpstk.map_int_string___contains__(self, key)


    def key_iterator(self):
        """key_iterator(map_int_string self) -> SwigPyIterator"""
        return _gpstk.map_int_string_key_iterator(self)


    def value_iterator(self):
        """value_iterator(map_int_string self) -> SwigPyIterator"""
        return _gpstk.map_int_string_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(map_int_string self, std::map< int,std::string >::key_type const & key)
        __setitem__(map_int_string self, std::map< int,std::string >::key_type const & key, std::map< int,std::string >::mapped_type const & x)
        """
        return _gpstk.map_int_string___setitem__(self, *args)


    def asdict(self):
        """asdict(map_int_string self) -> PyObject *"""
        return _gpstk.map_int_string_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(int,std::string)> self, std::less< int > const & arg2) -> map_int_string
        __init__(std::map<(int,std::string)> self) -> map_int_string
        __init__(std::map<(int,std::string)> self, map_int_string arg2) -> map_int_string
        """
        this = _gpstk.new_map_int_string(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(map_int_string self) -> bool"""
        return _gpstk.map_int_string_empty(self)


    def size(self):
        """size(map_int_string self) -> std::map< int,std::string >::size_type"""
        return _gpstk.map_int_string_size(self)


    def clear(self):
        """clear(map_int_string self)"""
        return _gpstk.map_int_string_clear(self)


    def swap(self, v):
        """swap(map_int_string self, map_int_string v)"""
        return _gpstk.map_int_string_swap(self, v)


    def get_allocator(self):
        """get_allocator(map_int_string self) -> std::map< int,std::string >::allocator_type"""
        return _gpstk.map_int_string_get_allocator(self)


    def begin(self):
        """begin(map_int_string self) -> std::map< int,std::string >::iterator"""
        return _gpstk.map_int_string_begin(self)


    def end(self):
        """end(map_int_string self) -> std::map< int,std::string >::iterator"""
        return _gpstk.map_int_string_end(self)


    def rbegin(self):
        """rbegin(map_int_string self) -> std::map< int,std::string >::reverse_iterator"""
        return _gpstk.map_int_string_rbegin(self)


    def rend(self):
        """rend(map_int_string self) -> std::map< int,std::string >::reverse_iterator"""
        return _gpstk.map_int_string_rend(self)


    def count(self, x):
        """count(map_int_string self, std::map< int,std::string >::key_type const & x) -> std::map< int,std::string >::size_type"""
        return _gpstk.map_int_string_count(self, x)


    def erase(self, *args):
        """
        erase(map_int_string self, std::map< int,std::string >::key_type const & x) -> std::map< int,std::string >::size_type
        erase(map_int_string self, std::map< int,std::string >::iterator position)
        erase(map_int_string self, std::map< int,std::string >::iterator first, std::map< int,std::string >::iterator last)
        """
        return _gpstk.map_int_string_erase(self, *args)


    def find(self, x):
        """find(map_int_string self, std::map< int,std::string >::key_type const & x) -> std::map< int,std::string >::iterator"""
        return _gpstk.map_int_string_find(self, x)


    def lower_bound(self, x):
        """lower_bound(map_int_string self, std::map< int,std::string >::key_type const & x) -> std::map< int,std::string >::iterator"""
        return _gpstk.map_int_string_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(map_int_string self, std::map< int,std::string >::key_type const & x) -> std::map< int,std::string >::iterator"""
        return _gpstk.map_int_string_upper_bound(self, x)

    __swig_destroy__ = _gpstk.delete_map_int_string
    __del__ = lambda self: None
map_int_string_swigregister = _gpstk.map_int_string_swigregister
map_int_string_swigregister(map_int_string)

class map_char_string(_object):
    """Proxy of C++ std::map<(char,std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_char_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_char_string, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(map_char_string self) -> SwigPyIterator"""
        return _gpstk.map_char_string_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(map_char_string self) -> bool"""
        return _gpstk.map_char_string___nonzero__(self)


    def __bool__(self):
        """__bool__(map_char_string self) -> bool"""
        return _gpstk.map_char_string___bool__(self)


    def __len__(self):
        """__len__(map_char_string self) -> std::map< char,std::string >::size_type"""
        return _gpstk.map_char_string___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(map_char_string self, std::map< char,std::string >::key_type const & key) -> std::map< char,std::string >::mapped_type const &"""
        return _gpstk.map_char_string___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(map_char_string self, std::map< char,std::string >::key_type const & key)"""
        return _gpstk.map_char_string___delitem__(self, key)


    def has_key(self, key):
        """has_key(map_char_string self, std::map< char,std::string >::key_type const & key) -> bool"""
        return _gpstk.map_char_string_has_key(self, key)


    def keys(self):
        """keys(map_char_string self) -> PyObject *"""
        return _gpstk.map_char_string_keys(self)


    def values(self):
        """values(map_char_string self) -> PyObject *"""
        return _gpstk.map_char_string_values(self)


    def items(self):
        """items(map_char_string self) -> PyObject *"""
        return _gpstk.map_char_string_items(self)


    def __contains__(self, key):
        """__contains__(map_char_string self, std::map< char,std::string >::key_type const & key) -> bool"""
        return _gpstk.map_char_string___contains__(self, key)


    def key_iterator(self):
        """key_iterator(map_char_string self) -> SwigPyIterator"""
        return _gpstk.map_char_string_key_iterator(self)


    def value_iterator(self):
        """value_iterator(map_char_string self) -> SwigPyIterator"""
        return _gpstk.map_char_string_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(map_char_string self, std::map< char,std::string >::key_type const & key)
        __setitem__(map_char_string self, std::map< char,std::string >::key_type const & key, std::map< char,std::string >::mapped_type const & x)
        """
        return _gpstk.map_char_string___setitem__(self, *args)


    def asdict(self):
        """asdict(map_char_string self) -> PyObject *"""
        return _gpstk.map_char_string_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(char,std::string)> self, std::less< char > const & arg2) -> map_char_string
        __init__(std::map<(char,std::string)> self) -> map_char_string
        __init__(std::map<(char,std::string)> self, map_char_string arg2) -> map_char_string
        """
        this = _gpstk.new_map_char_string(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(map_char_string self) -> bool"""
        return _gpstk.map_char_string_empty(self)


    def size(self):
        """size(map_char_string self) -> std::map< char,std::string >::size_type"""
        return _gpstk.map_char_string_size(self)


    def clear(self):
        """clear(map_char_string self)"""
        return _gpstk.map_char_string_clear(self)


    def swap(self, v):
        """swap(map_char_string self, map_char_string v)"""
        return _gpstk.map_char_string_swap(self, v)


    def get_allocator(self):
        """get_allocator(map_char_string self) -> std::map< char,std::string >::allocator_type"""
        return _gpstk.map_char_string_get_allocator(self)


    def begin(self):
        """begin(map_char_string self) -> std::map< char,std::string >::iterator"""
        return _gpstk.map_char_string_begin(self)


    def end(self):
        """end(map_char_string self) -> std::map< char,std::string >::iterator"""
        return _gpstk.map_char_string_end(self)


    def rbegin(self):
        """rbegin(map_char_string self) -> std::map< char,std::string >::reverse_iterator"""
        return _gpstk.map_char_string_rbegin(self)


    def rend(self):
        """rend(map_char_string self) -> std::map< char,std::string >::reverse_iterator"""
        return _gpstk.map_char_string_rend(self)


    def count(self, x):
        """count(map_char_string self, std::map< char,std::string >::key_type const & x) -> std::map< char,std::string >::size_type"""
        return _gpstk.map_char_string_count(self, x)


    def erase(self, *args):
        """
        erase(map_char_string self, std::map< char,std::string >::key_type const & x) -> std::map< char,std::string >::size_type
        erase(map_char_string self, std::map< char,std::string >::iterator position)
        erase(map_char_string self, std::map< char,std::string >::iterator first, std::map< char,std::string >::iterator last)
        """
        return _gpstk.map_char_string_erase(self, *args)


    def find(self, x):
        """find(map_char_string self, std::map< char,std::string >::key_type const & x) -> std::map< char,std::string >::iterator"""
        return _gpstk.map_char_string_find(self, x)


    def lower_bound(self, x):
        """lower_bound(map_char_string self, std::map< char,std::string >::key_type const & x) -> std::map< char,std::string >::iterator"""
        return _gpstk.map_char_string_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(map_char_string self, std::map< char,std::string >::key_type const & x) -> std::map< char,std::string >::iterator"""
        return _gpstk.map_char_string_upper_bound(self, x)

    __swig_destroy__ = _gpstk.delete_map_char_string
    __del__ = lambda self: None
map_char_string_swigregister = _gpstk.map_char_string_swigregister
map_char_string_swigregister(map_char_string)

class map_char_int(_object):
    """Proxy of C++ std::map<(char,int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_char_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_char_int, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(map_char_int self) -> SwigPyIterator"""
        return _gpstk.map_char_int_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(map_char_int self) -> bool"""
        return _gpstk.map_char_int___nonzero__(self)


    def __bool__(self):
        """__bool__(map_char_int self) -> bool"""
        return _gpstk.map_char_int___bool__(self)


    def __len__(self):
        """__len__(map_char_int self) -> std::map< char,int >::size_type"""
        return _gpstk.map_char_int___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(map_char_int self, std::map< char,int >::key_type const & key) -> std::map< char,int >::mapped_type const &"""
        return _gpstk.map_char_int___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(map_char_int self, std::map< char,int >::key_type const & key)"""
        return _gpstk.map_char_int___delitem__(self, key)


    def has_key(self, key):
        """has_key(map_char_int self, std::map< char,int >::key_type const & key) -> bool"""
        return _gpstk.map_char_int_has_key(self, key)


    def keys(self):
        """keys(map_char_int self) -> PyObject *"""
        return _gpstk.map_char_int_keys(self)


    def values(self):
        """values(map_char_int self) -> PyObject *"""
        return _gpstk.map_char_int_values(self)


    def items(self):
        """items(map_char_int self) -> PyObject *"""
        return _gpstk.map_char_int_items(self)


    def __contains__(self, key):
        """__contains__(map_char_int self, std::map< char,int >::key_type const & key) -> bool"""
        return _gpstk.map_char_int___contains__(self, key)


    def key_iterator(self):
        """key_iterator(map_char_int self) -> SwigPyIterator"""
        return _gpstk.map_char_int_key_iterator(self)


    def value_iterator(self):
        """value_iterator(map_char_int self) -> SwigPyIterator"""
        return _gpstk.map_char_int_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(map_char_int self, std::map< char,int >::key_type const & key)
        __setitem__(map_char_int self, std::map< char,int >::key_type const & key, std::map< char,int >::mapped_type const & x)
        """
        return _gpstk.map_char_int___setitem__(self, *args)


    def asdict(self):
        """asdict(map_char_int self) -> PyObject *"""
        return _gpstk.map_char_int_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(char,int)> self, std::less< char > const & arg2) -> map_char_int
        __init__(std::map<(char,int)> self) -> map_char_int
        __init__(std::map<(char,int)> self, map_char_int arg2) -> map_char_int
        """
        this = _gpstk.new_map_char_int(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(map_char_int self) -> bool"""
        return _gpstk.map_char_int_empty(self)


    def size(self):
        """size(map_char_int self) -> std::map< char,int >::size_type"""
        return _gpstk.map_char_int_size(self)


    def clear(self):
        """clear(map_char_int self)"""
        return _gpstk.map_char_int_clear(self)


    def swap(self, v):
        """swap(map_char_int self, map_char_int v)"""
        return _gpstk.map_char_int_swap(self, v)


    def get_allocator(self):
        """get_allocator(map_char_int self) -> std::map< char,int >::allocator_type"""
        return _gpstk.map_char_int_get_allocator(self)


    def begin(self):
        """begin(map_char_int self) -> std::map< char,int >::iterator"""
        return _gpstk.map_char_int_begin(self)


    def end(self):
        """end(map_char_int self) -> std::map< char,int >::iterator"""
        return _gpstk.map_char_int_end(self)


    def rbegin(self):
        """rbegin(map_char_int self) -> std::map< char,int >::reverse_iterator"""
        return _gpstk.map_char_int_rbegin(self)


    def rend(self):
        """rend(map_char_int self) -> std::map< char,int >::reverse_iterator"""
        return _gpstk.map_char_int_rend(self)


    def count(self, x):
        """count(map_char_int self, std::map< char,int >::key_type const & x) -> std::map< char,int >::size_type"""
        return _gpstk.map_char_int_count(self, x)


    def erase(self, *args):
        """
        erase(map_char_int self, std::map< char,int >::key_type const & x) -> std::map< char,int >::size_type
        erase(map_char_int self, std::map< char,int >::iterator position)
        erase(map_char_int self, std::map< char,int >::iterator first, std::map< char,int >::iterator last)
        """
        return _gpstk.map_char_int_erase(self, *args)


    def find(self, x):
        """find(map_char_int self, std::map< char,int >::key_type const & x) -> std::map< char,int >::iterator"""
        return _gpstk.map_char_int_find(self, x)


    def lower_bound(self, x):
        """lower_bound(map_char_int self, std::map< char,int >::key_type const & x) -> std::map< char,int >::iterator"""
        return _gpstk.map_char_int_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(map_char_int self, std::map< char,int >::key_type const & x) -> std::map< char,int >::iterator"""
        return _gpstk.map_char_int_upper_bound(self, x)

    __swig_destroy__ = _gpstk.delete_map_char_int
    __del__ = lambda self: None
map_char_int_swigregister = _gpstk.map_char_int_swigregister
map_char_int_swigregister(map_char_int)

class map_RinexObsType_RinexDatum(_object):
    """Proxy of C++ std::map<(gpstk::RinexObsType,gpstk::RinexDatum)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_RinexObsType_RinexDatum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_RinexObsType_RinexDatum, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(map_RinexObsType_RinexDatum self) -> SwigPyIterator"""
        return _gpstk.map_RinexObsType_RinexDatum_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(map_RinexObsType_RinexDatum self) -> bool"""
        return _gpstk.map_RinexObsType_RinexDatum___nonzero__(self)


    def __bool__(self):
        """__bool__(map_RinexObsType_RinexDatum self) -> bool"""
        return _gpstk.map_RinexObsType_RinexDatum___bool__(self)


    def __len__(self):
        """__len__(map_RinexObsType_RinexDatum self) -> std::map< gpstk::RinexObsType,gpstk::RinexDatum >::size_type"""
        return _gpstk.map_RinexObsType_RinexDatum___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(map_RinexObsType_RinexDatum self, RinexObsType key) -> RinexDatum"""
        return _gpstk.map_RinexObsType_RinexDatum___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(map_RinexObsType_RinexDatum self, RinexObsType key)"""
        return _gpstk.map_RinexObsType_RinexDatum___delitem__(self, key)


    def has_key(self, key):
        """has_key(map_RinexObsType_RinexDatum self, RinexObsType key) -> bool"""
        return _gpstk.map_RinexObsType_RinexDatum_has_key(self, key)


    def keys(self):
        """keys(map_RinexObsType_RinexDatum self) -> PyObject *"""
        return _gpstk.map_RinexObsType_RinexDatum_keys(self)


    def values(self):
        """values(map_RinexObsType_RinexDatum self) -> PyObject *"""
        return _gpstk.map_RinexObsType_RinexDatum_values(self)


    def items(self):
        """items(map_RinexObsType_RinexDatum self) -> PyObject *"""
        return _gpstk.map_RinexObsType_RinexDatum_items(self)


    def __contains__(self, key):
        """__contains__(map_RinexObsType_RinexDatum self, RinexObsType key) -> bool"""
        return _gpstk.map_RinexObsType_RinexDatum___contains__(self, key)


    def key_iterator(self):
        """key_iterator(map_RinexObsType_RinexDatum self) -> SwigPyIterator"""
        return _gpstk.map_RinexObsType_RinexDatum_key_iterator(self)


    def value_iterator(self):
        """value_iterator(map_RinexObsType_RinexDatum self) -> SwigPyIterator"""
        return _gpstk.map_RinexObsType_RinexDatum_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(map_RinexObsType_RinexDatum self, RinexObsType key)
        __setitem__(map_RinexObsType_RinexDatum self, RinexObsType key, RinexDatum x)
        """
        return _gpstk.map_RinexObsType_RinexDatum___setitem__(self, *args)


    def asdict(self):
        """asdict(map_RinexObsType_RinexDatum self) -> PyObject *"""
        return _gpstk.map_RinexObsType_RinexDatum_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(gpstk::RinexObsType,gpstk::RinexDatum)> self, std::less< gpstk::RinexObsType > const & arg2) -> map_RinexObsType_RinexDatum
        __init__(std::map<(gpstk::RinexObsType,gpstk::RinexDatum)> self) -> map_RinexObsType_RinexDatum
        __init__(std::map<(gpstk::RinexObsType,gpstk::RinexDatum)> self, map_RinexObsType_RinexDatum arg2) -> map_RinexObsType_RinexDatum
        """
        this = _gpstk.new_map_RinexObsType_RinexDatum(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(map_RinexObsType_RinexDatum self) -> bool"""
        return _gpstk.map_RinexObsType_RinexDatum_empty(self)


    def size(self):
        """size(map_RinexObsType_RinexDatum self) -> std::map< gpstk::RinexObsType,gpstk::RinexDatum >::size_type"""
        return _gpstk.map_RinexObsType_RinexDatum_size(self)


    def clear(self):
        """clear(map_RinexObsType_RinexDatum self)"""
        return _gpstk.map_RinexObsType_RinexDatum_clear(self)


    def swap(self, v):
        """swap(map_RinexObsType_RinexDatum self, map_RinexObsType_RinexDatum v)"""
        return _gpstk.map_RinexObsType_RinexDatum_swap(self, v)


    def get_allocator(self):
        """get_allocator(map_RinexObsType_RinexDatum self) -> std::map< gpstk::RinexObsType,gpstk::RinexDatum >::allocator_type"""
        return _gpstk.map_RinexObsType_RinexDatum_get_allocator(self)


    def begin(self):
        """begin(map_RinexObsType_RinexDatum self) -> std::map< gpstk::RinexObsType,gpstk::RinexDatum >::iterator"""
        return _gpstk.map_RinexObsType_RinexDatum_begin(self)


    def end(self):
        """end(map_RinexObsType_RinexDatum self) -> std::map< gpstk::RinexObsType,gpstk::RinexDatum >::iterator"""
        return _gpstk.map_RinexObsType_RinexDatum_end(self)


    def rbegin(self):
        """rbegin(map_RinexObsType_RinexDatum self) -> std::map< gpstk::RinexObsType,gpstk::RinexDatum >::reverse_iterator"""
        return _gpstk.map_RinexObsType_RinexDatum_rbegin(self)


    def rend(self):
        """rend(map_RinexObsType_RinexDatum self) -> std::map< gpstk::RinexObsType,gpstk::RinexDatum >::reverse_iterator"""
        return _gpstk.map_RinexObsType_RinexDatum_rend(self)


    def count(self, x):
        """count(map_RinexObsType_RinexDatum self, RinexObsType x) -> std::map< gpstk::RinexObsType,gpstk::RinexDatum >::size_type"""
        return _gpstk.map_RinexObsType_RinexDatum_count(self, x)


    def erase(self, *args):
        """
        erase(map_RinexObsType_RinexDatum self, RinexObsType x) -> std::map< gpstk::RinexObsType,gpstk::RinexDatum >::size_type
        erase(map_RinexObsType_RinexDatum self, std::map< gpstk::RinexObsType,gpstk::RinexDatum >::iterator position)
        erase(map_RinexObsType_RinexDatum self, std::map< gpstk::RinexObsType,gpstk::RinexDatum >::iterator first, std::map< gpstk::RinexObsType,gpstk::RinexDatum >::iterator last)
        """
        return _gpstk.map_RinexObsType_RinexDatum_erase(self, *args)


    def find(self, x):
        """find(map_RinexObsType_RinexDatum self, RinexObsType x) -> std::map< gpstk::RinexObsType,gpstk::RinexDatum >::iterator"""
        return _gpstk.map_RinexObsType_RinexDatum_find(self, x)


    def lower_bound(self, x):
        """lower_bound(map_RinexObsType_RinexDatum self, RinexObsType x) -> std::map< gpstk::RinexObsType,gpstk::RinexDatum >::iterator"""
        return _gpstk.map_RinexObsType_RinexDatum_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(map_RinexObsType_RinexDatum self, RinexObsType x) -> std::map< gpstk::RinexObsType,gpstk::RinexDatum >::iterator"""
        return _gpstk.map_RinexObsType_RinexDatum_upper_bound(self, x)

    __swig_destroy__ = _gpstk.delete_map_RinexObsType_RinexDatum
    __del__ = lambda self: None
map_RinexObsType_RinexDatum_swigregister = _gpstk.map_RinexObsType_RinexDatum_swigregister
map_RinexObsType_RinexDatum_swigregister(map_RinexObsType_RinexDatum)

class map_RinexSatID_RinexObsTypeMap(_object):
    """Proxy of C++ std::map<(gpstk::SatID,std::map<(gpstk::RinexObsType,gpstk::RinexDatum)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_RinexSatID_RinexObsTypeMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_RinexSatID_RinexObsTypeMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(map_RinexSatID_RinexObsTypeMap self) -> SwigPyIterator"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(map_RinexSatID_RinexObsTypeMap self) -> bool"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap___nonzero__(self)


    def __bool__(self):
        """__bool__(map_RinexSatID_RinexObsTypeMap self) -> bool"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap___bool__(self)


    def __len__(self):
        """__len__(map_RinexSatID_RinexObsTypeMap self) -> std::map< gpstk::SatID,std::map< gpstk::RinexObsType,gpstk::RinexDatum > >::size_type"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(map_RinexSatID_RinexObsTypeMap self, SatID key) -> map_RinexObsType_RinexDatum"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(map_RinexSatID_RinexObsTypeMap self, SatID key)"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap___delitem__(self, key)


    def has_key(self, key):
        """has_key(map_RinexSatID_RinexObsTypeMap self, SatID key) -> bool"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_has_key(self, key)


    def keys(self):
        """keys(map_RinexSatID_RinexObsTypeMap self) -> PyObject *"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_keys(self)


    def values(self):
        """values(map_RinexSatID_RinexObsTypeMap self) -> PyObject *"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_values(self)


    def items(self):
        """items(map_RinexSatID_RinexObsTypeMap self) -> PyObject *"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_items(self)


    def __contains__(self, key):
        """__contains__(map_RinexSatID_RinexObsTypeMap self, SatID key) -> bool"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap___contains__(self, key)


    def key_iterator(self):
        """key_iterator(map_RinexSatID_RinexObsTypeMap self) -> SwigPyIterator"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_key_iterator(self)


    def value_iterator(self):
        """value_iterator(map_RinexSatID_RinexObsTypeMap self) -> SwigPyIterator"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(map_RinexSatID_RinexObsTypeMap self, SatID key)
        __setitem__(map_RinexSatID_RinexObsTypeMap self, SatID key, map_RinexObsType_RinexDatum x)
        """
        return _gpstk.map_RinexSatID_RinexObsTypeMap___setitem__(self, *args)


    def asdict(self):
        """asdict(map_RinexSatID_RinexObsTypeMap self) -> PyObject *"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(gpstk::SatID,std::map<(gpstk::RinexObsType,gpstk::RinexDatum)>)> self, std::less< gpstk::SatID > const & arg2) -> map_RinexSatID_RinexObsTypeMap
        __init__(std::map<(gpstk::SatID,std::map<(gpstk::RinexObsType,gpstk::RinexDatum)>)> self) -> map_RinexSatID_RinexObsTypeMap
        __init__(std::map<(gpstk::SatID,std::map<(gpstk::RinexObsType,gpstk::RinexDatum)>)> self, map_RinexSatID_RinexObsTypeMap arg2) -> map_RinexSatID_RinexObsTypeMap
        """
        this = _gpstk.new_map_RinexSatID_RinexObsTypeMap(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(map_RinexSatID_RinexObsTypeMap self) -> bool"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_empty(self)


    def size(self):
        """size(map_RinexSatID_RinexObsTypeMap self) -> std::map< gpstk::SatID,std::map< gpstk::RinexObsType,gpstk::RinexDatum > >::size_type"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_size(self)


    def clear(self):
        """clear(map_RinexSatID_RinexObsTypeMap self)"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_clear(self)


    def swap(self, v):
        """swap(map_RinexSatID_RinexObsTypeMap self, map_RinexSatID_RinexObsTypeMap v)"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_swap(self, v)


    def get_allocator(self):
        """get_allocator(map_RinexSatID_RinexObsTypeMap self) -> std::map< gpstk::SatID,std::map< gpstk::RinexObsType,gpstk::RinexDatum > >::allocator_type"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_get_allocator(self)


    def begin(self):
        """begin(map_RinexSatID_RinexObsTypeMap self) -> std::map< gpstk::SatID,std::map< gpstk::RinexObsType,gpstk::RinexDatum > >::iterator"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_begin(self)


    def end(self):
        """end(map_RinexSatID_RinexObsTypeMap self) -> std::map< gpstk::SatID,std::map< gpstk::RinexObsType,gpstk::RinexDatum > >::iterator"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_end(self)


    def rbegin(self):
        """rbegin(map_RinexSatID_RinexObsTypeMap self) -> std::map< gpstk::SatID,std::map< gpstk::RinexObsType,gpstk::RinexDatum > >::reverse_iterator"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_rbegin(self)


    def rend(self):
        """rend(map_RinexSatID_RinexObsTypeMap self) -> std::map< gpstk::SatID,std::map< gpstk::RinexObsType,gpstk::RinexDatum > >::reverse_iterator"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_rend(self)


    def count(self, x):
        """count(map_RinexSatID_RinexObsTypeMap self, SatID x) -> std::map< gpstk::SatID,std::map< gpstk::RinexObsType,gpstk::RinexDatum > >::size_type"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_count(self, x)


    def erase(self, *args):
        """
        erase(map_RinexSatID_RinexObsTypeMap self, SatID x) -> std::map< gpstk::SatID,std::map< gpstk::RinexObsType,gpstk::RinexDatum > >::size_type
        erase(map_RinexSatID_RinexObsTypeMap self, std::map< gpstk::SatID,std::map< gpstk::RinexObsType,gpstk::RinexDatum > >::iterator position)
        erase(map_RinexSatID_RinexObsTypeMap self, std::map< gpstk::SatID,std::map< gpstk::RinexObsType,gpstk::RinexDatum > >::iterator first, std::map< gpstk::SatID,std::map< gpstk::RinexObsType,gpstk::RinexDatum > >::iterator last)
        """
        return _gpstk.map_RinexSatID_RinexObsTypeMap_erase(self, *args)


    def find(self, x):
        """find(map_RinexSatID_RinexObsTypeMap self, SatID x) -> std::map< gpstk::SatID,std::map< gpstk::RinexObsType,gpstk::RinexDatum > >::iterator"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_find(self, x)


    def lower_bound(self, x):
        """lower_bound(map_RinexSatID_RinexObsTypeMap self, SatID x) -> std::map< gpstk::SatID,std::map< gpstk::RinexObsType,gpstk::RinexDatum > >::iterator"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(map_RinexSatID_RinexObsTypeMap self, SatID x) -> std::map< gpstk::SatID,std::map< gpstk::RinexObsType,gpstk::RinexDatum > >::iterator"""
        return _gpstk.map_RinexSatID_RinexObsTypeMap_upper_bound(self, x)

    __swig_destroy__ = _gpstk.delete_map_RinexSatID_RinexObsTypeMap
    __del__ = lambda self: None
map_RinexSatID_RinexObsTypeMap_swigregister = _gpstk.map_RinexSatID_RinexObsTypeMap_swigregister
map_RinexSatID_RinexObsTypeMap_swigregister(map_RinexSatID_RinexObsTypeMap)

class map_string_vector_RinexObsID(_object):
    """Proxy of C++ std::map<(std::string,std::vector<(gpstk::RinexObsID)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_string_vector_RinexObsID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_string_vector_RinexObsID, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(map_string_vector_RinexObsID self) -> SwigPyIterator"""
        return _gpstk.map_string_vector_RinexObsID_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(map_string_vector_RinexObsID self) -> bool"""
        return _gpstk.map_string_vector_RinexObsID___nonzero__(self)


    def __bool__(self):
        """__bool__(map_string_vector_RinexObsID self) -> bool"""
        return _gpstk.map_string_vector_RinexObsID___bool__(self)


    def __len__(self):
        """__len__(map_string_vector_RinexObsID self) -> std::map< std::string,std::vector< gpstk::RinexObsID > >::size_type"""
        return _gpstk.map_string_vector_RinexObsID___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(map_string_vector_RinexObsID self, std::map< std::string,std::vector< gpstk::RinexObsID > >::key_type const & key) -> vector_RinexObsID"""
        return _gpstk.map_string_vector_RinexObsID___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(map_string_vector_RinexObsID self, std::map< std::string,std::vector< gpstk::RinexObsID > >::key_type const & key)"""
        return _gpstk.map_string_vector_RinexObsID___delitem__(self, key)


    def has_key(self, key):
        """has_key(map_string_vector_RinexObsID self, std::map< std::string,std::vector< gpstk::RinexObsID > >::key_type const & key) -> bool"""
        return _gpstk.map_string_vector_RinexObsID_has_key(self, key)


    def keys(self):
        """keys(map_string_vector_RinexObsID self) -> PyObject *"""
        return _gpstk.map_string_vector_RinexObsID_keys(self)


    def values(self):
        """values(map_string_vector_RinexObsID self) -> PyObject *"""
        return _gpstk.map_string_vector_RinexObsID_values(self)


    def items(self):
        """items(map_string_vector_RinexObsID self) -> PyObject *"""
        return _gpstk.map_string_vector_RinexObsID_items(self)


    def __contains__(self, key):
        """__contains__(map_string_vector_RinexObsID self, std::map< std::string,std::vector< gpstk::RinexObsID > >::key_type const & key) -> bool"""
        return _gpstk.map_string_vector_RinexObsID___contains__(self, key)


    def key_iterator(self):
        """key_iterator(map_string_vector_RinexObsID self) -> SwigPyIterator"""
        return _gpstk.map_string_vector_RinexObsID_key_iterator(self)


    def value_iterator(self):
        """value_iterator(map_string_vector_RinexObsID self) -> SwigPyIterator"""
        return _gpstk.map_string_vector_RinexObsID_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(map_string_vector_RinexObsID self, std::map< std::string,std::vector< gpstk::RinexObsID > >::key_type const & key)
        __setitem__(map_string_vector_RinexObsID self, std::map< std::string,std::vector< gpstk::RinexObsID > >::key_type const & key, vector_RinexObsID x)
        """
        return _gpstk.map_string_vector_RinexObsID___setitem__(self, *args)


    def asdict(self):
        """asdict(map_string_vector_RinexObsID self) -> PyObject *"""
        return _gpstk.map_string_vector_RinexObsID_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(std::string,std::vector<(gpstk::RinexObsID)>)> self, std::less< std::string > const & arg2) -> map_string_vector_RinexObsID
        __init__(std::map<(std::string,std::vector<(gpstk::RinexObsID)>)> self) -> map_string_vector_RinexObsID
        __init__(std::map<(std::string,std::vector<(gpstk::RinexObsID)>)> self, map_string_vector_RinexObsID arg2) -> map_string_vector_RinexObsID
        """
        this = _gpstk.new_map_string_vector_RinexObsID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(map_string_vector_RinexObsID self) -> bool"""
        return _gpstk.map_string_vector_RinexObsID_empty(self)


    def size(self):
        """size(map_string_vector_RinexObsID self) -> std::map< std::string,std::vector< gpstk::RinexObsID > >::size_type"""
        return _gpstk.map_string_vector_RinexObsID_size(self)


    def clear(self):
        """clear(map_string_vector_RinexObsID self)"""
        return _gpstk.map_string_vector_RinexObsID_clear(self)


    def swap(self, v):
        """swap(map_string_vector_RinexObsID self, map_string_vector_RinexObsID v)"""
        return _gpstk.map_string_vector_RinexObsID_swap(self, v)


    def get_allocator(self):
        """get_allocator(map_string_vector_RinexObsID self) -> std::map< std::string,std::vector< gpstk::RinexObsID > >::allocator_type"""
        return _gpstk.map_string_vector_RinexObsID_get_allocator(self)


    def begin(self):
        """begin(map_string_vector_RinexObsID self) -> std::map< std::string,std::vector< gpstk::RinexObsID > >::iterator"""
        return _gpstk.map_string_vector_RinexObsID_begin(self)


    def end(self):
        """end(map_string_vector_RinexObsID self) -> std::map< std::string,std::vector< gpstk::RinexObsID > >::iterator"""
        return _gpstk.map_string_vector_RinexObsID_end(self)


    def rbegin(self):
        """rbegin(map_string_vector_RinexObsID self) -> std::map< std::string,std::vector< gpstk::RinexObsID > >::reverse_iterator"""
        return _gpstk.map_string_vector_RinexObsID_rbegin(self)


    def rend(self):
        """rend(map_string_vector_RinexObsID self) -> std::map< std::string,std::vector< gpstk::RinexObsID > >::reverse_iterator"""
        return _gpstk.map_string_vector_RinexObsID_rend(self)


    def count(self, x):
        """count(map_string_vector_RinexObsID self, std::map< std::string,std::vector< gpstk::RinexObsID > >::key_type const & x) -> std::map< std::string,std::vector< gpstk::RinexObsID > >::size_type"""
        return _gpstk.map_string_vector_RinexObsID_count(self, x)


    def erase(self, *args):
        """
        erase(map_string_vector_RinexObsID self, std::map< std::string,std::vector< gpstk::RinexObsID > >::key_type const & x) -> std::map< std::string,std::vector< gpstk::RinexObsID > >::size_type
        erase(map_string_vector_RinexObsID self, std::map< std::string,std::vector< gpstk::RinexObsID > >::iterator position)
        erase(map_string_vector_RinexObsID self, std::map< std::string,std::vector< gpstk::RinexObsID > >::iterator first, std::map< std::string,std::vector< gpstk::RinexObsID > >::iterator last)
        """
        return _gpstk.map_string_vector_RinexObsID_erase(self, *args)


    def find(self, x):
        """find(map_string_vector_RinexObsID self, std::map< std::string,std::vector< gpstk::RinexObsID > >::key_type const & x) -> std::map< std::string,std::vector< gpstk::RinexObsID > >::iterator"""
        return _gpstk.map_string_vector_RinexObsID_find(self, x)


    def lower_bound(self, x):
        """lower_bound(map_string_vector_RinexObsID self, std::map< std::string,std::vector< gpstk::RinexObsID > >::key_type const & x) -> std::map< std::string,std::vector< gpstk::RinexObsID > >::iterator"""
        return _gpstk.map_string_vector_RinexObsID_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(map_string_vector_RinexObsID self, std::map< std::string,std::vector< gpstk::RinexObsID > >::key_type const & x) -> std::map< std::string,std::vector< gpstk::RinexObsID > >::iterator"""
        return _gpstk.map_string_vector_RinexObsID_upper_bound(self, x)

    __swig_destroy__ = _gpstk.delete_map_string_vector_RinexObsID
    __del__ = lambda self: None
map_string_vector_RinexObsID_swigregister = _gpstk.map_string_vector_RinexObsID_swigregister
map_string_vector_RinexObsID_swigregister(map_string_vector_RinexObsID)

class map_RinexSatID_vector_RinexDatum(_object):
    """Proxy of C++ std::map<(gpstk::RinexSatID,std::vector<(gpstk::RinexDatum)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_RinexSatID_vector_RinexDatum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_RinexSatID_vector_RinexDatum, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(map_RinexSatID_vector_RinexDatum self) -> SwigPyIterator"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(map_RinexSatID_vector_RinexDatum self) -> bool"""
        return _gpstk.map_RinexSatID_vector_RinexDatum___nonzero__(self)


    def __bool__(self):
        """__bool__(map_RinexSatID_vector_RinexDatum self) -> bool"""
        return _gpstk.map_RinexSatID_vector_RinexDatum___bool__(self)


    def __len__(self):
        """__len__(map_RinexSatID_vector_RinexDatum self) -> std::map< gpstk::RinexSatID,std::vector< gpstk::RinexDatum > >::size_type"""
        return _gpstk.map_RinexSatID_vector_RinexDatum___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(map_RinexSatID_vector_RinexDatum self, RinexSatID key) -> vector_RinexDatum"""
        return _gpstk.map_RinexSatID_vector_RinexDatum___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(map_RinexSatID_vector_RinexDatum self, RinexSatID key)"""
        return _gpstk.map_RinexSatID_vector_RinexDatum___delitem__(self, key)


    def has_key(self, key):
        """has_key(map_RinexSatID_vector_RinexDatum self, RinexSatID key) -> bool"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_has_key(self, key)


    def keys(self):
        """keys(map_RinexSatID_vector_RinexDatum self) -> PyObject *"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_keys(self)


    def values(self):
        """values(map_RinexSatID_vector_RinexDatum self) -> PyObject *"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_values(self)


    def items(self):
        """items(map_RinexSatID_vector_RinexDatum self) -> PyObject *"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_items(self)


    def __contains__(self, key):
        """__contains__(map_RinexSatID_vector_RinexDatum self, RinexSatID key) -> bool"""
        return _gpstk.map_RinexSatID_vector_RinexDatum___contains__(self, key)


    def key_iterator(self):
        """key_iterator(map_RinexSatID_vector_RinexDatum self) -> SwigPyIterator"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_key_iterator(self)


    def value_iterator(self):
        """value_iterator(map_RinexSatID_vector_RinexDatum self) -> SwigPyIterator"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(map_RinexSatID_vector_RinexDatum self, RinexSatID key)
        __setitem__(map_RinexSatID_vector_RinexDatum self, RinexSatID key, vector_RinexDatum x)
        """
        return _gpstk.map_RinexSatID_vector_RinexDatum___setitem__(self, *args)


    def asdict(self):
        """asdict(map_RinexSatID_vector_RinexDatum self) -> PyObject *"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(gpstk::RinexSatID,std::vector<(gpstk::RinexDatum)>)> self, std::less< gpstk::RinexSatID > const & arg2) -> map_RinexSatID_vector_RinexDatum
        __init__(std::map<(gpstk::RinexSatID,std::vector<(gpstk::RinexDatum)>)> self) -> map_RinexSatID_vector_RinexDatum
        __init__(std::map<(gpstk::RinexSatID,std::vector<(gpstk::RinexDatum)>)> self, map_RinexSatID_vector_RinexDatum arg2) -> map_RinexSatID_vector_RinexDatum
        """
        this = _gpstk.new_map_RinexSatID_vector_RinexDatum(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(map_RinexSatID_vector_RinexDatum self) -> bool"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_empty(self)


    def size(self):
        """size(map_RinexSatID_vector_RinexDatum self) -> std::map< gpstk::RinexSatID,std::vector< gpstk::RinexDatum > >::size_type"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_size(self)


    def clear(self):
        """clear(map_RinexSatID_vector_RinexDatum self)"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_clear(self)


    def swap(self, v):
        """swap(map_RinexSatID_vector_RinexDatum self, map_RinexSatID_vector_RinexDatum v)"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_swap(self, v)


    def get_allocator(self):
        """get_allocator(map_RinexSatID_vector_RinexDatum self) -> std::map< gpstk::RinexSatID,std::vector< gpstk::RinexDatum > >::allocator_type"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_get_allocator(self)


    def begin(self):
        """begin(map_RinexSatID_vector_RinexDatum self) -> std::map< gpstk::RinexSatID,std::vector< gpstk::RinexDatum > >::iterator"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_begin(self)


    def end(self):
        """end(map_RinexSatID_vector_RinexDatum self) -> std::map< gpstk::RinexSatID,std::vector< gpstk::RinexDatum > >::iterator"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_end(self)


    def rbegin(self):
        """rbegin(map_RinexSatID_vector_RinexDatum self) -> std::map< gpstk::RinexSatID,std::vector< gpstk::RinexDatum > >::reverse_iterator"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_rbegin(self)


    def rend(self):
        """rend(map_RinexSatID_vector_RinexDatum self) -> std::map< gpstk::RinexSatID,std::vector< gpstk::RinexDatum > >::reverse_iterator"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_rend(self)


    def count(self, x):
        """count(map_RinexSatID_vector_RinexDatum self, RinexSatID x) -> std::map< gpstk::RinexSatID,std::vector< gpstk::RinexDatum > >::size_type"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_count(self, x)


    def erase(self, *args):
        """
        erase(map_RinexSatID_vector_RinexDatum self, RinexSatID x) -> std::map< gpstk::RinexSatID,std::vector< gpstk::RinexDatum > >::size_type
        erase(map_RinexSatID_vector_RinexDatum self, std::map< gpstk::RinexSatID,std::vector< gpstk::RinexDatum > >::iterator position)
        erase(map_RinexSatID_vector_RinexDatum self, std::map< gpstk::RinexSatID,std::vector< gpstk::RinexDatum > >::iterator first, std::map< gpstk::RinexSatID,std::vector< gpstk::RinexDatum > >::iterator last)
        """
        return _gpstk.map_RinexSatID_vector_RinexDatum_erase(self, *args)


    def find(self, x):
        """find(map_RinexSatID_vector_RinexDatum self, RinexSatID x) -> std::map< gpstk::RinexSatID,std::vector< gpstk::RinexDatum > >::iterator"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_find(self, x)


    def lower_bound(self, x):
        """lower_bound(map_RinexSatID_vector_RinexDatum self, RinexSatID x) -> std::map< gpstk::RinexSatID,std::vector< gpstk::RinexDatum > >::iterator"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(map_RinexSatID_vector_RinexDatum self, RinexSatID x) -> std::map< gpstk::RinexSatID,std::vector< gpstk::RinexDatum > >::iterator"""
        return _gpstk.map_RinexSatID_vector_RinexDatum_upper_bound(self, x)

    __swig_destroy__ = _gpstk.delete_map_RinexSatID_vector_RinexDatum
    __del__ = lambda self: None
map_RinexSatID_vector_RinexDatum_swigregister = _gpstk.map_RinexSatID_vector_RinexDatum_swigregister
map_RinexSatID_vector_RinexDatum_swigregister(map_RinexSatID_vector_RinexDatum)

class map_SvObsEpoch(_object):
    """Proxy of C++ std::map<(gpstk::ObsID,double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_SvObsEpoch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_SvObsEpoch, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(map_SvObsEpoch self) -> SwigPyIterator"""
        return _gpstk.map_SvObsEpoch_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(map_SvObsEpoch self) -> bool"""
        return _gpstk.map_SvObsEpoch___nonzero__(self)


    def __bool__(self):
        """__bool__(map_SvObsEpoch self) -> bool"""
        return _gpstk.map_SvObsEpoch___bool__(self)


    def __len__(self):
        """__len__(map_SvObsEpoch self) -> std::map< gpstk::ObsID,double >::size_type"""
        return _gpstk.map_SvObsEpoch___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(map_SvObsEpoch self, ObsID key) -> std::map< gpstk::ObsID,double >::mapped_type const &"""
        return _gpstk.map_SvObsEpoch___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(map_SvObsEpoch self, ObsID key)"""
        return _gpstk.map_SvObsEpoch___delitem__(self, key)


    def has_key(self, key):
        """has_key(map_SvObsEpoch self, ObsID key) -> bool"""
        return _gpstk.map_SvObsEpoch_has_key(self, key)


    def keys(self):
        """keys(map_SvObsEpoch self) -> PyObject *"""
        return _gpstk.map_SvObsEpoch_keys(self)


    def values(self):
        """values(map_SvObsEpoch self) -> PyObject *"""
        return _gpstk.map_SvObsEpoch_values(self)


    def items(self):
        """items(map_SvObsEpoch self) -> PyObject *"""
        return _gpstk.map_SvObsEpoch_items(self)


    def __contains__(self, key):
        """__contains__(map_SvObsEpoch self, ObsID key) -> bool"""
        return _gpstk.map_SvObsEpoch___contains__(self, key)


    def key_iterator(self):
        """key_iterator(map_SvObsEpoch self) -> SwigPyIterator"""
        return _gpstk.map_SvObsEpoch_key_iterator(self)


    def value_iterator(self):
        """value_iterator(map_SvObsEpoch self) -> SwigPyIterator"""
        return _gpstk.map_SvObsEpoch_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(map_SvObsEpoch self, ObsID key)
        __setitem__(map_SvObsEpoch self, ObsID key, std::map< gpstk::ObsID,double >::mapped_type const & x)
        """
        return _gpstk.map_SvObsEpoch___setitem__(self, *args)


    def asdict(self):
        """asdict(map_SvObsEpoch self) -> PyObject *"""
        return _gpstk.map_SvObsEpoch_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(gpstk::ObsID,double)> self, std::less< gpstk::ObsID > const & arg2) -> map_SvObsEpoch
        __init__(std::map<(gpstk::ObsID,double)> self) -> map_SvObsEpoch
        __init__(std::map<(gpstk::ObsID,double)> self, map_SvObsEpoch arg2) -> map_SvObsEpoch
        """
        this = _gpstk.new_map_SvObsEpoch(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(map_SvObsEpoch self) -> bool"""
        return _gpstk.map_SvObsEpoch_empty(self)


    def size(self):
        """size(map_SvObsEpoch self) -> std::map< gpstk::ObsID,double >::size_type"""
        return _gpstk.map_SvObsEpoch_size(self)


    def clear(self):
        """clear(map_SvObsEpoch self)"""
        return _gpstk.map_SvObsEpoch_clear(self)


    def swap(self, v):
        """swap(map_SvObsEpoch self, map_SvObsEpoch v)"""
        return _gpstk.map_SvObsEpoch_swap(self, v)


    def get_allocator(self):
        """get_allocator(map_SvObsEpoch self) -> std::map< gpstk::ObsID,double >::allocator_type"""
        return _gpstk.map_SvObsEpoch_get_allocator(self)


    def begin(self):
        """begin(map_SvObsEpoch self) -> std::map< gpstk::ObsID,double >::iterator"""
        return _gpstk.map_SvObsEpoch_begin(self)


    def end(self):
        """end(map_SvObsEpoch self) -> std::map< gpstk::ObsID,double >::iterator"""
        return _gpstk.map_SvObsEpoch_end(self)


    def rbegin(self):
        """rbegin(map_SvObsEpoch self) -> std::map< gpstk::ObsID,double >::reverse_iterator"""
        return _gpstk.map_SvObsEpoch_rbegin(self)


    def rend(self):
        """rend(map_SvObsEpoch self) -> std::map< gpstk::ObsID,double >::reverse_iterator"""
        return _gpstk.map_SvObsEpoch_rend(self)


    def count(self, x):
        """count(map_SvObsEpoch self, ObsID x) -> std::map< gpstk::ObsID,double >::size_type"""
        return _gpstk.map_SvObsEpoch_count(self, x)


    def erase(self, *args):
        """
        erase(map_SvObsEpoch self, ObsID x) -> std::map< gpstk::ObsID,double >::size_type
        erase(map_SvObsEpoch self, std::map< gpstk::ObsID,double >::iterator position)
        erase(map_SvObsEpoch self, std::map< gpstk::ObsID,double >::iterator first, std::map< gpstk::ObsID,double >::iterator last)
        """
        return _gpstk.map_SvObsEpoch_erase(self, *args)


    def find(self, x):
        """find(map_SvObsEpoch self, ObsID x) -> std::map< gpstk::ObsID,double >::iterator"""
        return _gpstk.map_SvObsEpoch_find(self, x)


    def lower_bound(self, x):
        """lower_bound(map_SvObsEpoch self, ObsID x) -> std::map< gpstk::ObsID,double >::iterator"""
        return _gpstk.map_SvObsEpoch_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(map_SvObsEpoch self, ObsID x) -> std::map< gpstk::ObsID,double >::iterator"""
        return _gpstk.map_SvObsEpoch_upper_bound(self, x)

    __swig_destroy__ = _gpstk.delete_map_SvObsEpoch
    __del__ = lambda self: None
map_SvObsEpoch_swigregister = _gpstk.map_SvObsEpoch_swigregister
map_SvObsEpoch_swigregister(map_SvObsEpoch)

class map_ObsEpoch(_object):
    """Proxy of C++ std::map<(gpstk::SatID,gpstk::SvObsEpoch)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_ObsEpoch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_ObsEpoch, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(map_ObsEpoch self) -> SwigPyIterator"""
        return _gpstk.map_ObsEpoch_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(map_ObsEpoch self) -> bool"""
        return _gpstk.map_ObsEpoch___nonzero__(self)


    def __bool__(self):
        """__bool__(map_ObsEpoch self) -> bool"""
        return _gpstk.map_ObsEpoch___bool__(self)


    def __len__(self):
        """__len__(map_ObsEpoch self) -> std::map< gpstk::SatID,gpstk::SvObsEpoch >::size_type"""
        return _gpstk.map_ObsEpoch___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(map_ObsEpoch self, SatID key) -> SvObsEpoch"""
        return _gpstk.map_ObsEpoch___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(map_ObsEpoch self, SatID key)"""
        return _gpstk.map_ObsEpoch___delitem__(self, key)


    def has_key(self, key):
        """has_key(map_ObsEpoch self, SatID key) -> bool"""
        return _gpstk.map_ObsEpoch_has_key(self, key)


    def keys(self):
        """keys(map_ObsEpoch self) -> PyObject *"""
        return _gpstk.map_ObsEpoch_keys(self)


    def values(self):
        """values(map_ObsEpoch self) -> PyObject *"""
        return _gpstk.map_ObsEpoch_values(self)


    def items(self):
        """items(map_ObsEpoch self) -> PyObject *"""
        return _gpstk.map_ObsEpoch_items(self)


    def __contains__(self, key):
        """__contains__(map_ObsEpoch self, SatID key) -> bool"""
        return _gpstk.map_ObsEpoch___contains__(self, key)


    def key_iterator(self):
        """key_iterator(map_ObsEpoch self) -> SwigPyIterator"""
        return _gpstk.map_ObsEpoch_key_iterator(self)


    def value_iterator(self):
        """value_iterator(map_ObsEpoch self) -> SwigPyIterator"""
        return _gpstk.map_ObsEpoch_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(map_ObsEpoch self, SatID key)
        __setitem__(map_ObsEpoch self, SatID key, SvObsEpoch x)
        """
        return _gpstk.map_ObsEpoch___setitem__(self, *args)


    def asdict(self):
        """asdict(map_ObsEpoch self) -> PyObject *"""
        return _gpstk.map_ObsEpoch_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(gpstk::SatID,gpstk::SvObsEpoch)> self, std::less< gpstk::SatID > const & arg2) -> map_ObsEpoch
        __init__(std::map<(gpstk::SatID,gpstk::SvObsEpoch)> self) -> map_ObsEpoch
        __init__(std::map<(gpstk::SatID,gpstk::SvObsEpoch)> self, map_ObsEpoch arg2) -> map_ObsEpoch
        """
        this = _gpstk.new_map_ObsEpoch(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(map_ObsEpoch self) -> bool"""
        return _gpstk.map_ObsEpoch_empty(self)


    def size(self):
        """size(map_ObsEpoch self) -> std::map< gpstk::SatID,gpstk::SvObsEpoch >::size_type"""
        return _gpstk.map_ObsEpoch_size(self)


    def clear(self):
        """clear(map_ObsEpoch self)"""
        return _gpstk.map_ObsEpoch_clear(self)


    def swap(self, v):
        """swap(map_ObsEpoch self, map_ObsEpoch v)"""
        return _gpstk.map_ObsEpoch_swap(self, v)


    def get_allocator(self):
        """get_allocator(map_ObsEpoch self) -> std::map< gpstk::SatID,gpstk::SvObsEpoch >::allocator_type"""
        return _gpstk.map_ObsEpoch_get_allocator(self)


    def begin(self):
        """begin(map_ObsEpoch self) -> std::map< gpstk::SatID,gpstk::SvObsEpoch >::iterator"""
        return _gpstk.map_ObsEpoch_begin(self)


    def end(self):
        """end(map_ObsEpoch self) -> std::map< gpstk::SatID,gpstk::SvObsEpoch >::iterator"""
        return _gpstk.map_ObsEpoch_end(self)


    def rbegin(self):
        """rbegin(map_ObsEpoch self) -> std::map< gpstk::SatID,gpstk::SvObsEpoch >::reverse_iterator"""
        return _gpstk.map_ObsEpoch_rbegin(self)


    def rend(self):
        """rend(map_ObsEpoch self) -> std::map< gpstk::SatID,gpstk::SvObsEpoch >::reverse_iterator"""
        return _gpstk.map_ObsEpoch_rend(self)


    def count(self, x):
        """count(map_ObsEpoch self, SatID x) -> std::map< gpstk::SatID,gpstk::SvObsEpoch >::size_type"""
        return _gpstk.map_ObsEpoch_count(self, x)


    def erase(self, *args):
        """
        erase(map_ObsEpoch self, SatID x) -> std::map< gpstk::SatID,gpstk::SvObsEpoch >::size_type
        erase(map_ObsEpoch self, std::map< gpstk::SatID,gpstk::SvObsEpoch >::iterator position)
        erase(map_ObsEpoch self, std::map< gpstk::SatID,gpstk::SvObsEpoch >::iterator first, std::map< gpstk::SatID,gpstk::SvObsEpoch >::iterator last)
        """
        return _gpstk.map_ObsEpoch_erase(self, *args)


    def find(self, x):
        """find(map_ObsEpoch self, SatID x) -> std::map< gpstk::SatID,gpstk::SvObsEpoch >::iterator"""
        return _gpstk.map_ObsEpoch_find(self, x)


    def lower_bound(self, x):
        """lower_bound(map_ObsEpoch self, SatID x) -> std::map< gpstk::SatID,gpstk::SvObsEpoch >::iterator"""
        return _gpstk.map_ObsEpoch_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(map_ObsEpoch self, SatID x) -> std::map< gpstk::SatID,gpstk::SvObsEpoch >::iterator"""
        return _gpstk.map_ObsEpoch_upper_bound(self, x)

    __swig_destroy__ = _gpstk.delete_map_ObsEpoch
    __del__ = lambda self: None
map_ObsEpoch_swigregister = _gpstk.map_ObsEpoch_swigregister
map_ObsEpoch_swigregister(map_ObsEpoch)

class ObsEpochMap(_object):
    """Proxy of C++ std::map<(gpstk::CommonTime,gpstk::ObsEpoch)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObsEpochMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObsEpochMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(ObsEpochMap self) -> SwigPyIterator"""
        return _gpstk.ObsEpochMap_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(ObsEpochMap self) -> bool"""
        return _gpstk.ObsEpochMap___nonzero__(self)


    def __bool__(self):
        """__bool__(ObsEpochMap self) -> bool"""
        return _gpstk.ObsEpochMap___bool__(self)


    def __len__(self):
        """__len__(ObsEpochMap self) -> std::map< gpstk::CommonTime,gpstk::ObsEpoch >::size_type"""
        return _gpstk.ObsEpochMap___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """__getitem__(ObsEpochMap self, CommonTime key) -> ObsEpoch"""
        return _gpstk.ObsEpochMap___getitem__(self, key)


    def __delitem__(self, key):
        """__delitem__(ObsEpochMap self, CommonTime key)"""
        return _gpstk.ObsEpochMap___delitem__(self, key)


    def has_key(self, key):
        """has_key(ObsEpochMap self, CommonTime key) -> bool"""
        return _gpstk.ObsEpochMap_has_key(self, key)


    def keys(self):
        """keys(ObsEpochMap self) -> PyObject *"""
        return _gpstk.ObsEpochMap_keys(self)


    def values(self):
        """values(ObsEpochMap self) -> PyObject *"""
        return _gpstk.ObsEpochMap_values(self)


    def items(self):
        """items(ObsEpochMap self) -> PyObject *"""
        return _gpstk.ObsEpochMap_items(self)


    def __contains__(self, key):
        """__contains__(ObsEpochMap self, CommonTime key) -> bool"""
        return _gpstk.ObsEpochMap___contains__(self, key)


    def key_iterator(self):
        """key_iterator(ObsEpochMap self) -> SwigPyIterator"""
        return _gpstk.ObsEpochMap_key_iterator(self)


    def value_iterator(self):
        """value_iterator(ObsEpochMap self) -> SwigPyIterator"""
        return _gpstk.ObsEpochMap_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(ObsEpochMap self, CommonTime key)
        __setitem__(ObsEpochMap self, CommonTime key, ObsEpoch x)
        """
        return _gpstk.ObsEpochMap___setitem__(self, *args)


    def asdict(self):
        """asdict(ObsEpochMap self) -> PyObject *"""
        return _gpstk.ObsEpochMap_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(gpstk::CommonTime,gpstk::ObsEpoch)> self, std::less< gpstk::CommonTime > const & arg2) -> ObsEpochMap
        __init__(std::map<(gpstk::CommonTime,gpstk::ObsEpoch)> self) -> ObsEpochMap
        __init__(std::map<(gpstk::CommonTime,gpstk::ObsEpoch)> self, ObsEpochMap arg2) -> ObsEpochMap
        """
        this = _gpstk.new_ObsEpochMap(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(ObsEpochMap self) -> bool"""
        return _gpstk.ObsEpochMap_empty(self)


    def size(self):
        """size(ObsEpochMap self) -> std::map< gpstk::CommonTime,gpstk::ObsEpoch >::size_type"""
        return _gpstk.ObsEpochMap_size(self)


    def clear(self):
        """clear(ObsEpochMap self)"""
        return _gpstk.ObsEpochMap_clear(self)


    def swap(self, v):
        """swap(ObsEpochMap self, ObsEpochMap v)"""
        return _gpstk.ObsEpochMap_swap(self, v)


    def get_allocator(self):
        """get_allocator(ObsEpochMap self) -> std::map< gpstk::CommonTime,gpstk::ObsEpoch >::allocator_type"""
        return _gpstk.ObsEpochMap_get_allocator(self)


    def begin(self):
        """begin(ObsEpochMap self) -> std::map< gpstk::CommonTime,gpstk::ObsEpoch >::iterator"""
        return _gpstk.ObsEpochMap_begin(self)


    def end(self):
        """end(ObsEpochMap self) -> std::map< gpstk::CommonTime,gpstk::ObsEpoch >::iterator"""
        return _gpstk.ObsEpochMap_end(self)


    def rbegin(self):
        """rbegin(ObsEpochMap self) -> std::map< gpstk::CommonTime,gpstk::ObsEpoch >::reverse_iterator"""
        return _gpstk.ObsEpochMap_rbegin(self)


    def rend(self):
        """rend(ObsEpochMap self) -> std::map< gpstk::CommonTime,gpstk::ObsEpoch >::reverse_iterator"""
        return _gpstk.ObsEpochMap_rend(self)


    def count(self, x):
        """count(ObsEpochMap self, CommonTime x) -> std::map< gpstk::CommonTime,gpstk::ObsEpoch >::size_type"""
        return _gpstk.ObsEpochMap_count(self, x)


    def erase(self, *args):
        """
        erase(ObsEpochMap self, CommonTime x) -> std::map< gpstk::CommonTime,gpstk::ObsEpoch >::size_type
        erase(ObsEpochMap self, std::map< gpstk::CommonTime,gpstk::ObsEpoch >::iterator position)
        erase(ObsEpochMap self, std::map< gpstk::CommonTime,gpstk::ObsEpoch >::iterator first, std::map< gpstk::CommonTime,gpstk::ObsEpoch >::iterator last)
        """
        return _gpstk.ObsEpochMap_erase(self, *args)


    def find(self, x):
        """find(ObsEpochMap self, CommonTime x) -> std::map< gpstk::CommonTime,gpstk::ObsEpoch >::iterator"""
        return _gpstk.ObsEpochMap_find(self, x)


    def lower_bound(self, x):
        """lower_bound(ObsEpochMap self, CommonTime x) -> std::map< gpstk::CommonTime,gpstk::ObsEpoch >::iterator"""
        return _gpstk.ObsEpochMap_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(ObsEpochMap self, CommonTime x) -> std::map< gpstk::CommonTime,gpstk::ObsEpoch >::iterator"""
        return _gpstk.ObsEpochMap_upper_bound(self, x)

    __swig_destroy__ = _gpstk.delete_ObsEpochMap
    __del__ = lambda self: None
ObsEpochMap_swigregister = _gpstk.ObsEpochMap_swigregister
ObsEpochMap_swigregister(ObsEpochMap)

class set_int(_object):
    """Proxy of C++ std::set<(int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, set_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, set_int, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(set_int self) -> SwigPyIterator"""
        return _gpstk.set_int_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(set_int self) -> bool"""
        return _gpstk.set_int___nonzero__(self)


    def __bool__(self):
        """__bool__(set_int self) -> bool"""
        return _gpstk.set_int___bool__(self)


    def __len__(self):
        """__len__(set_int self) -> std::set< int >::size_type"""
        return _gpstk.set_int___len__(self)


    def append(self, x):
        """append(set_int self, std::set< int >::value_type x)"""
        return _gpstk.set_int_append(self, x)


    def __contains__(self, x):
        """__contains__(set_int self, std::set< int >::value_type x) -> bool"""
        return _gpstk.set_int___contains__(self, x)


    def __getitem__(self, i):
        """__getitem__(set_int self, std::set< int >::difference_type i) -> std::set< int >::value_type"""
        return _gpstk.set_int___getitem__(self, i)


    def add(self, x):
        """add(set_int self, std::set< int >::value_type x)"""
        return _gpstk.set_int_add(self, x)


    def discard(self, x):
        """discard(set_int self, std::set< int >::value_type x)"""
        return _gpstk.set_int_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(int)> self, std::less< int > const & arg2) -> set_int
        __init__(std::set<(int)> self) -> set_int
        __init__(std::set<(int)> self, set_int arg2) -> set_int
        """
        this = _gpstk.new_set_int(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(set_int self) -> bool"""
        return _gpstk.set_int_empty(self)


    def size(self):
        """size(set_int self) -> std::set< int >::size_type"""
        return _gpstk.set_int_size(self)


    def clear(self):
        """clear(set_int self)"""
        return _gpstk.set_int_clear(self)


    def swap(self, v):
        """swap(set_int self, set_int v)"""
        return _gpstk.set_int_swap(self, v)


    def count(self, x):
        """count(set_int self, std::set< int >::key_type const & x) -> std::set< int >::size_type"""
        return _gpstk.set_int_count(self, x)


    def begin(self):
        """begin(set_int self) -> std::set< int >::iterator"""
        return _gpstk.set_int_begin(self)


    def end(self):
        """end(set_int self) -> std::set< int >::iterator"""
        return _gpstk.set_int_end(self)


    def rbegin(self):
        """rbegin(set_int self) -> std::set< int >::reverse_iterator"""
        return _gpstk.set_int_rbegin(self)


    def rend(self):
        """rend(set_int self) -> std::set< int >::reverse_iterator"""
        return _gpstk.set_int_rend(self)


    def erase(self, *args):
        """
        erase(set_int self, std::set< int >::key_type const & x) -> std::set< int >::size_type
        erase(set_int self, std::set< int >::iterator pos)
        erase(set_int self, std::set< int >::iterator first, std::set< int >::iterator last)
        """
        return _gpstk.set_int_erase(self, *args)


    def find(self, x):
        """find(set_int self, std::set< int >::key_type const & x) -> std::set< int >::iterator"""
        return _gpstk.set_int_find(self, x)


    def lower_bound(self, x):
        """lower_bound(set_int self, std::set< int >::key_type const & x) -> std::set< int >::iterator"""
        return _gpstk.set_int_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(set_int self, std::set< int >::key_type const & x) -> std::set< int >::iterator"""
        return _gpstk.set_int_upper_bound(self, x)


    def equal_range(self, x):
        """equal_range(set_int self, std::set< int >::key_type const & x) -> std::pair< std::set< int >::iterator,std::set< int >::iterator >"""
        return _gpstk.set_int_equal_range(self, x)


    def insert(self, __x):
        """insert(set_int self, std::set< int >::value_type const & __x) -> std::pair< std::set< int >::iterator,bool >"""
        return _gpstk.set_int_insert(self, __x)

    __swig_destroy__ = _gpstk.delete_set_int
    __del__ = lambda self: None
set_int_swigregister = _gpstk.set_int_swigregister
set_int_swigregister(set_int)

class set_double(_object):
    """Proxy of C++ std::set<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, set_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, set_double, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(set_double self) -> SwigPyIterator"""
        return _gpstk.set_double_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(set_double self) -> bool"""
        return _gpstk.set_double___nonzero__(self)


    def __bool__(self):
        """__bool__(set_double self) -> bool"""
        return _gpstk.set_double___bool__(self)


    def __len__(self):
        """__len__(set_double self) -> std::set< double >::size_type"""
        return _gpstk.set_double___len__(self)


    def append(self, x):
        """append(set_double self, std::set< double >::value_type x)"""
        return _gpstk.set_double_append(self, x)


    def __contains__(self, x):
        """__contains__(set_double self, std::set< double >::value_type x) -> bool"""
        return _gpstk.set_double___contains__(self, x)


    def __getitem__(self, i):
        """__getitem__(set_double self, std::set< double >::difference_type i) -> std::set< double >::value_type"""
        return _gpstk.set_double___getitem__(self, i)


    def add(self, x):
        """add(set_double self, std::set< double >::value_type x)"""
        return _gpstk.set_double_add(self, x)


    def discard(self, x):
        """discard(set_double self, std::set< double >::value_type x)"""
        return _gpstk.set_double_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(double)> self, std::less< double > const & arg2) -> set_double
        __init__(std::set<(double)> self) -> set_double
        __init__(std::set<(double)> self, set_double arg2) -> set_double
        """
        this = _gpstk.new_set_double(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(set_double self) -> bool"""
        return _gpstk.set_double_empty(self)


    def size(self):
        """size(set_double self) -> std::set< double >::size_type"""
        return _gpstk.set_double_size(self)


    def clear(self):
        """clear(set_double self)"""
        return _gpstk.set_double_clear(self)


    def swap(self, v):
        """swap(set_double self, set_double v)"""
        return _gpstk.set_double_swap(self, v)


    def count(self, x):
        """count(set_double self, std::set< double >::key_type const & x) -> std::set< double >::size_type"""
        return _gpstk.set_double_count(self, x)


    def begin(self):
        """begin(set_double self) -> std::set< double >::iterator"""
        return _gpstk.set_double_begin(self)


    def end(self):
        """end(set_double self) -> std::set< double >::iterator"""
        return _gpstk.set_double_end(self)


    def rbegin(self):
        """rbegin(set_double self) -> std::set< double >::reverse_iterator"""
        return _gpstk.set_double_rbegin(self)


    def rend(self):
        """rend(set_double self) -> std::set< double >::reverse_iterator"""
        return _gpstk.set_double_rend(self)


    def erase(self, *args):
        """
        erase(set_double self, std::set< double >::key_type const & x) -> std::set< double >::size_type
        erase(set_double self, std::set< double >::iterator pos)
        erase(set_double self, std::set< double >::iterator first, std::set< double >::iterator last)
        """
        return _gpstk.set_double_erase(self, *args)


    def find(self, x):
        """find(set_double self, std::set< double >::key_type const & x) -> std::set< double >::iterator"""
        return _gpstk.set_double_find(self, x)


    def lower_bound(self, x):
        """lower_bound(set_double self, std::set< double >::key_type const & x) -> std::set< double >::iterator"""
        return _gpstk.set_double_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(set_double self, std::set< double >::key_type const & x) -> std::set< double >::iterator"""
        return _gpstk.set_double_upper_bound(self, x)


    def equal_range(self, x):
        """equal_range(set_double self, std::set< double >::key_type const & x) -> std::pair< std::set< double >::iterator,std::set< double >::iterator >"""
        return _gpstk.set_double_equal_range(self, x)


    def insert(self, __x):
        """insert(set_double self, std::set< double >::value_type const & __x) -> std::pair< std::set< double >::iterator,bool >"""
        return _gpstk.set_double_insert(self, __x)

    __swig_destroy__ = _gpstk.delete_set_double
    __del__ = lambda self: None
set_double_swigregister = _gpstk.set_double_swigregister
set_double_swigregister(set_double)

class set_string(_object):
    """Proxy of C++ std::set<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, set_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, set_string, name)
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(set_string self) -> SwigPyIterator"""
        return _gpstk.set_string_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(set_string self) -> bool"""
        return _gpstk.set_string___nonzero__(self)


    def __bool__(self):
        """__bool__(set_string self) -> bool"""
        return _gpstk.set_string___bool__(self)


    def __len__(self):
        """__len__(set_string self) -> std::set< std::string >::size_type"""
        return _gpstk.set_string___len__(self)


    def append(self, x):
        """append(set_string self, std::set< std::string >::value_type x)"""
        return _gpstk.set_string_append(self, x)


    def __contains__(self, x):
        """__contains__(set_string self, std::set< std::string >::value_type x) -> bool"""
        return _gpstk.set_string___contains__(self, x)


    def __getitem__(self, i):
        """__getitem__(set_string self, std::set< std::string >::difference_type i) -> std::set< std::string >::value_type"""
        return _gpstk.set_string___getitem__(self, i)


    def add(self, x):
        """add(set_string self, std::set< std::string >::value_type x)"""
        return _gpstk.set_string_add(self, x)


    def discard(self, x):
        """discard(set_string self, std::set< std::string >::value_type x)"""
        return _gpstk.set_string_discard(self, x)


    def __init__(self, *args):
        """
        __init__(std::set<(std::string)> self, std::less< std::string > const & arg2) -> set_string
        __init__(std::set<(std::string)> self) -> set_string
        __init__(std::set<(std::string)> self, set_string arg2) -> set_string
        """
        this = _gpstk.new_set_string(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def empty(self):
        """empty(set_string self) -> bool"""
        return _gpstk.set_string_empty(self)


    def size(self):
        """size(set_string self) -> std::set< std::string >::size_type"""
        return _gpstk.set_string_size(self)


    def clear(self):
        """clear(set_string self)"""
        return _gpstk.set_string_clear(self)


    def swap(self, v):
        """swap(set_string self, set_string v)"""
        return _gpstk.set_string_swap(self, v)


    def count(self, x):
        """count(set_string self, std::set< std::string >::key_type const & x) -> std::set< std::string >::size_type"""
        return _gpstk.set_string_count(self, x)


    def begin(self):
        """begin(set_string self) -> std::set< std::string >::iterator"""
        return _gpstk.set_string_begin(self)


    def end(self):
        """end(set_string self) -> std::set< std::string >::iterator"""
        return _gpstk.set_string_end(self)


    def rbegin(self):
        """rbegin(set_string self) -> std::set< std::string >::reverse_iterator"""
        return _gpstk.set_string_rbegin(self)


    def rend(self):
        """rend(set_string self) -> std::set< std::string >::reverse_iterator"""
        return _gpstk.set_string_rend(self)


    def erase(self, *args):
        """
        erase(set_string self, std::set< std::string >::key_type const & x) -> std::set< std::string >::size_type
        erase(set_string self, std::set< std::string >::iterator pos)
        erase(set_string self, std::set< std::string >::iterator first, std::set< std::string >::iterator last)
        """
        return _gpstk.set_string_erase(self, *args)


    def find(self, x):
        """find(set_string self, std::set< std::string >::key_type const & x) -> std::set< std::string >::iterator"""
        return _gpstk.set_string_find(self, x)


    def lower_bound(self, x):
        """lower_bound(set_string self, std::set< std::string >::key_type const & x) -> std::set< std::string >::iterator"""
        return _gpstk.set_string_lower_bound(self, x)


    def upper_bound(self, x):
        """upper_bound(set_string self, std::set< std::string >::key_type const & x) -> std::set< std::string >::iterator"""
        return _gpstk.set_string_upper_bound(self, x)


    def equal_range(self, x):
        """equal_range(set_string self, std::set< std::string >::key_type const & x) -> std::pair< std::set< std::string >::iterator,std::set< std::string >::iterator >"""
        return _gpstk.set_string_equal_range(self, x)


    def insert(self, __x):
        """insert(set_string self, std::set< std::string >::value_type const & __x) -> std::pair< std::set< std::string >::iterator,bool >"""
        return _gpstk.set_string_insert(self, __x)

    __swig_destroy__ = _gpstk.delete_set_string
    __del__ = lambda self: None
set_string_swigregister = _gpstk.set_string_swigregister
set_string_swigregister(set_string)


_namefixes = {'str': 'string', 'float' : 'double'}


def dictToMap(dict, outtype=''):
    """Translates a python dict type to a std::map backed type.
    This uses the first element to get the type. If there are 0 elements,
    None is returned.

    This raises a TypeError if it uses a type that is not templated or if the
    dict does not use the same key,value type for all its elements.

    Note that this recopies the contents of the dict and is a linear time operation.

    You may specify the what the name (string name) of the C++ backed type is. If it is blank (the default),
    the function will attempt to discover what the appropriate type is. For example, you
    might use outType=\'map_string_int\'.
    """
    import __builtin__
    if len(dict) == 0:
        return None
    first_key = dict.keys()[0]
    t_key = first_key.__class__.__name__
    t_value = dict[first_key].__class__.__name__

# some python names don't map to the vector wrap names perfectly, so they get fixed:
    if t_key in _namefixes:
        t_key = _namefixes[t_key]
    if t_value in _namefixes:
        t_value = _namefixes[t_value]

    if outtype == '':
        new_name = 'map_' + t_key + '_' + t_value
    else:
        new_name = outtype

    try:
        m = globals()[new_name]()  # constructs an object of class t
    except:
        if outtype == '':
            raise TypeError('There is no map wrapper for ' + t)
        else:
            raise TypeError('The type ' + outtype + ' does not exist')

    t_key = type(first_key)
    t_value = type(dict[first_key])
    for key, value in dict.iteritems():
        if type(key) != t_key or type(value) != t_value:
            raise TypeError('Type mismatch in dict: ({0}, {1}) vs. ({2}, {3})'
                            .format(t_key, t_value, type(key), type(value)))
        m[key] = value
    return m

def mapToDict(map):
    """Translates a std::map backed type (from gpstk.cpp) to a python dict.

    Note that this recopies the contents of the map and is a linear time operation.
    """
    dict = {}
    for key, value in map.iteritems():
        dict[key] = value
    return dict


def seqToVector(seq, outtype=''):
    """Translates a python iterable type to a std::vector backed type.
    This uses the first element to get the type. If there are 0 elements,
    None is returned, unless the outtype is specified.

    This raises a TypeError if it uses a type that is not templated or if the
    sequence does not use the same type for all its elements.

    Note that this recopies the contents of the sequence and is a linear time operation.

    You may specify the what the name (string name) of the C++ backed type is. If it is blank (the default),
    the function will attempt to discover what the appropriate type is. For example, you
    might use outtype=\'vector_double\'.
    """
    import __builtin__

    if outtype == '':
        if len(seq) == 0:
            return None
        t = seq[0].__class__.__name__
        if t in _namefixes:
            t = _namefixes[t]
        new_name = 'vector_' + t
    else:
        new_name = outtype
    try:
        v = globals()[new_name](len(seq))  # constructs an object of class t
    except:
        if outtype == '':
            raise TypeError('There is no vector wrapper for ' + t)
        else:
            raise TypeError('The type ' + outtype + ' does not exist')

    first_type = type(seq[0])
    for i in __builtin__.range(len(seq)):
        if type(seq[i]) != first_type:
            raise TypeError('Type mismatch in sequence: {0} vs. {1}'
                            .format(first_type, type(seq[i])))
        v[i] = seq[i]
    return v

def vectorToSeq(vector):
    """Translates a std::vector backed type (from gpstk.cpp) to a python list.

    Note that this recopies the contents of the vector and is a linear time operation.
    """
    list = [None] * vector.size()  # pre-allocates size to help efficiency
    import __builtin__
    for i in __builtin__.range(vector.size()):
        list[i] = vector[i]
    return list

class ExceptionLocation(_object):
    """Proxy of C++ gpstk::ExceptionLocation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExceptionLocation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExceptionLocation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::ExceptionLocation self, std::string const & filename, std::string const & funcName, unsigned long const & lineNum=0) -> ExceptionLocation
        __init__(gpstk::ExceptionLocation self, std::string const & filename, std::string const & funcName) -> ExceptionLocation
        __init__(gpstk::ExceptionLocation self, std::string const & filename) -> ExceptionLocation
        __init__(gpstk::ExceptionLocation self) -> ExceptionLocation
        """
        this = _gpstk.new_ExceptionLocation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_ExceptionLocation
    __del__ = lambda self: None

    def getFileName(self):
        """getFileName(ExceptionLocation self) -> std::string"""
        return _gpstk.ExceptionLocation_getFileName(self)


    def getFunctionName(self):
        """getFunctionName(ExceptionLocation self) -> std::string"""
        return _gpstk.ExceptionLocation_getFunctionName(self)


    def getLineNumber(self):
        """getLineNumber(ExceptionLocation self) -> unsigned long"""
        return _gpstk.ExceptionLocation_getLineNumber(self)


    def what(self):
        """what(ExceptionLocation self) -> std::string"""
        return _gpstk.ExceptionLocation_what(self)

ExceptionLocation_swigregister = _gpstk.ExceptionLocation_swigregister
ExceptionLocation_swigregister(ExceptionLocation)

class Exception(Exception):
    """Proxy of C++ gpstk::Exception class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    __repr__ = _swig_repr
    unrecoverable = _gpstk.Exception_unrecoverable
    recoverable = _gpstk.Exception_recoverable

    def __init__(self, *args):
        """
        __init__(gpstk::Exception self) -> Exception
        __init__(gpstk::Exception self, std::string const & errorText, unsigned long const & errorId=0, gpstk::Exception::Severity const & severity) -> Exception
        __init__(gpstk::Exception self, std::string const & errorText, unsigned long const & errorId=0) -> Exception
        __init__(gpstk::Exception self, std::string const & errorText) -> Exception
        __init__(gpstk::Exception self, char const * errorText, unsigned long const & errorId=0, gpstk::Exception::Severity const & severity) -> Exception
        __init__(gpstk::Exception self, char const * errorText, unsigned long const & errorId=0) -> Exception
        __init__(gpstk::Exception self, char const * errorText) -> Exception
        __init__(gpstk::Exception self, Exception exception) -> Exception
        """
        this = _gpstk.new_Exception(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_Exception
    __del__ = lambda self: None

    def terminate(self):
        """terminate(Exception self)"""
        return _gpstk.Exception_terminate(self)


    def getErrorId(self):
        """getErrorId(Exception self) -> unsigned long"""
        return _gpstk.Exception_getErrorId(self)


    def setErrorId(self, errId):
        """setErrorId(Exception self, unsigned long const & errId) -> Exception"""
        return _gpstk.Exception_setErrorId(self, errId)


    def addLocation(self, location):
        """addLocation(Exception self, ExceptionLocation location) -> Exception"""
        return _gpstk.Exception_addLocation(self, location)


    def getLocation(self, index=0):
        """
        getLocation(Exception self, size_t const & index=0) -> ExceptionLocation
        getLocation(Exception self) -> ExceptionLocation
        """
        return _gpstk.Exception_getLocation(self, index)


    def getLocationCount(self):
        """getLocationCount(Exception self) -> size_t"""
        return _gpstk.Exception_getLocationCount(self)


    def isRecoverable(self):
        """isRecoverable(Exception self) -> bool"""
        return _gpstk.Exception_isRecoverable(self)


    def setSeverity(self, sever):
        """setSeverity(Exception self, gpstk::Exception::Severity const & sever) -> Exception"""
        return _gpstk.Exception_setSeverity(self, sever)


    def addText(self, errorText):
        """addText(Exception self, std::string const & errorText) -> Exception"""
        return _gpstk.Exception_addText(self, errorText)


    def getText(self, index=0):
        """
        getText(Exception self, size_t const & index=0) -> std::string
        getText(Exception self) -> std::string
        """
        return _gpstk.Exception_getText(self, index)


    def getTextCount(self):
        """getTextCount(Exception self) -> size_t"""
        return _gpstk.Exception_getTextCount(self)


    def getName(self):
        """getName(Exception self) -> std::string"""
        return _gpstk.Exception_getName(self)


    def __str__(self):
        """__str__(Exception self) -> std::string"""
        return _gpstk.Exception___str__(self)

Exception_swigregister = _gpstk.Exception_swigregister
Exception_swigregister(Exception)

class InvalidParameter(Exception):
    """Proxy of C++ gpstk::InvalidParameter class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidParameter, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidParameter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::InvalidParameter self) -> InvalidParameter
        __init__(gpstk::InvalidParameter self, InvalidParameter a) -> InvalidParameter
        __init__(gpstk::InvalidParameter self, Exception a) -> InvalidParameter
        __init__(gpstk::InvalidParameter self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> InvalidParameter
        __init__(gpstk::InvalidParameter self, std::string const & a, unsigned long b=0) -> InvalidParameter
        __init__(gpstk::InvalidParameter self, std::string const & a) -> InvalidParameter
        __init__(gpstk::InvalidParameter self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> InvalidParameter
        __init__(gpstk::InvalidParameter self, char const * a, unsigned long b=0) -> InvalidParameter
        __init__(gpstk::InvalidParameter self, char const * a) -> InvalidParameter
        """
        this = _gpstk.new_InvalidParameter(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_InvalidParameter
    __del__ = lambda self: None

    def getName(self):
        """getName(InvalidParameter self) -> std::string"""
        return _gpstk.InvalidParameter_getName(self)

InvalidParameter_swigregister = _gpstk.InvalidParameter_swigregister
InvalidParameter_swigregister(InvalidParameter)

class InvalidRequest(Exception):
    """Proxy of C++ gpstk::InvalidRequest class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidRequest, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidRequest, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::InvalidRequest self) -> InvalidRequest
        __init__(gpstk::InvalidRequest self, InvalidRequest a) -> InvalidRequest
        __init__(gpstk::InvalidRequest self, Exception a) -> InvalidRequest
        __init__(gpstk::InvalidRequest self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> InvalidRequest
        __init__(gpstk::InvalidRequest self, std::string const & a, unsigned long b=0) -> InvalidRequest
        __init__(gpstk::InvalidRequest self, std::string const & a) -> InvalidRequest
        __init__(gpstk::InvalidRequest self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> InvalidRequest
        __init__(gpstk::InvalidRequest self, char const * a, unsigned long b=0) -> InvalidRequest
        __init__(gpstk::InvalidRequest self, char const * a) -> InvalidRequest
        """
        this = _gpstk.new_InvalidRequest(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_InvalidRequest
    __del__ = lambda self: None

    def getName(self):
        """getName(InvalidRequest self) -> std::string"""
        return _gpstk.InvalidRequest_getName(self)

InvalidRequest_swigregister = _gpstk.InvalidRequest_swigregister
InvalidRequest_swigregister(InvalidRequest)

class AssertionFailure(Exception):
    """Proxy of C++ gpstk::AssertionFailure class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssertionFailure, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AssertionFailure, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::AssertionFailure self) -> AssertionFailure
        __init__(gpstk::AssertionFailure self, AssertionFailure a) -> AssertionFailure
        __init__(gpstk::AssertionFailure self, Exception a) -> AssertionFailure
        __init__(gpstk::AssertionFailure self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> AssertionFailure
        __init__(gpstk::AssertionFailure self, std::string const & a, unsigned long b=0) -> AssertionFailure
        __init__(gpstk::AssertionFailure self, std::string const & a) -> AssertionFailure
        __init__(gpstk::AssertionFailure self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> AssertionFailure
        __init__(gpstk::AssertionFailure self, char const * a, unsigned long b=0) -> AssertionFailure
        __init__(gpstk::AssertionFailure self, char const * a) -> AssertionFailure
        """
        this = _gpstk.new_AssertionFailure(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_AssertionFailure
    __del__ = lambda self: None

    def getName(self):
        """getName(AssertionFailure self) -> std::string"""
        return _gpstk.AssertionFailure_getName(self)

AssertionFailure_swigregister = _gpstk.AssertionFailure_swigregister
AssertionFailure_swigregister(AssertionFailure)

class AccessError(Exception):
    """Proxy of C++ gpstk::AccessError class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AccessError, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AccessError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::AccessError self) -> AccessError
        __init__(gpstk::AccessError self, AccessError a) -> AccessError
        __init__(gpstk::AccessError self, Exception a) -> AccessError
        __init__(gpstk::AccessError self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> AccessError
        __init__(gpstk::AccessError self, std::string const & a, unsigned long b=0) -> AccessError
        __init__(gpstk::AccessError self, std::string const & a) -> AccessError
        __init__(gpstk::AccessError self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> AccessError
        __init__(gpstk::AccessError self, char const * a, unsigned long b=0) -> AccessError
        __init__(gpstk::AccessError self, char const * a) -> AccessError
        """
        this = _gpstk.new_AccessError(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_AccessError
    __del__ = lambda self: None

    def getName(self):
        """getName(AccessError self) -> std::string"""
        return _gpstk.AccessError_getName(self)

AccessError_swigregister = _gpstk.AccessError_swigregister
AccessError_swigregister(AccessError)

class IndexOutOfBoundsException(Exception):
    """Proxy of C++ gpstk::IndexOutOfBoundsException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexOutOfBoundsException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexOutOfBoundsException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::IndexOutOfBoundsException self) -> IndexOutOfBoundsException
        __init__(gpstk::IndexOutOfBoundsException self, IndexOutOfBoundsException a) -> IndexOutOfBoundsException
        __init__(gpstk::IndexOutOfBoundsException self, Exception a) -> IndexOutOfBoundsException
        __init__(gpstk::IndexOutOfBoundsException self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> IndexOutOfBoundsException
        __init__(gpstk::IndexOutOfBoundsException self, std::string const & a, unsigned long b=0) -> IndexOutOfBoundsException
        __init__(gpstk::IndexOutOfBoundsException self, std::string const & a) -> IndexOutOfBoundsException
        __init__(gpstk::IndexOutOfBoundsException self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> IndexOutOfBoundsException
        __init__(gpstk::IndexOutOfBoundsException self, char const * a, unsigned long b=0) -> IndexOutOfBoundsException
        __init__(gpstk::IndexOutOfBoundsException self, char const * a) -> IndexOutOfBoundsException
        """
        this = _gpstk.new_IndexOutOfBoundsException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_IndexOutOfBoundsException
    __del__ = lambda self: None

    def getName(self):
        """getName(IndexOutOfBoundsException self) -> std::string"""
        return _gpstk.IndexOutOfBoundsException_getName(self)

IndexOutOfBoundsException_swigregister = _gpstk.IndexOutOfBoundsException_swigregister
IndexOutOfBoundsException_swigregister(IndexOutOfBoundsException)

class InvalidArgumentException(Exception):
    """Proxy of C++ gpstk::InvalidArgumentException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidArgumentException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidArgumentException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::InvalidArgumentException self) -> InvalidArgumentException
        __init__(gpstk::InvalidArgumentException self, InvalidArgumentException a) -> InvalidArgumentException
        __init__(gpstk::InvalidArgumentException self, Exception a) -> InvalidArgumentException
        __init__(gpstk::InvalidArgumentException self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> InvalidArgumentException
        __init__(gpstk::InvalidArgumentException self, std::string const & a, unsigned long b=0) -> InvalidArgumentException
        __init__(gpstk::InvalidArgumentException self, std::string const & a) -> InvalidArgumentException
        __init__(gpstk::InvalidArgumentException self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> InvalidArgumentException
        __init__(gpstk::InvalidArgumentException self, char const * a, unsigned long b=0) -> InvalidArgumentException
        __init__(gpstk::InvalidArgumentException self, char const * a) -> InvalidArgumentException
        """
        this = _gpstk.new_InvalidArgumentException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_InvalidArgumentException
    __del__ = lambda self: None

    def getName(self):
        """getName(InvalidArgumentException self) -> std::string"""
        return _gpstk.InvalidArgumentException_getName(self)

InvalidArgumentException_swigregister = _gpstk.InvalidArgumentException_swigregister
InvalidArgumentException_swigregister(InvalidArgumentException)

class ConfigurationException(Exception):
    """Proxy of C++ gpstk::ConfigurationException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigurationException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigurationException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::ConfigurationException self) -> ConfigurationException
        __init__(gpstk::ConfigurationException self, ConfigurationException a) -> ConfigurationException
        __init__(gpstk::ConfigurationException self, Exception a) -> ConfigurationException
        __init__(gpstk::ConfigurationException self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> ConfigurationException
        __init__(gpstk::ConfigurationException self, std::string const & a, unsigned long b=0) -> ConfigurationException
        __init__(gpstk::ConfigurationException self, std::string const & a) -> ConfigurationException
        __init__(gpstk::ConfigurationException self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> ConfigurationException
        __init__(gpstk::ConfigurationException self, char const * a, unsigned long b=0) -> ConfigurationException
        __init__(gpstk::ConfigurationException self, char const * a) -> ConfigurationException
        """
        this = _gpstk.new_ConfigurationException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_ConfigurationException
    __del__ = lambda self: None

    def getName(self):
        """getName(ConfigurationException self) -> std::string"""
        return _gpstk.ConfigurationException_getName(self)

ConfigurationException_swigregister = _gpstk.ConfigurationException_swigregister
ConfigurationException_swigregister(ConfigurationException)

class FileMissingException(Exception):
    """Proxy of C++ gpstk::FileMissingException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileMissingException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileMissingException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::FileMissingException self) -> FileMissingException
        __init__(gpstk::FileMissingException self, FileMissingException a) -> FileMissingException
        __init__(gpstk::FileMissingException self, Exception a) -> FileMissingException
        __init__(gpstk::FileMissingException self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> FileMissingException
        __init__(gpstk::FileMissingException self, std::string const & a, unsigned long b=0) -> FileMissingException
        __init__(gpstk::FileMissingException self, std::string const & a) -> FileMissingException
        __init__(gpstk::FileMissingException self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> FileMissingException
        __init__(gpstk::FileMissingException self, char const * a, unsigned long b=0) -> FileMissingException
        __init__(gpstk::FileMissingException self, char const * a) -> FileMissingException
        """
        this = _gpstk.new_FileMissingException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_FileMissingException
    __del__ = lambda self: None

    def getName(self):
        """getName(FileMissingException self) -> std::string"""
        return _gpstk.FileMissingException_getName(self)

FileMissingException_swigregister = _gpstk.FileMissingException_swigregister
FileMissingException_swigregister(FileMissingException)

class SystemSemaphoreException(Exception):
    """Proxy of C++ gpstk::SystemSemaphoreException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SystemSemaphoreException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SystemSemaphoreException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::SystemSemaphoreException self) -> SystemSemaphoreException
        __init__(gpstk::SystemSemaphoreException self, SystemSemaphoreException a) -> SystemSemaphoreException
        __init__(gpstk::SystemSemaphoreException self, Exception a) -> SystemSemaphoreException
        __init__(gpstk::SystemSemaphoreException self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> SystemSemaphoreException
        __init__(gpstk::SystemSemaphoreException self, std::string const & a, unsigned long b=0) -> SystemSemaphoreException
        __init__(gpstk::SystemSemaphoreException self, std::string const & a) -> SystemSemaphoreException
        __init__(gpstk::SystemSemaphoreException self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> SystemSemaphoreException
        __init__(gpstk::SystemSemaphoreException self, char const * a, unsigned long b=0) -> SystemSemaphoreException
        __init__(gpstk::SystemSemaphoreException self, char const * a) -> SystemSemaphoreException
        """
        this = _gpstk.new_SystemSemaphoreException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_SystemSemaphoreException
    __del__ = lambda self: None

    def getName(self):
        """getName(SystemSemaphoreException self) -> std::string"""
        return _gpstk.SystemSemaphoreException_getName(self)

SystemSemaphoreException_swigregister = _gpstk.SystemSemaphoreException_swigregister
SystemSemaphoreException_swigregister(SystemSemaphoreException)

class SystemPipeException(Exception):
    """Proxy of C++ gpstk::SystemPipeException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SystemPipeException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SystemPipeException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::SystemPipeException self) -> SystemPipeException
        __init__(gpstk::SystemPipeException self, SystemPipeException a) -> SystemPipeException
        __init__(gpstk::SystemPipeException self, Exception a) -> SystemPipeException
        __init__(gpstk::SystemPipeException self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> SystemPipeException
        __init__(gpstk::SystemPipeException self, std::string const & a, unsigned long b=0) -> SystemPipeException
        __init__(gpstk::SystemPipeException self, std::string const & a) -> SystemPipeException
        __init__(gpstk::SystemPipeException self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> SystemPipeException
        __init__(gpstk::SystemPipeException self, char const * a, unsigned long b=0) -> SystemPipeException
        __init__(gpstk::SystemPipeException self, char const * a) -> SystemPipeException
        """
        this = _gpstk.new_SystemPipeException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_SystemPipeException
    __del__ = lambda self: None

    def getName(self):
        """getName(SystemPipeException self) -> std::string"""
        return _gpstk.SystemPipeException_getName(self)

SystemPipeException_swigregister = _gpstk.SystemPipeException_swigregister
SystemPipeException_swigregister(SystemPipeException)

class SystemQueueException(Exception):
    """Proxy of C++ gpstk::SystemQueueException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SystemQueueException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SystemQueueException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::SystemQueueException self) -> SystemQueueException
        __init__(gpstk::SystemQueueException self, SystemQueueException a) -> SystemQueueException
        __init__(gpstk::SystemQueueException self, Exception a) -> SystemQueueException
        __init__(gpstk::SystemQueueException self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> SystemQueueException
        __init__(gpstk::SystemQueueException self, std::string const & a, unsigned long b=0) -> SystemQueueException
        __init__(gpstk::SystemQueueException self, std::string const & a) -> SystemQueueException
        __init__(gpstk::SystemQueueException self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> SystemQueueException
        __init__(gpstk::SystemQueueException self, char const * a, unsigned long b=0) -> SystemQueueException
        __init__(gpstk::SystemQueueException self, char const * a) -> SystemQueueException
        """
        this = _gpstk.new_SystemQueueException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_SystemQueueException
    __del__ = lambda self: None

    def getName(self):
        """getName(SystemQueueException self) -> std::string"""
        return _gpstk.SystemQueueException_getName(self)

SystemQueueException_swigregister = _gpstk.SystemQueueException_swigregister
SystemQueueException_swigregister(SystemQueueException)

class OutOfMemory(Exception):
    """Proxy of C++ gpstk::OutOfMemory class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutOfMemory, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutOfMemory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::OutOfMemory self) -> OutOfMemory
        __init__(gpstk::OutOfMemory self, OutOfMemory a) -> OutOfMemory
        __init__(gpstk::OutOfMemory self, Exception a) -> OutOfMemory
        __init__(gpstk::OutOfMemory self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> OutOfMemory
        __init__(gpstk::OutOfMemory self, std::string const & a, unsigned long b=0) -> OutOfMemory
        __init__(gpstk::OutOfMemory self, std::string const & a) -> OutOfMemory
        __init__(gpstk::OutOfMemory self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> OutOfMemory
        __init__(gpstk::OutOfMemory self, char const * a, unsigned long b=0) -> OutOfMemory
        __init__(gpstk::OutOfMemory self, char const * a) -> OutOfMemory
        """
        this = _gpstk.new_OutOfMemory(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_OutOfMemory
    __del__ = lambda self: None

    def getName(self):
        """getName(OutOfMemory self) -> std::string"""
        return _gpstk.OutOfMemory_getName(self)

OutOfMemory_swigregister = _gpstk.OutOfMemory_swigregister
OutOfMemory_swigregister(OutOfMemory)

class ObjectNotFound(AccessError):
    """Proxy of C++ gpstk::ObjectNotFound class"""
    __swig_setmethods__ = {}
    for _s in [AccessError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectNotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [AccessError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectNotFound, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::ObjectNotFound self) -> ObjectNotFound
        __init__(gpstk::ObjectNotFound self, ObjectNotFound a) -> ObjectNotFound
        __init__(gpstk::ObjectNotFound self, Exception a) -> ObjectNotFound
        __init__(gpstk::ObjectNotFound self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> ObjectNotFound
        __init__(gpstk::ObjectNotFound self, std::string const & a, unsigned long b=0) -> ObjectNotFound
        __init__(gpstk::ObjectNotFound self, std::string const & a) -> ObjectNotFound
        __init__(gpstk::ObjectNotFound self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> ObjectNotFound
        __init__(gpstk::ObjectNotFound self, char const * a, unsigned long b=0) -> ObjectNotFound
        __init__(gpstk::ObjectNotFound self, char const * a) -> ObjectNotFound
        """
        this = _gpstk.new_ObjectNotFound(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_ObjectNotFound
    __del__ = lambda self: None

    def getName(self):
        """getName(ObjectNotFound self) -> std::string"""
        return _gpstk.ObjectNotFound_getName(self)

ObjectNotFound_swigregister = _gpstk.ObjectNotFound_swigregister
ObjectNotFound_swigregister(ObjectNotFound)

class NullPointerException(Exception):
    """Proxy of C++ gpstk::NullPointerException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullPointerException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NullPointerException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::NullPointerException self) -> NullPointerException
        __init__(gpstk::NullPointerException self, NullPointerException a) -> NullPointerException
        __init__(gpstk::NullPointerException self, Exception a) -> NullPointerException
        __init__(gpstk::NullPointerException self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> NullPointerException
        __init__(gpstk::NullPointerException self, std::string const & a, unsigned long b=0) -> NullPointerException
        __init__(gpstk::NullPointerException self, std::string const & a) -> NullPointerException
        __init__(gpstk::NullPointerException self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> NullPointerException
        __init__(gpstk::NullPointerException self, char const * a, unsigned long b=0) -> NullPointerException
        __init__(gpstk::NullPointerException self, char const * a) -> NullPointerException
        """
        this = _gpstk.new_NullPointerException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_NullPointerException
    __del__ = lambda self: None

    def getName(self):
        """getName(NullPointerException self) -> std::string"""
        return _gpstk.NullPointerException_getName(self)

NullPointerException_swigregister = _gpstk.NullPointerException_swigregister
NullPointerException_swigregister(NullPointerException)

class UnimplementedException(Exception):
    """Proxy of C++ gpstk::UnimplementedException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnimplementedException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnimplementedException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::UnimplementedException self) -> UnimplementedException
        __init__(gpstk::UnimplementedException self, UnimplementedException a) -> UnimplementedException
        __init__(gpstk::UnimplementedException self, Exception a) -> UnimplementedException
        __init__(gpstk::UnimplementedException self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> UnimplementedException
        __init__(gpstk::UnimplementedException self, std::string const & a, unsigned long b=0) -> UnimplementedException
        __init__(gpstk::UnimplementedException self, std::string const & a) -> UnimplementedException
        __init__(gpstk::UnimplementedException self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> UnimplementedException
        __init__(gpstk::UnimplementedException self, char const * a, unsigned long b=0) -> UnimplementedException
        __init__(gpstk::UnimplementedException self, char const * a) -> UnimplementedException
        """
        this = _gpstk.new_UnimplementedException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_UnimplementedException
    __del__ = lambda self: None

    def getName(self):
        """getName(UnimplementedException self) -> std::string"""
        return _gpstk.UnimplementedException_getName(self)

UnimplementedException_swigregister = _gpstk.UnimplementedException_swigregister
UnimplementedException_swigregister(UnimplementedException)

class FFStreamError(Exception):
    """Proxy of C++ gpstk::FFStreamError class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFStreamError, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FFStreamError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::FFStreamError self) -> FFStreamError
        __init__(gpstk::FFStreamError self, FFStreamError a) -> FFStreamError
        __init__(gpstk::FFStreamError self, Exception a) -> FFStreamError
        __init__(gpstk::FFStreamError self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> FFStreamError
        __init__(gpstk::FFStreamError self, std::string const & a, unsigned long b=0) -> FFStreamError
        __init__(gpstk::FFStreamError self, std::string const & a) -> FFStreamError
        __init__(gpstk::FFStreamError self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> FFStreamError
        __init__(gpstk::FFStreamError self, char const * a, unsigned long b=0) -> FFStreamError
        __init__(gpstk::FFStreamError self, char const * a) -> FFStreamError
        """
        this = _gpstk.new_FFStreamError(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_FFStreamError
    __del__ = lambda self: None

    def getName(self):
        """getName(FFStreamError self) -> std::string"""
        return _gpstk.FFStreamError_getName(self)

FFStreamError_swigregister = _gpstk.FFStreamError_swigregister
FFStreamError_swigregister(FFStreamError)

class StringException(Exception):
    """Proxy of C++ gpstk::StringUtils::StringException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::StringUtils::StringException self) -> StringException
        __init__(gpstk::StringUtils::StringException self, StringException a) -> StringException
        __init__(gpstk::StringUtils::StringException self, Exception a) -> StringException
        __init__(gpstk::StringUtils::StringException self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> StringException
        __init__(gpstk::StringUtils::StringException self, std::string const & a, unsigned long b=0) -> StringException
        __init__(gpstk::StringUtils::StringException self, std::string const & a) -> StringException
        __init__(gpstk::StringUtils::StringException self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> StringException
        __init__(gpstk::StringUtils::StringException self, char const * a, unsigned long b=0) -> StringException
        __init__(gpstk::StringUtils::StringException self, char const * a) -> StringException
        """
        this = _gpstk.new_StringException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_StringException
    __del__ = lambda self: None

    def getName(self):
        """getName(StringException self) -> std::string"""
        return _gpstk.StringException_getName(self)

StringException_swigregister = _gpstk.StringException_swigregister
StringException_swigregister(StringException)

class TimeSystem(_object):
    """Proxy of C++ gpstk::TimeSystem class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeSystem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeSystem, name)
    __repr__ = _swig_repr
    Unknown = _gpstk.TimeSystem_Unknown
    Any = _gpstk.TimeSystem_Any
    GPS = _gpstk.TimeSystem_GPS
    GLO = _gpstk.TimeSystem_GLO
    GAL = _gpstk.TimeSystem_GAL
    QZS = _gpstk.TimeSystem_QZS
    BDT = _gpstk.TimeSystem_BDT
    UTC = _gpstk.TimeSystem_UTC
    TAI = _gpstk.TimeSystem_TAI
    TT = _gpstk.TimeSystem_TT
    TDB = _gpstk.TimeSystem_TDB
    count = _gpstk.TimeSystem_count

    def setTimeSystem(self, sys):
        """setTimeSystem(TimeSystem self, gpstk::TimeSystem::Systems const & sys)"""
        return _gpstk.TimeSystem_setTimeSystem(self, sys)


    def getTimeSystem(self):
        """getTimeSystem(TimeSystem self) -> gpstk::TimeSystem::Systems"""
        return _gpstk.TimeSystem_getTimeSystem(self)


    def __str__(self):
        """__str__(TimeSystem self) -> std::string"""
        return _gpstk.TimeSystem___str__(self)


    def fromString(self, str):
        """fromString(TimeSystem self, std::string const & str)"""
        return _gpstk.TimeSystem_fromString(self, str)


    def __eq__(self, right):
        """__eq__(TimeSystem self, TimeSystem right) -> bool"""
        return _gpstk.TimeSystem___eq__(self, right)


    def __lt__(self, right):
        """__lt__(TimeSystem self, TimeSystem right) -> bool"""
        return _gpstk.TimeSystem___lt__(self, right)


    def __ne__(self, right):
        """__ne__(TimeSystem self, TimeSystem right) -> bool"""
        return _gpstk.TimeSystem___ne__(self, right)


    def __ge__(self, right):
        """__ge__(TimeSystem self, TimeSystem right) -> bool"""
        return _gpstk.TimeSystem___ge__(self, right)


    def __le__(self, right):
        """__le__(TimeSystem self, TimeSystem right) -> bool"""
        return _gpstk.TimeSystem___le__(self, right)


    def __gt__(self, right):
        """__gt__(TimeSystem self, TimeSystem right) -> bool"""
        return _gpstk.TimeSystem___gt__(self, right)


    def getLeapSeconds(yr, mon, day):
        """getLeapSeconds(int const yr, int const mon, double const day) -> double"""
        return _gpstk.TimeSystem_getLeapSeconds(yr, mon, day)

    if _newclass:
        getLeapSeconds = staticmethod(getLeapSeconds)
    __swig_getmethods__["getLeapSeconds"] = lambda x: getLeapSeconds

    def Correction(inTS, outTS, year, month, day):
        """Correction(TimeSystem inTS, TimeSystem outTS, int const year, int const month, double const day) -> double"""
        return _gpstk.TimeSystem_Correction(inTS, outTS, year, month, day)

    if _newclass:
        Correction = staticmethod(Correction)
    __swig_getmethods__["Correction"] = lambda x: Correction

    def __init__(self, *args):
        """
        __init__(gpstk::TimeSystem self, gpstk::TimeSystem::Systems const sys) -> TimeSystem
        __init__(gpstk::TimeSystem self) -> TimeSystem
        __init__(gpstk::TimeSystem self, std::string sys) -> TimeSystem
        """
        this = _gpstk.new_TimeSystem(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_TimeSystem
    __del__ = lambda self: None
TimeSystem_swigregister = _gpstk.TimeSystem_swigregister
TimeSystem_swigregister(TimeSystem)

def TimeSystem_getLeapSeconds(yr, mon, day):
    """TimeSystem_getLeapSeconds(int const yr, int const mon, double const day) -> double"""
    return _gpstk.TimeSystem_getLeapSeconds(yr, mon, day)

def TimeSystem_Correction(inTS, outTS, year, month, day):
    """TimeSystem_Correction(TimeSystem inTS, TimeSystem outTS, int const year, int const month, double const day) -> double"""
    return _gpstk.TimeSystem_Correction(inTS, outTS, year, month, day)

class TimeTag(_object):
    """Proxy of C++ gpstk::TimeTag class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeTag, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_TimeTag
    __del__ = lambda self: None

    def toCommonTime(self):
        """toCommonTime(TimeTag self) -> CommonTime"""
        return _gpstk.TimeTag_toCommonTime(self)


    def convertFromCommonTime(self, ct):
        """convertFromCommonTime(TimeTag self, CommonTime const & ct)"""
        return _gpstk.TimeTag_convertFromCommonTime(self, ct)


    def printf(self, fmt):
        """printf(TimeTag self, std::string const & fmt) -> std::string"""
        return _gpstk.TimeTag_printf(self, fmt)


    def printError(self, fmt):
        """printError(TimeTag self, std::string const & fmt) -> std::string"""
        return _gpstk.TimeTag_printError(self, fmt)


    def scanf(self, str, fmt):
        """scanf(TimeTag self, std::string const & str, std::string const & fmt)"""
        return _gpstk.TimeTag_scanf(self, str, fmt)


    def getInfo(str, fmt, info):
        """getInfo(std::string const & str, std::string const & fmt, map_char_string info)"""
        return _gpstk.TimeTag_getInfo(str, fmt, info)

    if _newclass:
        getInfo = staticmethod(getInfo)
    __swig_getmethods__["getInfo"] = lambda x: getInfo

    def setFromInfo(self, info):
        """setFromInfo(TimeTag self, map_char_string info) -> bool"""
        return _gpstk.TimeTag_setFromInfo(self, info)


    def getPrintChars(self):
        """getPrintChars(TimeTag self) -> std::string"""
        return _gpstk.TimeTag_getPrintChars(self)


    def getDefaultFormat(self):
        """getDefaultFormat(TimeTag self) -> std::string"""
        return _gpstk.TimeTag_getDefaultFormat(self)


    def isValid(self):
        """isValid(TimeTag self) -> bool"""
        return _gpstk.TimeTag_isValid(self)


    def reset(self):
        """reset(TimeTag self)"""
        return _gpstk.TimeTag_reset(self)


    def __str__(self):
        """__str__(TimeTag self) -> std::string"""
        return _gpstk.TimeTag___str__(self)


    def getFormatPrefixInt():
        """getFormatPrefixInt() -> std::string"""
        return _gpstk.TimeTag_getFormatPrefixInt()

    if _newclass:
        getFormatPrefixInt = staticmethod(getFormatPrefixInt)
    __swig_getmethods__["getFormatPrefixInt"] = lambda x: getFormatPrefixInt

    def getFormatPrefixFloat():
        """getFormatPrefixFloat() -> std::string"""
        return _gpstk.TimeTag_getFormatPrefixFloat()

    if _newclass:
        getFormatPrefixFloat = staticmethod(getFormatPrefixFloat)
    __swig_getmethods__["getFormatPrefixFloat"] = lambda x: getFormatPrefixFloat

    def getError():
        """getError() -> std::string"""
        return _gpstk.TimeTag_getError()

    if _newclass:
        getError = staticmethod(getError)
    __swig_getmethods__["getError"] = lambda x: getError

    def setTimeSystem(self, timeSys):
        """setTimeSystem(TimeTag self, TimeSystem timeSys)"""
        return _gpstk.TimeTag_setTimeSystem(self, timeSys)


    def getTimeSystem(self):
        """getTimeSystem(TimeTag self) -> TimeSystem"""
        return _gpstk.TimeTag_getTimeSystem(self)

TimeTag_swigregister = _gpstk.TimeTag_swigregister
TimeTag_swigregister(TimeTag)

def TimeTag_getInfo(str, fmt, info):
    """TimeTag_getInfo(std::string const & str, std::string const & fmt, map_char_string info)"""
    return _gpstk.TimeTag_getInfo(str, fmt, info)

def TimeTag_getFormatPrefixInt():
    """TimeTag_getFormatPrefixInt() -> std::string"""
    return _gpstk.TimeTag_getFormatPrefixInt()

def TimeTag_getFormatPrefixFloat():
    """TimeTag_getFormatPrefixFloat() -> std::string"""
    return _gpstk.TimeTag_getFormatPrefixFloat()

def TimeTag_getError():
    """TimeTag_getError() -> std::string"""
    return _gpstk.TimeTag_getError()

class CommonTime(_object):
    """Proxy of C++ gpstk::CommonTime class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommonTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommonTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::CommonTime self, TimeSystem timeSystem) -> CommonTime
        __init__(gpstk::CommonTime self) -> CommonTime
        __init__(gpstk::CommonTime self, CommonTime right) -> CommonTime
        """
        this = _gpstk.new_CommonTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_CommonTime
    __del__ = lambda self: None

    def set(self, *args):
        """
        set(CommonTime self, long day, long sod, double fsod=0.0, TimeSystem timeSystem) -> CommonTime
        set(CommonTime self, long day, long sod, double fsod=0.0) -> CommonTime
        set(CommonTime self, long day, long sod) -> CommonTime
        set(CommonTime self, long day, double sod=0.0, TimeSystem timeSystem) -> CommonTime
        set(CommonTime self, long day, double sod=0.0) -> CommonTime
        set(CommonTime self, long day) -> CommonTime
        set(CommonTime self, double day, TimeSystem timeSys) -> CommonTime
        set(CommonTime self, double day) -> CommonTime
        """
        return _gpstk.CommonTime_set(self, *args)


    def setInternal(self, *args):
        """
        setInternal(CommonTime self, long day=0, long msod=0, double fsod=0.0, TimeSystem timeSys) -> CommonTime
        setInternal(CommonTime self, long day=0, long msod=0, double fsod=0.0) -> CommonTime
        setInternal(CommonTime self, long day=0, long msod=0) -> CommonTime
        setInternal(CommonTime self, long day=0) -> CommonTime
        setInternal(CommonTime self) -> CommonTime
        """
        return _gpstk.CommonTime_setInternal(self, *args)


    def setTimeSystem(self, timeSystem):
        """setTimeSystem(CommonTime self, TimeSystem timeSystem)"""
        return _gpstk.CommonTime_setTimeSystem(self, timeSystem)


    def getInternal(self, *args):
        """
        getInternal(CommonTime self, long & day, long & msod, double & fsod, TimeSystem timeSystem)
        getInternal(CommonTime self, long & day, long & msod, double & fsod)
        """
        return _gpstk.CommonTime_getInternal(self, *args)


    def getDays(self):
        """getDays(CommonTime self) -> double"""
        return _gpstk.CommonTime_getDays(self)


    def getSecondOfDay(self):
        """getSecondOfDay(CommonTime self) -> double"""
        return _gpstk.CommonTime_getSecondOfDay(self)


    def getTimeSystem(self):
        """getTimeSystem(CommonTime self) -> TimeSystem"""
        return _gpstk.CommonTime_getTimeSystem(self)


    def __add__(self, seconds):
        """__add__(CommonTime self, double seconds) -> CommonTime"""
        return _gpstk.CommonTime___add__(self, seconds)


    def __sub__(self, *args):
        """
        __sub__(CommonTime self, CommonTime right) -> double
        __sub__(CommonTime self, double seconds) -> CommonTime
        """
        return _gpstk.CommonTime___sub__(self, *args)


    def __iadd__(self, seconds):
        """__iadd__(CommonTime self, double seconds) -> CommonTime"""
        return _gpstk.CommonTime___iadd__(self, seconds)


    def __isub__(self, seconds):
        """__isub__(CommonTime self, double seconds) -> CommonTime"""
        return _gpstk.CommonTime___isub__(self, seconds)


    def addDays(self, days):
        """addDays(CommonTime self, long days) -> CommonTime"""
        return _gpstk.CommonTime_addDays(self, days)


    def addSeconds(self, *args):
        """
        addSeconds(CommonTime self, double seconds) -> CommonTime
        addSeconds(CommonTime self, long seconds) -> CommonTime
        """
        return _gpstk.CommonTime_addSeconds(self, *args)


    def addMilliseconds(self, ms):
        """addMilliseconds(CommonTime self, long ms) -> CommonTime"""
        return _gpstk.CommonTime_addMilliseconds(self, ms)


    def __eq__(self, right):
        """__eq__(CommonTime self, CommonTime right) -> bool"""
        return _gpstk.CommonTime___eq__(self, right)


    def __ne__(self, right):
        """__ne__(CommonTime self, CommonTime right) -> bool"""
        return _gpstk.CommonTime___ne__(self, right)


    def __lt__(self, right):
        """__lt__(CommonTime self, CommonTime right) -> bool"""
        return _gpstk.CommonTime___lt__(self, right)


    def __gt__(self, right):
        """__gt__(CommonTime self, CommonTime right) -> bool"""
        return _gpstk.CommonTime___gt__(self, right)


    def __le__(self, right):
        """__le__(CommonTime self, CommonTime right) -> bool"""
        return _gpstk.CommonTime___le__(self, right)


    def __ge__(self, right):
        """__ge__(CommonTime self, CommonTime right) -> bool"""
        return _gpstk.CommonTime___ge__(self, right)


    def reset(self):
        """reset(CommonTime self)"""
        return _gpstk.CommonTime_reset(self)


    def __str__(self):
        """__str__(CommonTime self) -> std::string"""
        return _gpstk.CommonTime___str__(self)

CommonTime_swigregister = _gpstk.CommonTime_swigregister
CommonTime_swigregister(CommonTime)
cvar = _gpstk.cvar
MJD_TO_JD = cvar.MJD_TO_JD
MJD_JDAY = cvar.MJD_JDAY
UNIX_MJD = cvar.UNIX_MJD
HALFWEEK = cvar.HALFWEEK
FULLWEEK = cvar.FULLWEEK
SEC_PER_DAY = cvar.SEC_PER_DAY
DAY_PER_SEC = cvar.DAY_PER_SEC
MS_PER_SEC = cvar.MS_PER_SEC
SEC_PER_MS = cvar.SEC_PER_MS
MS_PER_DAY = cvar.MS_PER_DAY
DAY_PER_MS = cvar.DAY_PER_MS
GPS_EPOCH_JD = cvar.GPS_EPOCH_JD
GPS_EPOCH_MJD = cvar.GPS_EPOCH_MJD
GPS_WEEK_PER_EPOCH = cvar.GPS_WEEK_PER_EPOCH
ZCOUNT_PER_DAY = cvar.ZCOUNT_PER_DAY
DAY_PER_ZCOUNT = cvar.DAY_PER_ZCOUNT
ZCOUNT_PER_WEEK = cvar.ZCOUNT_PER_WEEK
WEEK_PER_ZCOUNT = cvar.WEEK_PER_ZCOUNT
GAL_EPOCH_JD = cvar.GAL_EPOCH_JD
GAL_EPOCH_MJD = cvar.GAL_EPOCH_MJD
GAL_WEEK_PER_EPOCH = cvar.GAL_WEEK_PER_EPOCH
QZS_EPOCH_JD = cvar.QZS_EPOCH_JD
QZS_EPOCH_MJD = cvar.QZS_EPOCH_MJD
QZS_WEEK_PER_EPOCH = cvar.QZS_WEEK_PER_EPOCH
BDS_EPOCH_JD = cvar.BDS_EPOCH_JD
BDS_EPOCH_MJD = cvar.BDS_EPOCH_MJD
BDS_WEEK_PER_EPOCH = cvar.BDS_WEEK_PER_EPOCH
CommonTime.BEGIN_LIMIT_JDAY = _gpstk.cvar.CommonTime_BEGIN_LIMIT_JDAY
CommonTime.END_LIMIT_JDAY = _gpstk.cvar.CommonTime_END_LIMIT_JDAY
CommonTime.BEGINNING_OF_TIME = _gpstk.cvar.CommonTime_BEGINNING_OF_TIME
CommonTime.END_OF_TIME = _gpstk.cvar.CommonTime_END_OF_TIME
CommonTime.eps = _gpstk.cvar.CommonTime_eps

class Week(TimeTag):
    """Proxy of C++ gpstk::Week class"""
    __swig_setmethods__ = {}
    for _s in [TimeTag]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Week, name, value)
    __swig_getmethods__ = {}
    for _s in [TimeTag]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Week, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Nbits(self):
        """Nbits(Week self) -> int"""
        return _gpstk.Week_Nbits(self)


    def bitmask(self):
        """bitmask(Week self) -> int"""
        return _gpstk.Week_bitmask(self)


    def rollover(self):
        """rollover(Week self) -> int"""
        return _gpstk.Week_rollover(self)


    def MJDEpoch(self):
        """MJDEpoch(Week self) -> long"""
        return _gpstk.Week_MJDEpoch(self)


    def MAXWEEK(self):
        """MAXWEEK(Week self) -> int"""
        return _gpstk.Week_MAXWEEK(self)

    __swig_destroy__ = _gpstk.delete_Week
    __del__ = lambda self: None

    def __eq__(self, right):
        """__eq__(Week self, Week right) -> bool"""
        return _gpstk.Week___eq__(self, right)


    def __ne__(self, right):
        """__ne__(Week self, Week right) -> bool"""
        return _gpstk.Week___ne__(self, right)


    def __lt__(self, right):
        """__lt__(Week self, Week right) -> bool"""
        return _gpstk.Week___lt__(self, right)


    def __le__(self, right):
        """__le__(Week self, Week right) -> bool"""
        return _gpstk.Week___le__(self, right)


    def __gt__(self, right):
        """__gt__(Week self, Week right) -> bool"""
        return _gpstk.Week___gt__(self, right)


    def __ge__(self, right):
        """__ge__(Week self, Week right) -> bool"""
        return _gpstk.Week___ge__(self, right)


    def getWeek(self):
        """getWeek(Week self) -> unsigned int"""
        return _gpstk.Week_getWeek(self)


    def getModWeek(self):
        """getModWeek(Week self) -> unsigned int"""
        return _gpstk.Week_getModWeek(self)


    def getEpoch(self):
        """getEpoch(Week self) -> unsigned int"""
        return _gpstk.Week_getEpoch(self)


    def getEpochModWeek(self, e, w):
        """getEpochModWeek(Week self, unsigned int & e, unsigned int & w)"""
        return _gpstk.Week_getEpochModWeek(self, e, w)


    def setEpoch(self, e):
        """setEpoch(Week self, unsigned int e)"""
        return _gpstk.Week_setEpoch(self, e)


    def setModWeek(self, w):
        """setModWeek(Week self, unsigned int w)"""
        return _gpstk.Week_setModWeek(self, w)


    def setEpochModWeek(self, e, w):
        """setEpochModWeek(Week self, unsigned int e, unsigned int w)"""
        return _gpstk.Week_setEpochModWeek(self, e, w)


    def adjustToYear(self, y):
        """adjustToYear(Week self, unsigned int y)"""
        return _gpstk.Week_adjustToYear(self, y)


    def getPrintChars(self):
        """getPrintChars(Week self) -> std::string"""
        return _gpstk.Week_getPrintChars(self)


    def getDefaultFormat(self):
        """getDefaultFormat(Week self) -> std::string"""
        return _gpstk.Week_getDefaultFormat(self)


    def isValid(self):
        """isValid(Week self) -> bool"""
        return _gpstk.Week_isValid(self)


    def reset(self):
        """reset(Week self)"""
        return _gpstk.Week_reset(self)


    def getDayOfWeek(self):
        """getDayOfWeek(Week self) -> unsigned int"""
        return _gpstk.Week_getDayOfWeek(self)

    __swig_setmethods__["week"] = _gpstk.Week_week_set
    __swig_getmethods__["week"] = _gpstk.Week_week_get
    if _newclass:
        week = _swig_property(_gpstk.Week_week_get, _gpstk.Week_week_set)
Week_swigregister = _gpstk.Week_swigregister
Week_swigregister(Week)

class WeekSecond(Week):
    """Proxy of C++ gpstk::WeekSecond class"""
    __swig_setmethods__ = {}
    for _s in [Week]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WeekSecond, name, value)
    __swig_getmethods__ = {}
    for _s in [Week]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WeekSecond, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_WeekSecond
    __del__ = lambda self: None

    def toCommonTime(self):
        """toCommonTime(WeekSecond self) -> CommonTime"""
        return _gpstk.WeekSecond_toCommonTime(self)


    def convertFromCommonTime(self, ct):
        """convertFromCommonTime(WeekSecond self, CommonTime ct)"""
        return _gpstk.WeekSecond_convertFromCommonTime(self, ct)


    def isValid(self):
        """isValid(WeekSecond self) -> bool"""
        return _gpstk.WeekSecond_isValid(self)


    def reset(self):
        """reset(WeekSecond self)"""
        return _gpstk.WeekSecond_reset(self)


    def getDayOfWeek(self):
        """getDayOfWeek(WeekSecond self) -> unsigned int"""
        return _gpstk.WeekSecond_getDayOfWeek(self)


    def getSOW(self):
        """getSOW(WeekSecond self) -> double"""
        return _gpstk.WeekSecond_getSOW(self)


    def __eq__(self, right):
        """__eq__(WeekSecond self, WeekSecond right) -> bool"""
        return _gpstk.WeekSecond___eq__(self, right)


    def __ne__(self, right):
        """__ne__(WeekSecond self, WeekSecond right) -> bool"""
        return _gpstk.WeekSecond___ne__(self, right)


    def __lt__(self, right):
        """__lt__(WeekSecond self, WeekSecond right) -> bool"""
        return _gpstk.WeekSecond___lt__(self, right)


    def __gt__(self, right):
        """__gt__(WeekSecond self, WeekSecond right) -> bool"""
        return _gpstk.WeekSecond___gt__(self, right)


    def __le__(self, right):
        """__le__(WeekSecond self, WeekSecond right) -> bool"""
        return _gpstk.WeekSecond___le__(self, right)


    def __ge__(self, right):
        """__ge__(WeekSecond self, WeekSecond right) -> bool"""
        return _gpstk.WeekSecond___ge__(self, right)

    __swig_setmethods__["sow"] = _gpstk.WeekSecond_sow_set
    __swig_getmethods__["sow"] = _gpstk.WeekSecond_sow_get
    if _newclass:
        sow = _swig_property(_gpstk.WeekSecond_sow_get, _gpstk.WeekSecond_sow_set)
WeekSecond_swigregister = _gpstk.WeekSecond_swigregister
WeekSecond_swigregister(WeekSecond)

class UnixTime(TimeTag):
    """Proxy of C++ gpstk::UnixTime class"""
    __swig_setmethods__ = {}
    for _s in [TimeTag]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnixTime, name, value)
    __swig_getmethods__ = {}
    for _s in [TimeTag]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnixTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::UnixTime self, int sec=0, int usec=0, TimeSystem ts) -> UnixTime
        __init__(gpstk::UnixTime self, int sec=0, int usec=0) -> UnixTime
        __init__(gpstk::UnixTime self, int sec=0) -> UnixTime
        __init__(gpstk::UnixTime self) -> UnixTime
        __init__(gpstk::UnixTime self, timeval t, TimeSystem ts) -> UnixTime
        __init__(gpstk::UnixTime self, timeval t) -> UnixTime
        __init__(gpstk::UnixTime self, UnixTime right) -> UnixTime
        __init__(gpstk::UnixTime self, TimeTag right) -> UnixTime
        __init__(gpstk::UnixTime self, CommonTime right) -> UnixTime
        """
        this = _gpstk.new_UnixTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_UnixTime
    __del__ = lambda self: None

    def toCommonTime(self):
        """toCommonTime(UnixTime self) -> CommonTime"""
        return _gpstk.UnixTime_toCommonTime(self)


    def convertFromCommonTime(self, ct):
        """convertFromCommonTime(UnixTime self, CommonTime ct)"""
        return _gpstk.UnixTime_convertFromCommonTime(self, ct)


    def printf(self, fmt):
        """printf(UnixTime self, std::string const & fmt) -> std::string"""
        return _gpstk.UnixTime_printf(self, fmt)


    def printError(self, fmt):
        """printError(UnixTime self, std::string const & fmt) -> std::string"""
        return _gpstk.UnixTime_printError(self, fmt)


    def setFromInfo(self, info):
        """setFromInfo(UnixTime self, map_char_string info) -> bool"""
        return _gpstk.UnixTime_setFromInfo(self, info)


    def getPrintChars(self):
        """getPrintChars(UnixTime self) -> std::string"""
        return _gpstk.UnixTime_getPrintChars(self)


    def getDefaultFormat(self):
        """getDefaultFormat(UnixTime self) -> std::string"""
        return _gpstk.UnixTime_getDefaultFormat(self)


    def isValid(self):
        """isValid(UnixTime self) -> bool"""
        return _gpstk.UnixTime_isValid(self)


    def reset(self):
        """reset(UnixTime self)"""
        return _gpstk.UnixTime_reset(self)


    def __eq__(self, right):
        """__eq__(UnixTime self, UnixTime right) -> bool"""
        return _gpstk.UnixTime___eq__(self, right)


    def __ne__(self, right):
        """__ne__(UnixTime self, UnixTime right) -> bool"""
        return _gpstk.UnixTime___ne__(self, right)


    def __lt__(self, right):
        """__lt__(UnixTime self, UnixTime right) -> bool"""
        return _gpstk.UnixTime___lt__(self, right)


    def __gt__(self, right):
        """__gt__(UnixTime self, UnixTime right) -> bool"""
        return _gpstk.UnixTime___gt__(self, right)


    def __le__(self, right):
        """__le__(UnixTime self, UnixTime right) -> bool"""
        return _gpstk.UnixTime___le__(self, right)


    def __ge__(self, right):
        """__ge__(UnixTime self, UnixTime right) -> bool"""
        return _gpstk.UnixTime___ge__(self, right)

    __swig_setmethods__["tv"] = _gpstk.UnixTime_tv_set
    __swig_getmethods__["tv"] = _gpstk.UnixTime_tv_get
    if _newclass:
        tv = _swig_property(_gpstk.UnixTime_tv_get, _gpstk.UnixTime_tv_set)
UnixTime_swigregister = _gpstk.UnixTime_swigregister
UnixTime_swigregister(UnixTime)

class SystemTime(UnixTime):
    """Proxy of C++ gpstk::SystemTime class"""
    __swig_setmethods__ = {}
    for _s in [UnixTime]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SystemTime, name, value)
    __swig_getmethods__ = {}
    for _s in [UnixTime]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SystemTime, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_SystemTime
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(gpstk::SystemTime self) -> SystemTime
        __init__(gpstk::SystemTime self, SystemTime right) -> SystemTime
        """
        this = _gpstk.new_SystemTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def update(self):
        """update(SystemTime self) -> SystemTime"""
        return _gpstk.SystemTime_update(self)

SystemTime_swigregister = _gpstk.SystemTime_swigregister
SystemTime_swigregister(SystemTime)

class ANSITime(TimeTag):
    """Proxy of C++ gpstk::ANSITime class"""
    __swig_setmethods__ = {}
    for _s in [TimeTag]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ANSITime, name, value)
    __swig_getmethods__ = {}
    for _s in [TimeTag]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ANSITime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::ANSITime self, time_t t=0, TimeSystem ts) -> ANSITime
        __init__(gpstk::ANSITime self, time_t t=0) -> ANSITime
        __init__(gpstk::ANSITime self) -> ANSITime
        __init__(gpstk::ANSITime self, ANSITime right) -> ANSITime
        __init__(gpstk::ANSITime self, TimeTag right) -> ANSITime
        __init__(gpstk::ANSITime self, CommonTime right) -> ANSITime
        """
        this = _gpstk.new_ANSITime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_ANSITime
    __del__ = lambda self: None

    def toCommonTime(self):
        """toCommonTime(ANSITime self) -> CommonTime"""
        return _gpstk.ANSITime_toCommonTime(self)


    def convertFromCommonTime(self, ct):
        """convertFromCommonTime(ANSITime self, CommonTime ct)"""
        return _gpstk.ANSITime_convertFromCommonTime(self, ct)


    def printf(self, fmt):
        """printf(ANSITime self, std::string const & fmt) -> std::string"""
        return _gpstk.ANSITime_printf(self, fmt)


    def printError(self, fmt):
        """printError(ANSITime self, std::string const & fmt) -> std::string"""
        return _gpstk.ANSITime_printError(self, fmt)


    def setFromInfo(self, info):
        """setFromInfo(ANSITime self, map_char_string info) -> bool"""
        return _gpstk.ANSITime_setFromInfo(self, info)


    def getPrintChars(self):
        """getPrintChars(ANSITime self) -> std::string"""
        return _gpstk.ANSITime_getPrintChars(self)


    def getDefaultFormat(self):
        """getDefaultFormat(ANSITime self) -> std::string"""
        return _gpstk.ANSITime_getDefaultFormat(self)


    def isValid(self):
        """isValid(ANSITime self) -> bool"""
        return _gpstk.ANSITime_isValid(self)


    def reset(self):
        """reset(ANSITime self)"""
        return _gpstk.ANSITime_reset(self)


    def __eq__(self, right):
        """__eq__(ANSITime self, ANSITime right) -> bool"""
        return _gpstk.ANSITime___eq__(self, right)


    def __ne__(self, right):
        """__ne__(ANSITime self, ANSITime right) -> bool"""
        return _gpstk.ANSITime___ne__(self, right)


    def __lt__(self, right):
        """__lt__(ANSITime self, ANSITime right) -> bool"""
        return _gpstk.ANSITime___lt__(self, right)


    def __gt__(self, right):
        """__gt__(ANSITime self, ANSITime right) -> bool"""
        return _gpstk.ANSITime___gt__(self, right)


    def __le__(self, right):
        """__le__(ANSITime self, ANSITime right) -> bool"""
        return _gpstk.ANSITime___le__(self, right)


    def __ge__(self, right):
        """__ge__(ANSITime self, ANSITime right) -> bool"""
        return _gpstk.ANSITime___ge__(self, right)

    __swig_setmethods__["time"] = _gpstk.ANSITime_time_set
    __swig_getmethods__["time"] = _gpstk.ANSITime_time_get
    if _newclass:
        time = _swig_property(_gpstk.ANSITime_time_get, _gpstk.ANSITime_time_set)
ANSITime_swigregister = _gpstk.ANSITime_swigregister
ANSITime_swigregister(ANSITime)

class CivilTime(TimeTag):
    """Proxy of C++ gpstk::CivilTime class"""
    __swig_setmethods__ = {}
    for _s in [TimeTag]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CivilTime, name, value)
    __swig_getmethods__ = {}
    for _s in [TimeTag]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CivilTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::CivilTime self, int yr=0, int mo=0, int dy=0, int hr=0, int mn=0, double s=0.0, TimeSystem ts) -> CivilTime
        __init__(gpstk::CivilTime self, int yr=0, int mo=0, int dy=0, int hr=0, int mn=0, double s=0.0) -> CivilTime
        __init__(gpstk::CivilTime self, int yr=0, int mo=0, int dy=0, int hr=0, int mn=0) -> CivilTime
        __init__(gpstk::CivilTime self, int yr=0, int mo=0, int dy=0, int hr=0) -> CivilTime
        __init__(gpstk::CivilTime self, int yr=0, int mo=0, int dy=0) -> CivilTime
        __init__(gpstk::CivilTime self, int yr=0, int mo=0) -> CivilTime
        __init__(gpstk::CivilTime self, int yr=0) -> CivilTime
        __init__(gpstk::CivilTime self) -> CivilTime
        __init__(gpstk::CivilTime self, CivilTime right) -> CivilTime
        __init__(gpstk::CivilTime self, TimeTag right) -> CivilTime
        __init__(gpstk::CivilTime self, CommonTime right) -> CivilTime
        """
        this = _gpstk.new_CivilTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_CivilTime
    __del__ = lambda self: None

    def toCommonTime(self):
        """toCommonTime(CivilTime self) -> CommonTime"""
        return _gpstk.CivilTime_toCommonTime(self)


    def convertFromCommonTime(self, ct):
        """convertFromCommonTime(CivilTime self, CommonTime ct)"""
        return _gpstk.CivilTime_convertFromCommonTime(self, ct)


    def printf(self, fmt):
        """printf(CivilTime self, std::string const & fmt) -> std::string"""
        return _gpstk.CivilTime_printf(self, fmt)


    def printError(self, fmt):
        """printError(CivilTime self, std::string const & fmt) -> std::string"""
        return _gpstk.CivilTime_printError(self, fmt)


    def setFromInfo(self, info):
        """setFromInfo(CivilTime self, map_char_string info) -> bool"""
        return _gpstk.CivilTime_setFromInfo(self, info)


    def getPrintChars(self):
        """getPrintChars(CivilTime self) -> std::string"""
        return _gpstk.CivilTime_getPrintChars(self)


    def getDefaultFormat(self):
        """getDefaultFormat(CivilTime self) -> std::string"""
        return _gpstk.CivilTime_getDefaultFormat(self)


    def isValid(self):
        """isValid(CivilTime self) -> bool"""
        return _gpstk.CivilTime_isValid(self)


    def reset(self):
        """reset(CivilTime self)"""
        return _gpstk.CivilTime_reset(self)


    def __eq__(self, right):
        """__eq__(CivilTime self, CivilTime right) -> bool"""
        return _gpstk.CivilTime___eq__(self, right)


    def __ne__(self, right):
        """__ne__(CivilTime self, CivilTime right) -> bool"""
        return _gpstk.CivilTime___ne__(self, right)


    def __lt__(self, right):
        """__lt__(CivilTime self, CivilTime right) -> bool"""
        return _gpstk.CivilTime___lt__(self, right)


    def __gt__(self, right):
        """__gt__(CivilTime self, CivilTime right) -> bool"""
        return _gpstk.CivilTime___gt__(self, right)


    def __le__(self, right):
        """__le__(CivilTime self, CivilTime right) -> bool"""
        return _gpstk.CivilTime___le__(self, right)


    def __ge__(self, right):
        """__ge__(CivilTime self, CivilTime right) -> bool"""
        return _gpstk.CivilTime___ge__(self, right)

    __swig_setmethods__["year"] = _gpstk.CivilTime_year_set
    __swig_getmethods__["year"] = _gpstk.CivilTime_year_get
    if _newclass:
        year = _swig_property(_gpstk.CivilTime_year_get, _gpstk.CivilTime_year_set)
    __swig_setmethods__["month"] = _gpstk.CivilTime_month_set
    __swig_getmethods__["month"] = _gpstk.CivilTime_month_get
    if _newclass:
        month = _swig_property(_gpstk.CivilTime_month_get, _gpstk.CivilTime_month_set)
    __swig_setmethods__["day"] = _gpstk.CivilTime_day_set
    __swig_getmethods__["day"] = _gpstk.CivilTime_day_get
    if _newclass:
        day = _swig_property(_gpstk.CivilTime_day_get, _gpstk.CivilTime_day_set)
    __swig_setmethods__["hour"] = _gpstk.CivilTime_hour_set
    __swig_getmethods__["hour"] = _gpstk.CivilTime_hour_get
    if _newclass:
        hour = _swig_property(_gpstk.CivilTime_hour_get, _gpstk.CivilTime_hour_set)
    __swig_setmethods__["minute"] = _gpstk.CivilTime_minute_set
    __swig_getmethods__["minute"] = _gpstk.CivilTime_minute_get
    if _newclass:
        minute = _swig_property(_gpstk.CivilTime_minute_get, _gpstk.CivilTime_minute_set)
    __swig_setmethods__["second"] = _gpstk.CivilTime_second_set
    __swig_getmethods__["second"] = _gpstk.CivilTime_second_get
    if _newclass:
        second = _swig_property(_gpstk.CivilTime_second_get, _gpstk.CivilTime_second_set)
CivilTime_swigregister = _gpstk.CivilTime_swigregister
CivilTime_swigregister(CivilTime)

class GPSZcount(_object):
    """Proxy of C++ gpstk::GPSZcount class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPSZcount, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GPSZcount, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_GPSZcount
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(gpstk::GPSZcount self, short inWeek, long inZcount) -> GPSZcount
        __init__(gpstk::GPSZcount self, long inFullZcount=0) -> GPSZcount
        __init__(gpstk::GPSZcount self) -> GPSZcount
        __init__(gpstk::GPSZcount self, GPSZcount right) -> GPSZcount
        """
        this = _gpstk.new_GPSZcount(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getWeek(self):
        """getWeek(GPSZcount self) -> short"""
        return _gpstk.GPSZcount_getWeek(self)


    def getZcount(self):
        """getZcount(GPSZcount self) -> long"""
        return _gpstk.GPSZcount_getZcount(self)


    def getFullZcount(self):
        """getFullZcount(GPSZcount self) -> long"""
        return _gpstk.GPSZcount_getFullZcount(self)


    def getTotalZcounts(self):
        """getTotalZcounts(GPSZcount self) -> double"""
        return _gpstk.GPSZcount_getTotalZcounts(self)


    def setWeek(self, inWeek):
        """setWeek(GPSZcount self, short inWeek) -> GPSZcount"""
        return _gpstk.GPSZcount_setWeek(self, inWeek)


    def setZcount(self, inZcount):
        """setZcount(GPSZcount self, long inZcount) -> GPSZcount"""
        return _gpstk.GPSZcount_setZcount(self, inZcount)


    def setFullZcount(self, inZcount):
        """setFullZcount(GPSZcount self, long inZcount) -> GPSZcount"""
        return _gpstk.GPSZcount_setFullZcount(self, inZcount)


    def addWeeks(self, inWeeks):
        """addWeeks(GPSZcount self, short inWeeks) -> GPSZcount"""
        return _gpstk.GPSZcount_addWeeks(self, inWeeks)


    def addZcounts(self, inZcounts):
        """addZcounts(GPSZcount self, long inZcounts) -> GPSZcount"""
        return _gpstk.GPSZcount_addZcounts(self, inZcounts)


    def __add__(self, inZcounts):
        """__add__(GPSZcount self, long inZcounts) -> GPSZcount"""
        return _gpstk.GPSZcount___add__(self, inZcounts)


    def __sub__(self, *args):
        """
        __sub__(GPSZcount self, long inZcounts) -> GPSZcount
        __sub__(GPSZcount self, GPSZcount right) -> double
        """
        return _gpstk.GPSZcount___sub__(self, *args)


    def __mod__(self, right):
        """__mod__(GPSZcount self, long const right) -> long"""
        return _gpstk.GPSZcount___mod__(self, right)


    def __iadd__(self, inZcounts):
        """__iadd__(GPSZcount self, long inZcounts) -> GPSZcount"""
        return _gpstk.GPSZcount___iadd__(self, inZcounts)


    def __isub__(self, inZcounts):
        """__isub__(GPSZcount self, long inZcounts) -> GPSZcount"""
        return _gpstk.GPSZcount___isub__(self, inZcounts)


    def __lt__(self, right):
        """__lt__(GPSZcount self, GPSZcount right) -> bool"""
        return _gpstk.GPSZcount___lt__(self, right)


    def __gt__(self, right):
        """__gt__(GPSZcount self, GPSZcount right) -> bool"""
        return _gpstk.GPSZcount___gt__(self, right)


    def __eq__(self, right):
        """__eq__(GPSZcount self, GPSZcount right) -> bool"""
        return _gpstk.GPSZcount___eq__(self, right)


    def __ne__(self, right):
        """__ne__(GPSZcount self, GPSZcount right) -> bool"""
        return _gpstk.GPSZcount___ne__(self, right)


    def __le__(self, right):
        """__le__(GPSZcount self, GPSZcount right) -> bool"""
        return _gpstk.GPSZcount___le__(self, right)


    def __ge__(self, right):
        """__ge__(GPSZcount self, GPSZcount right) -> bool"""
        return _gpstk.GPSZcount___ge__(self, right)


    def toString(self):
        """toString(GPSZcount self) -> std::string"""
        return _gpstk.GPSZcount_toString(self)


    def inSameTimeBlock(self, other, inZcountBlock, inZcountOffset=0):
        """
        inSameTimeBlock(GPSZcount self, GPSZcount other, unsigned long inZcountBlock, unsigned long inZcountOffset=0) -> bool
        inSameTimeBlock(GPSZcount self, GPSZcount other, unsigned long inZcountBlock) -> bool
        """
        return _gpstk.GPSZcount_inSameTimeBlock(self, other, inZcountBlock, inZcountOffset)


    def __str__(self):
        """__str__(GPSZcount self) -> std::string"""
        return _gpstk.GPSZcount___str__(self)

GPSZcount_swigregister = _gpstk.GPSZcount_swigregister
GPSZcount_swigregister(GPSZcount)
GPSZcount.ZCOUNT_MINUTE = _gpstk.cvar.GPSZcount_ZCOUNT_MINUTE
GPSZcount.ZCOUNT_HOUR = _gpstk.cvar.GPSZcount_ZCOUNT_HOUR
GPSZcount.ZCOUNT_DAY = _gpstk.cvar.GPSZcount_ZCOUNT_DAY
GPSZcount.ZCOUNT_WEEK = _gpstk.cvar.GPSZcount_ZCOUNT_WEEK

class GPSWeek(TimeTag):
    """Proxy of C++ gpstk::GPSWeek class"""
    __swig_setmethods__ = {}
    for _s in [TimeTag]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPSWeek, name, value)
    __swig_getmethods__ = {}
    for _s in [TimeTag]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GPSWeek, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    bits10 = _gpstk.GPSWeek_bits10
    __swig_destroy__ = _gpstk.delete_GPSWeek
    __del__ = lambda self: None

    def __eq__(self, right):
        """__eq__(GPSWeek self, GPSWeek right) -> bool"""
        return _gpstk.GPSWeek___eq__(self, right)


    def __ne__(self, right):
        """__ne__(GPSWeek self, GPSWeek right) -> bool"""
        return _gpstk.GPSWeek___ne__(self, right)


    def __lt__(self, right):
        """__lt__(GPSWeek self, GPSWeek right) -> bool"""
        return _gpstk.GPSWeek___lt__(self, right)


    def __le__(self, right):
        """__le__(GPSWeek self, GPSWeek right) -> bool"""
        return _gpstk.GPSWeek___le__(self, right)


    def __gt__(self, right):
        """__gt__(GPSWeek self, GPSWeek right) -> bool"""
        return _gpstk.GPSWeek___gt__(self, right)


    def __ge__(self, right):
        """__ge__(GPSWeek self, GPSWeek right) -> bool"""
        return _gpstk.GPSWeek___ge__(self, right)


    def getEpoch(self):
        """getEpoch(GPSWeek self) -> unsigned int"""
        return _gpstk.GPSWeek_getEpoch(self)


    def getWeek10(self):
        """getWeek10(GPSWeek self) -> unsigned int"""
        return _gpstk.GPSWeek_getWeek10(self)


    def getEpochWeek10(self, e, w):
        """getEpochWeek10(GPSWeek self, unsigned int & e, unsigned int & w)"""
        return _gpstk.GPSWeek_getEpochWeek10(self, e, w)


    def setEpoch(self, e):
        """setEpoch(GPSWeek self, unsigned int e)"""
        return _gpstk.GPSWeek_setEpoch(self, e)


    def setWeek10(self, w):
        """setWeek10(GPSWeek self, unsigned int w)"""
        return _gpstk.GPSWeek_setWeek10(self, w)


    def setEpochWeek10(self, e, w):
        """setEpochWeek10(GPSWeek self, unsigned int e, unsigned int w)"""
        return _gpstk.GPSWeek_setEpochWeek10(self, e, w)


    def printf(self, fmt):
        """printf(GPSWeek self, std::string const & fmt) -> std::string"""
        return _gpstk.GPSWeek_printf(self, fmt)


    def printError(self, fmt):
        """printError(GPSWeek self, std::string const & fmt) -> std::string"""
        return _gpstk.GPSWeek_printError(self, fmt)


    def setFromInfo(self, info):
        """setFromInfo(GPSWeek self, map_char_string info) -> bool"""
        return _gpstk.GPSWeek_setFromInfo(self, info)


    def getPrintChars(self):
        """getPrintChars(GPSWeek self) -> std::string"""
        return _gpstk.GPSWeek_getPrintChars(self)


    def getDefaultFormat(self):
        """getDefaultFormat(GPSWeek self) -> std::string"""
        return _gpstk.GPSWeek_getDefaultFormat(self)


    def isValid(self):
        """isValid(GPSWeek self) -> bool"""
        return _gpstk.GPSWeek_isValid(self)


    def reset(self):
        """reset(GPSWeek self)"""
        return _gpstk.GPSWeek_reset(self)


    def getDayOfWeek(self):
        """getDayOfWeek(GPSWeek self) -> unsigned int"""
        return _gpstk.GPSWeek_getDayOfWeek(self)

    __swig_setmethods__["week"] = _gpstk.GPSWeek_week_set
    __swig_getmethods__["week"] = _gpstk.GPSWeek_week_get
    if _newclass:
        week = _swig_property(_gpstk.GPSWeek_week_get, _gpstk.GPSWeek_week_set)
GPSWeek_swigregister = _gpstk.GPSWeek_swigregister
GPSWeek_swigregister(GPSWeek)
GPSWeek.MAX_WEEK = _gpstk.cvar.GPSWeek_MAX_WEEK

class GPSWeekSecond(WeekSecond):
    """Proxy of C++ gpstk::GPSWeekSecond class"""
    __swig_setmethods__ = {}
    for _s in [WeekSecond]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPSWeekSecond, name, value)
    __swig_getmethods__ = {}
    for _s in [WeekSecond]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GPSWeekSecond, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::GPSWeekSecond self, unsigned int w=0, double s=0., TimeSystem ts) -> GPSWeekSecond
        __init__(gpstk::GPSWeekSecond self, unsigned int w=0, double s=0.) -> GPSWeekSecond
        __init__(gpstk::GPSWeekSecond self, unsigned int w=0) -> GPSWeekSecond
        __init__(gpstk::GPSWeekSecond self) -> GPSWeekSecond
        __init__(gpstk::GPSWeekSecond self, CommonTime right) -> GPSWeekSecond
        """
        this = _gpstk.new_GPSWeekSecond(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_GPSWeekSecond
    __del__ = lambda self: None

    def Nbits(self):
        """Nbits(GPSWeekSecond self) -> int"""
        return _gpstk.GPSWeekSecond_Nbits(self)


    def bitmask(self):
        """bitmask(GPSWeekSecond self) -> int"""
        return _gpstk.GPSWeekSecond_bitmask(self)


    def MJDEpoch(self):
        """MJDEpoch(GPSWeekSecond self) -> long"""
        return _gpstk.GPSWeekSecond_MJDEpoch(self)


    def getPrintChars(self):
        """getPrintChars(GPSWeekSecond self) -> std::string"""
        return _gpstk.GPSWeekSecond_getPrintChars(self)


    def getDefaultFormat(self):
        """getDefaultFormat(GPSWeekSecond self) -> std::string"""
        return _gpstk.GPSWeekSecond_getDefaultFormat(self)


    def printf(self, fmt):
        """printf(GPSWeekSecond self, std::string const & fmt) -> std::string"""
        return _gpstk.GPSWeekSecond_printf(self, fmt)


    def printError(self, fmt):
        """printError(GPSWeekSecond self, std::string const & fmt) -> std::string"""
        return _gpstk.GPSWeekSecond_printError(self, fmt)


    def setFromInfo(self, info):
        """setFromInfo(GPSWeekSecond self, map_char_string info) -> bool"""
        return _gpstk.GPSWeekSecond_setFromInfo(self, info)

GPSWeekSecond_swigregister = _gpstk.GPSWeekSecond_swigregister
GPSWeekSecond_swigregister(GPSWeekSecond)

class GPSWeekZcount(GPSWeek):
    """Proxy of C++ gpstk::GPSWeekZcount class"""
    __swig_setmethods__ = {}
    for _s in [GPSWeek]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPSWeekZcount, name, value)
    __swig_getmethods__ = {}
    for _s in [GPSWeek]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GPSWeekZcount, name)
    __repr__ = _swig_repr
    bits19 = _gpstk.GPSWeekZcount_bits19

    def __init__(self, *args):
        """
        __init__(gpstk::GPSWeekZcount self, int w=0, int z=0, TimeSystem ts) -> GPSWeekZcount
        __init__(gpstk::GPSWeekZcount self, int w=0, int z=0) -> GPSWeekZcount
        __init__(gpstk::GPSWeekZcount self, int w=0) -> GPSWeekZcount
        __init__(gpstk::GPSWeekZcount self) -> GPSWeekZcount
        __init__(gpstk::GPSWeekZcount self, GPSWeekZcount right) -> GPSWeekZcount
        __init__(gpstk::GPSWeekZcount self, TimeTag right) -> GPSWeekZcount
        __init__(gpstk::GPSWeekZcount self, CommonTime right) -> GPSWeekZcount
        """
        this = _gpstk.new_GPSWeekZcount(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_GPSWeekZcount
    __del__ = lambda self: None

    def toCommonTime(self):
        """toCommonTime(GPSWeekZcount self) -> CommonTime"""
        return _gpstk.GPSWeekZcount_toCommonTime(self)


    def convertFromCommonTime(self, ct):
        """convertFromCommonTime(GPSWeekZcount self, CommonTime ct)"""
        return _gpstk.GPSWeekZcount_convertFromCommonTime(self, ct)


    def printf(self, fmt):
        """printf(GPSWeekZcount self, std::string const & fmt) -> std::string"""
        return _gpstk.GPSWeekZcount_printf(self, fmt)


    def printError(self, fmt):
        """printError(GPSWeekZcount self, std::string const & fmt) -> std::string"""
        return _gpstk.GPSWeekZcount_printError(self, fmt)


    def setFromInfo(self, info):
        """setFromInfo(GPSWeekZcount self, map_char_string info) -> bool"""
        return _gpstk.GPSWeekZcount_setFromInfo(self, info)


    def getPrintChars(self):
        """getPrintChars(GPSWeekZcount self) -> std::string"""
        return _gpstk.GPSWeekZcount_getPrintChars(self)


    def getDefaultFormat(self):
        """getDefaultFormat(GPSWeekZcount self) -> std::string"""
        return _gpstk.GPSWeekZcount_getDefaultFormat(self)


    def isValid(self):
        """isValid(GPSWeekZcount self) -> bool"""
        return _gpstk.GPSWeekZcount_isValid(self)


    def reset(self):
        """reset(GPSWeekZcount self)"""
        return _gpstk.GPSWeekZcount_reset(self)


    def getZcount29(self):
        """getZcount29(GPSWeekZcount self) -> unsigned int"""
        return _gpstk.GPSWeekZcount_getZcount29(self)


    def getZcount32(self):
        """getZcount32(GPSWeekZcount self) -> unsigned int"""
        return _gpstk.GPSWeekZcount_getZcount32(self)


    def setZcount29(self, z):
        """setZcount29(GPSWeekZcount self, unsigned int z) -> GPSWeekZcount"""
        return _gpstk.GPSWeekZcount_setZcount29(self, z)


    def setZcount32(self, z):
        """setZcount32(GPSWeekZcount self, unsigned int z) -> GPSWeekZcount"""
        return _gpstk.GPSWeekZcount_setZcount32(self, z)


    def getDayOfWeek(self):
        """getDayOfWeek(GPSWeekZcount self) -> unsigned int"""
        return _gpstk.GPSWeekZcount_getDayOfWeek(self)


    def __eq__(self, right):
        """__eq__(GPSWeekZcount self, GPSWeekZcount right) -> bool"""
        return _gpstk.GPSWeekZcount___eq__(self, right)


    def __ne__(self, right):
        """__ne__(GPSWeekZcount self, GPSWeekZcount right) -> bool"""
        return _gpstk.GPSWeekZcount___ne__(self, right)


    def __lt__(self, right):
        """__lt__(GPSWeekZcount self, GPSWeekZcount right) -> bool"""
        return _gpstk.GPSWeekZcount___lt__(self, right)


    def __gt__(self, right):
        """__gt__(GPSWeekZcount self, GPSWeekZcount right) -> bool"""
        return _gpstk.GPSWeekZcount___gt__(self, right)


    def __le__(self, right):
        """__le__(GPSWeekZcount self, GPSWeekZcount right) -> bool"""
        return _gpstk.GPSWeekZcount___le__(self, right)


    def __ge__(self, right):
        """__ge__(GPSWeekZcount self, GPSWeekZcount right) -> bool"""
        return _gpstk.GPSWeekZcount___ge__(self, right)

    __swig_setmethods__["zcount"] = _gpstk.GPSWeekZcount_zcount_set
    __swig_getmethods__["zcount"] = _gpstk.GPSWeekZcount_zcount_get
    if _newclass:
        zcount = _swig_property(_gpstk.GPSWeekZcount_zcount_get, _gpstk.GPSWeekZcount_zcount_set)
GPSWeekZcount_swigregister = _gpstk.GPSWeekZcount_swigregister
GPSWeekZcount_swigregister(GPSWeekZcount)

class JulianDate(TimeTag):
    """Proxy of C++ gpstk::JulianDate class"""
    __swig_setmethods__ = {}
    for _s in [TimeTag]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JulianDate, name, value)
    __swig_getmethods__ = {}
    for _s in [TimeTag]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, JulianDate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::JulianDate self, long double j=0., TimeSystem ts) -> JulianDate
        __init__(gpstk::JulianDate self, long double j=0.) -> JulianDate
        __init__(gpstk::JulianDate self) -> JulianDate
        __init__(gpstk::JulianDate self, JulianDate right) -> JulianDate
        __init__(gpstk::JulianDate self, TimeTag right) -> JulianDate
        __init__(gpstk::JulianDate self, CommonTime right) -> JulianDate
        """
        this = _gpstk.new_JulianDate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_JulianDate
    __del__ = lambda self: None

    def toCommonTime(self):
        """toCommonTime(JulianDate self) -> CommonTime"""
        return _gpstk.JulianDate_toCommonTime(self)


    def convertFromCommonTime(self, ct):
        """convertFromCommonTime(JulianDate self, CommonTime ct)"""
        return _gpstk.JulianDate_convertFromCommonTime(self, ct)


    def printf(self, fmt):
        """printf(JulianDate self, std::string const & fmt) -> std::string"""
        return _gpstk.JulianDate_printf(self, fmt)


    def printError(self, fmt):
        """printError(JulianDate self, std::string const & fmt) -> std::string"""
        return _gpstk.JulianDate_printError(self, fmt)


    def setFromInfo(self, info):
        """setFromInfo(JulianDate self, map_char_string info) -> bool"""
        return _gpstk.JulianDate_setFromInfo(self, info)


    def getPrintChars(self):
        """getPrintChars(JulianDate self) -> std::string"""
        return _gpstk.JulianDate_getPrintChars(self)


    def getDefaultFormat(self):
        """getDefaultFormat(JulianDate self) -> std::string"""
        return _gpstk.JulianDate_getDefaultFormat(self)


    def isValid(self):
        """isValid(JulianDate self) -> bool"""
        return _gpstk.JulianDate_isValid(self)


    def reset(self):
        """reset(JulianDate self)"""
        return _gpstk.JulianDate_reset(self)


    def __eq__(self, right):
        """__eq__(JulianDate self, JulianDate right) -> bool"""
        return _gpstk.JulianDate___eq__(self, right)


    def __ne__(self, right):
        """__ne__(JulianDate self, JulianDate right) -> bool"""
        return _gpstk.JulianDate___ne__(self, right)


    def __lt__(self, right):
        """__lt__(JulianDate self, JulianDate right) -> bool"""
        return _gpstk.JulianDate___lt__(self, right)


    def __gt__(self, right):
        """__gt__(JulianDate self, JulianDate right) -> bool"""
        return _gpstk.JulianDate___gt__(self, right)


    def __le__(self, right):
        """__le__(JulianDate self, JulianDate right) -> bool"""
        return _gpstk.JulianDate___le__(self, right)


    def __ge__(self, right):
        """__ge__(JulianDate self, JulianDate right) -> bool"""
        return _gpstk.JulianDate___ge__(self, right)

    __swig_setmethods__["jd"] = _gpstk.JulianDate_jd_set
    __swig_getmethods__["jd"] = _gpstk.JulianDate_jd_get
    if _newclass:
        jd = _swig_property(_gpstk.JulianDate_jd_get, _gpstk.JulianDate_jd_set)
JulianDate_swigregister = _gpstk.JulianDate_swigregister
JulianDate_swigregister(JulianDate)

class BDSWeekSecond(WeekSecond):
    """Proxy of C++ gpstk::BDSWeekSecond class"""
    __swig_setmethods__ = {}
    for _s in [WeekSecond]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BDSWeekSecond, name, value)
    __swig_getmethods__ = {}
    for _s in [WeekSecond]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BDSWeekSecond, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::BDSWeekSecond self, unsigned int w=0, double s=0., TimeSystem ts) -> BDSWeekSecond
        __init__(gpstk::BDSWeekSecond self, unsigned int w=0, double s=0.) -> BDSWeekSecond
        __init__(gpstk::BDSWeekSecond self, unsigned int w=0) -> BDSWeekSecond
        __init__(gpstk::BDSWeekSecond self) -> BDSWeekSecond
        __init__(gpstk::BDSWeekSecond self, CommonTime right) -> BDSWeekSecond
        """
        this = _gpstk.new_BDSWeekSecond(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_BDSWeekSecond
    __del__ = lambda self: None

    def Nbits(self):
        """Nbits(BDSWeekSecond self) -> int"""
        return _gpstk.BDSWeekSecond_Nbits(self)


    def bitmask(self):
        """bitmask(BDSWeekSecond self) -> int"""
        return _gpstk.BDSWeekSecond_bitmask(self)


    def MJDEpoch(self):
        """MJDEpoch(BDSWeekSecond self) -> long"""
        return _gpstk.BDSWeekSecond_MJDEpoch(self)


    def getPrintChars(self):
        """getPrintChars(BDSWeekSecond self) -> std::string"""
        return _gpstk.BDSWeekSecond_getPrintChars(self)


    def getDefaultFormat(self):
        """getDefaultFormat(BDSWeekSecond self) -> std::string"""
        return _gpstk.BDSWeekSecond_getDefaultFormat(self)


    def printf(self, fmt):
        """printf(BDSWeekSecond self, std::string const & fmt) -> std::string"""
        return _gpstk.BDSWeekSecond_printf(self, fmt)


    def printError(self, fmt):
        """printError(BDSWeekSecond self, std::string const & fmt) -> std::string"""
        return _gpstk.BDSWeekSecond_printError(self, fmt)


    def setFromInfo(self, info):
        """setFromInfo(BDSWeekSecond self, map_char_string info) -> bool"""
        return _gpstk.BDSWeekSecond_setFromInfo(self, info)

BDSWeekSecond_swigregister = _gpstk.BDSWeekSecond_swigregister
BDSWeekSecond_swigregister(BDSWeekSecond)

class GALWeekSecond(WeekSecond):
    """Proxy of C++ gpstk::GALWeekSecond class"""
    __swig_setmethods__ = {}
    for _s in [WeekSecond]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GALWeekSecond, name, value)
    __swig_getmethods__ = {}
    for _s in [WeekSecond]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GALWeekSecond, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::GALWeekSecond self, unsigned int w=0, double s=0., TimeSystem ts) -> GALWeekSecond
        __init__(gpstk::GALWeekSecond self, unsigned int w=0, double s=0.) -> GALWeekSecond
        __init__(gpstk::GALWeekSecond self, unsigned int w=0) -> GALWeekSecond
        __init__(gpstk::GALWeekSecond self) -> GALWeekSecond
        __init__(gpstk::GALWeekSecond self, CommonTime right) -> GALWeekSecond
        """
        this = _gpstk.new_GALWeekSecond(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_GALWeekSecond
    __del__ = lambda self: None

    def Nbits(self):
        """Nbits(GALWeekSecond self) -> int"""
        return _gpstk.GALWeekSecond_Nbits(self)


    def bitmask(self):
        """bitmask(GALWeekSecond self) -> int"""
        return _gpstk.GALWeekSecond_bitmask(self)


    def MJDEpoch(self):
        """MJDEpoch(GALWeekSecond self) -> long"""
        return _gpstk.GALWeekSecond_MJDEpoch(self)


    def getPrintChars(self):
        """getPrintChars(GALWeekSecond self) -> std::string"""
        return _gpstk.GALWeekSecond_getPrintChars(self)


    def getDefaultFormat(self):
        """getDefaultFormat(GALWeekSecond self) -> std::string"""
        return _gpstk.GALWeekSecond_getDefaultFormat(self)


    def printf(self, fmt):
        """printf(GALWeekSecond self, std::string const & fmt) -> std::string"""
        return _gpstk.GALWeekSecond_printf(self, fmt)


    def printError(self, fmt):
        """printError(GALWeekSecond self, std::string const & fmt) -> std::string"""
        return _gpstk.GALWeekSecond_printError(self, fmt)


    def setFromInfo(self, info):
        """setFromInfo(GALWeekSecond self, map_char_string info) -> bool"""
        return _gpstk.GALWeekSecond_setFromInfo(self, info)

GALWeekSecond_swigregister = _gpstk.GALWeekSecond_swigregister
GALWeekSecond_swigregister(GALWeekSecond)

class QZSWeekSecond(WeekSecond):
    """Proxy of C++ gpstk::QZSWeekSecond class"""
    __swig_setmethods__ = {}
    for _s in [WeekSecond]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QZSWeekSecond, name, value)
    __swig_getmethods__ = {}
    for _s in [WeekSecond]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QZSWeekSecond, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::QZSWeekSecond self, unsigned int w=0, double s=0., TimeSystem ts) -> QZSWeekSecond
        __init__(gpstk::QZSWeekSecond self, unsigned int w=0, double s=0.) -> QZSWeekSecond
        __init__(gpstk::QZSWeekSecond self, unsigned int w=0) -> QZSWeekSecond
        __init__(gpstk::QZSWeekSecond self) -> QZSWeekSecond
        __init__(gpstk::QZSWeekSecond self, CommonTime right) -> QZSWeekSecond
        """
        this = _gpstk.new_QZSWeekSecond(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_QZSWeekSecond
    __del__ = lambda self: None

    def Nbits(self):
        """Nbits(QZSWeekSecond self) -> int"""
        return _gpstk.QZSWeekSecond_Nbits(self)


    def bitmask(self):
        """bitmask(QZSWeekSecond self) -> int"""
        return _gpstk.QZSWeekSecond_bitmask(self)


    def MJDEpoch(self):
        """MJDEpoch(QZSWeekSecond self) -> long"""
        return _gpstk.QZSWeekSecond_MJDEpoch(self)


    def getPrintChars(self):
        """getPrintChars(QZSWeekSecond self) -> std::string"""
        return _gpstk.QZSWeekSecond_getPrintChars(self)


    def getDefaultFormat(self):
        """getDefaultFormat(QZSWeekSecond self) -> std::string"""
        return _gpstk.QZSWeekSecond_getDefaultFormat(self)


    def printf(self, fmt):
        """printf(QZSWeekSecond self, std::string const & fmt) -> std::string"""
        return _gpstk.QZSWeekSecond_printf(self, fmt)


    def printError(self, fmt):
        """printError(QZSWeekSecond self, std::string const & fmt) -> std::string"""
        return _gpstk.QZSWeekSecond_printError(self, fmt)


    def setFromInfo(self, info):
        """setFromInfo(QZSWeekSecond self, map_char_string info) -> bool"""
        return _gpstk.QZSWeekSecond_setFromInfo(self, info)

QZSWeekSecond_swigregister = _gpstk.QZSWeekSecond_swigregister
QZSWeekSecond_swigregister(QZSWeekSecond)

class MJD(TimeTag):
    """Proxy of C++ gpstk::MJD class"""
    __swig_setmethods__ = {}
    for _s in [TimeTag]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MJD, name, value)
    __swig_getmethods__ = {}
    for _s in [TimeTag]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MJD, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::MJD self, long double m=0., TimeSystem ts) -> MJD
        __init__(gpstk::MJD self, long double m=0.) -> MJD
        __init__(gpstk::MJD self) -> MJD
        __init__(gpstk::MJD self, MJD right) -> MJD
        __init__(gpstk::MJD self, TimeTag right) -> MJD
        __init__(gpstk::MJD self, CommonTime right) -> MJD
        """
        this = _gpstk.new_MJD(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_MJD
    __del__ = lambda self: None

    def toCommonTime(self):
        """toCommonTime(MJD self) -> CommonTime"""
        return _gpstk.MJD_toCommonTime(self)


    def convertFromCommonTime(self, ct):
        """convertFromCommonTime(MJD self, CommonTime ct)"""
        return _gpstk.MJD_convertFromCommonTime(self, ct)


    def printf(self, fmt):
        """printf(MJD self, std::string const & fmt) -> std::string"""
        return _gpstk.MJD_printf(self, fmt)


    def printError(self, fmt):
        """printError(MJD self, std::string const & fmt) -> std::string"""
        return _gpstk.MJD_printError(self, fmt)


    def setFromInfo(self, info):
        """setFromInfo(MJD self, map_char_string info) -> bool"""
        return _gpstk.MJD_setFromInfo(self, info)


    def getPrintChars(self):
        """getPrintChars(MJD self) -> std::string"""
        return _gpstk.MJD_getPrintChars(self)


    def getDefaultFormat(self):
        """getDefaultFormat(MJD self) -> std::string"""
        return _gpstk.MJD_getDefaultFormat(self)


    def isValid(self):
        """isValid(MJD self) -> bool"""
        return _gpstk.MJD_isValid(self)


    def reset(self):
        """reset(MJD self)"""
        return _gpstk.MJD_reset(self)


    def __eq__(self, right):
        """__eq__(MJD self, MJD right) -> bool"""
        return _gpstk.MJD___eq__(self, right)


    def __ne__(self, right):
        """__ne__(MJD self, MJD right) -> bool"""
        return _gpstk.MJD___ne__(self, right)


    def __lt__(self, right):
        """__lt__(MJD self, MJD right) -> bool"""
        return _gpstk.MJD___lt__(self, right)


    def __gt__(self, right):
        """__gt__(MJD self, MJD right) -> bool"""
        return _gpstk.MJD___gt__(self, right)


    def __le__(self, right):
        """__le__(MJD self, MJD right) -> bool"""
        return _gpstk.MJD___le__(self, right)


    def __ge__(self, right):
        """__ge__(MJD self, MJD right) -> bool"""
        return _gpstk.MJD___ge__(self, right)

    __swig_setmethods__["mjd"] = _gpstk.MJD_mjd_set
    __swig_getmethods__["mjd"] = _gpstk.MJD_mjd_get
    if _newclass:
        mjd = _swig_property(_gpstk.MJD_mjd_get, _gpstk.MJD_mjd_set)
MJD_swigregister = _gpstk.MJD_swigregister
MJD_swigregister(MJD)

class YDSTime(TimeTag):
    """Proxy of C++ gpstk::YDSTime class"""
    __swig_setmethods__ = {}
    for _s in [TimeTag]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YDSTime, name, value)
    __swig_getmethods__ = {}
    for _s in [TimeTag]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YDSTime, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::YDSTime self, long y=0, long d=0, double s=0., TimeSystem ts) -> YDSTime
        __init__(gpstk::YDSTime self, long y=0, long d=0, double s=0.) -> YDSTime
        __init__(gpstk::YDSTime self, long y=0, long d=0) -> YDSTime
        __init__(gpstk::YDSTime self, long y=0) -> YDSTime
        __init__(gpstk::YDSTime self) -> YDSTime
        __init__(gpstk::YDSTime self, YDSTime right) -> YDSTime
        __init__(gpstk::YDSTime self, TimeTag right) -> YDSTime
        __init__(gpstk::YDSTime self, CommonTime right) -> YDSTime
        """
        this = _gpstk.new_YDSTime(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_YDSTime
    __del__ = lambda self: None

    def toCommonTime(self):
        """toCommonTime(YDSTime self) -> CommonTime"""
        return _gpstk.YDSTime_toCommonTime(self)


    def convertFromCommonTime(self, ct):
        """convertFromCommonTime(YDSTime self, CommonTime ct)"""
        return _gpstk.YDSTime_convertFromCommonTime(self, ct)


    def printf(self, fmt):
        """printf(YDSTime self, std::string const & fmt) -> std::string"""
        return _gpstk.YDSTime_printf(self, fmt)


    def printError(self, fmt):
        """printError(YDSTime self, std::string const & fmt) -> std::string"""
        return _gpstk.YDSTime_printError(self, fmt)


    def setFromInfo(self, info):
        """setFromInfo(YDSTime self, map_char_string info) -> bool"""
        return _gpstk.YDSTime_setFromInfo(self, info)


    def getPrintChars(self):
        """getPrintChars(YDSTime self) -> std::string"""
        return _gpstk.YDSTime_getPrintChars(self)


    def getDefaultFormat(self):
        """getDefaultFormat(YDSTime self) -> std::string"""
        return _gpstk.YDSTime_getDefaultFormat(self)


    def isValid(self):
        """isValid(YDSTime self) -> bool"""
        return _gpstk.YDSTime_isValid(self)


    def reset(self):
        """reset(YDSTime self)"""
        return _gpstk.YDSTime_reset(self)


    def __eq__(self, right):
        """__eq__(YDSTime self, YDSTime right) -> bool"""
        return _gpstk.YDSTime___eq__(self, right)


    def __ne__(self, right):
        """__ne__(YDSTime self, YDSTime right) -> bool"""
        return _gpstk.YDSTime___ne__(self, right)


    def __lt__(self, right):
        """__lt__(YDSTime self, YDSTime right) -> bool"""
        return _gpstk.YDSTime___lt__(self, right)


    def __gt__(self, right):
        """__gt__(YDSTime self, YDSTime right) -> bool"""
        return _gpstk.YDSTime___gt__(self, right)


    def __le__(self, right):
        """__le__(YDSTime self, YDSTime right) -> bool"""
        return _gpstk.YDSTime___le__(self, right)


    def __ge__(self, right):
        """__ge__(YDSTime self, YDSTime right) -> bool"""
        return _gpstk.YDSTime___ge__(self, right)

    __swig_setmethods__["year"] = _gpstk.YDSTime_year_set
    __swig_getmethods__["year"] = _gpstk.YDSTime_year_get
    if _newclass:
        year = _swig_property(_gpstk.YDSTime_year_get, _gpstk.YDSTime_year_set)
    __swig_setmethods__["doy"] = _gpstk.YDSTime_doy_set
    __swig_getmethods__["doy"] = _gpstk.YDSTime_doy_get
    if _newclass:
        doy = _swig_property(_gpstk.YDSTime_doy_get, _gpstk.YDSTime_doy_set)
    __swig_setmethods__["sod"] = _gpstk.YDSTime_sod_set
    __swig_getmethods__["sod"] = _gpstk.YDSTime_sod_get
    if _newclass:
        sod = _swig_property(_gpstk.YDSTime_sod_get, _gpstk.YDSTime_sod_set)
YDSTime_swigregister = _gpstk.YDSTime_swigregister
YDSTime_swigregister(YDSTime)
YDSTime.BEGIN_TIME = _gpstk.cvar.YDSTime_BEGIN_TIME


def printTime(t, fmt):
    """printTime(CommonTime t, std::string const & fmt) -> std::string"""
    return _gpstk.printTime(t, fmt)

def scanTime(str, fmt):
    """scanTime(std::string const & str, std::string const & fmt) -> CommonTime"""
    return _gpstk.scanTime(str, fmt)

def mixedScanTime(str, fmt):
    """mixedScanTime(std::string const & str, std::string const & fmt) -> CommonTime"""
    return _gpstk.mixedScanTime(str, fmt)
class TimeSystemCorrection(_object):
    """Proxy of C++ gpstk::TimeSystemCorrection class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeSystemCorrection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeSystemCorrection, name)
    __repr__ = _swig_repr
    Unknown = _gpstk.TimeSystemCorrection_Unknown
    GPUT = _gpstk.TimeSystemCorrection_GPUT
    GAUT = _gpstk.TimeSystemCorrection_GAUT
    SBUT = _gpstk.TimeSystemCorrection_SBUT
    GLUT = _gpstk.TimeSystemCorrection_GLUT
    GPGA = _gpstk.TimeSystemCorrection_GPGA
    GLGP = _gpstk.TimeSystemCorrection_GLGP
    QZGP = _gpstk.TimeSystemCorrection_QZGP
    QZUT = _gpstk.TimeSystemCorrection_QZUT
    BDUT = _gpstk.TimeSystemCorrection_BDUT
    BDGP = _gpstk.TimeSystemCorrection_BDGP
    __swig_setmethods__["type"] = _gpstk.TimeSystemCorrection_type_set
    __swig_getmethods__["type"] = _gpstk.TimeSystemCorrection_type_get
    if _newclass:
        type = _swig_property(_gpstk.TimeSystemCorrection_type_get, _gpstk.TimeSystemCorrection_type_set)
    __swig_setmethods__["frTS"] = _gpstk.TimeSystemCorrection_frTS_set
    __swig_getmethods__["frTS"] = _gpstk.TimeSystemCorrection_frTS_get
    if _newclass:
        frTS = _swig_property(_gpstk.TimeSystemCorrection_frTS_get, _gpstk.TimeSystemCorrection_frTS_set)
    __swig_setmethods__["toTS"] = _gpstk.TimeSystemCorrection_toTS_set
    __swig_getmethods__["toTS"] = _gpstk.TimeSystemCorrection_toTS_get
    if _newclass:
        toTS = _swig_property(_gpstk.TimeSystemCorrection_toTS_get, _gpstk.TimeSystemCorrection_toTS_set)
    __swig_setmethods__["A0"] = _gpstk.TimeSystemCorrection_A0_set
    __swig_getmethods__["A0"] = _gpstk.TimeSystemCorrection_A0_get
    if _newclass:
        A0 = _swig_property(_gpstk.TimeSystemCorrection_A0_get, _gpstk.TimeSystemCorrection_A0_set)
    __swig_setmethods__["A1"] = _gpstk.TimeSystemCorrection_A1_set
    __swig_getmethods__["A1"] = _gpstk.TimeSystemCorrection_A1_get
    if _newclass:
        A1 = _swig_property(_gpstk.TimeSystemCorrection_A1_get, _gpstk.TimeSystemCorrection_A1_set)
    __swig_setmethods__["refWeek"] = _gpstk.TimeSystemCorrection_refWeek_set
    __swig_getmethods__["refWeek"] = _gpstk.TimeSystemCorrection_refWeek_get
    if _newclass:
        refWeek = _swig_property(_gpstk.TimeSystemCorrection_refWeek_get, _gpstk.TimeSystemCorrection_refWeek_set)
    __swig_setmethods__["refSOW"] = _gpstk.TimeSystemCorrection_refSOW_set
    __swig_getmethods__["refSOW"] = _gpstk.TimeSystemCorrection_refSOW_get
    if _newclass:
        refSOW = _swig_property(_gpstk.TimeSystemCorrection_refSOW_get, _gpstk.TimeSystemCorrection_refSOW_set)
    __swig_setmethods__["refYr"] = _gpstk.TimeSystemCorrection_refYr_set
    __swig_getmethods__["refYr"] = _gpstk.TimeSystemCorrection_refYr_get
    if _newclass:
        refYr = _swig_property(_gpstk.TimeSystemCorrection_refYr_get, _gpstk.TimeSystemCorrection_refYr_set)
    __swig_setmethods__["refMon"] = _gpstk.TimeSystemCorrection_refMon_set
    __swig_getmethods__["refMon"] = _gpstk.TimeSystemCorrection_refMon_get
    if _newclass:
        refMon = _swig_property(_gpstk.TimeSystemCorrection_refMon_get, _gpstk.TimeSystemCorrection_refMon_set)
    __swig_setmethods__["refDay"] = _gpstk.TimeSystemCorrection_refDay_set
    __swig_getmethods__["refDay"] = _gpstk.TimeSystemCorrection_refDay_get
    if _newclass:
        refDay = _swig_property(_gpstk.TimeSystemCorrection_refDay_get, _gpstk.TimeSystemCorrection_refDay_set)
    __swig_setmethods__["geoProvider"] = _gpstk.TimeSystemCorrection_geoProvider_set
    __swig_getmethods__["geoProvider"] = _gpstk.TimeSystemCorrection_geoProvider_get
    if _newclass:
        geoProvider = _swig_property(_gpstk.TimeSystemCorrection_geoProvider_get, _gpstk.TimeSystemCorrection_geoProvider_set)
    __swig_setmethods__["geoUTCid"] = _gpstk.TimeSystemCorrection_geoUTCid_set
    __swig_getmethods__["geoUTCid"] = _gpstk.TimeSystemCorrection_geoUTCid_get
    if _newclass:
        geoUTCid = _swig_property(_gpstk.TimeSystemCorrection_geoUTCid_get, _gpstk.TimeSystemCorrection_geoUTCid_set)

    def __init__(self, *args):
        """
        __init__(gpstk::TimeSystemCorrection self) -> TimeSystemCorrection
        __init__(gpstk::TimeSystemCorrection self, std::string str) -> TimeSystemCorrection
        """
        this = _gpstk.new_TimeSystemCorrection(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def fromString(self, str):
        """fromString(TimeSystemCorrection self, std::string const & str)"""
        return _gpstk.TimeSystemCorrection_fromString(self, str)


    def __str__(self):
        """__str__(TimeSystemCorrection self) -> std::string"""
        return _gpstk.TimeSystemCorrection___str__(self)


    def asString4(self):
        """asString4(TimeSystemCorrection self) -> std::string"""
        return _gpstk.TimeSystemCorrection_asString4(self)


    def __eq__(self, tc):
        """__eq__(TimeSystemCorrection self, TimeSystemCorrection tc) -> bool"""
        return _gpstk.TimeSystemCorrection___eq__(self, tc)


    def __lt__(self, tc):
        """__lt__(TimeSystemCorrection self, TimeSystemCorrection tc) -> bool"""
        return _gpstk.TimeSystemCorrection___lt__(self, tc)


    def isConverterFor(self, ts1, ts2):
        """isConverterFor(TimeSystemCorrection self, TimeSystem ts1, TimeSystem ts2) -> bool"""
        return _gpstk.TimeSystemCorrection_isConverterFor(self, ts1, ts2)


    def Correction(self, ct):
        """Correction(TimeSystemCorrection self, CommonTime ct) -> double"""
        return _gpstk.TimeSystemCorrection_Correction(self, ct)

    __swig_destroy__ = _gpstk.delete_TimeSystemCorrection
    __del__ = lambda self: None
TimeSystemCorrection_swigregister = _gpstk.TimeSystemCorrection_swigregister
TimeSystemCorrection_swigregister(TimeSystemCorrection)

class SatID(_object):
    """Proxy of C++ gpstk::SatID class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SatID, name)
    __repr__ = _swig_repr
    systemGPS = _gpstk.SatID_systemGPS
    systemGalileo = _gpstk.SatID_systemGalileo
    systemGlonass = _gpstk.SatID_systemGlonass
    systemGeosync = _gpstk.SatID_systemGeosync
    systemLEO = _gpstk.SatID_systemLEO
    systemTransit = _gpstk.SatID_systemTransit
    systemBeiDou = _gpstk.SatID_systemBeiDou
    systemQZSS = _gpstk.SatID_systemQZSS
    systemMixed = _gpstk.SatID_systemMixed
    systemUserDefined = _gpstk.SatID_systemUserDefined
    systemUnknown = _gpstk.SatID_systemUnknown

    def convertSatelliteSystemToString(s):
        """convertSatelliteSystemToString(gpstk::SatID::SatelliteSystem const & s) -> std::string"""
        return _gpstk.SatID_convertSatelliteSystemToString(s)

    if _newclass:
        convertSatelliteSystemToString = staticmethod(convertSatelliteSystemToString)
    __swig_getmethods__["convertSatelliteSystemToString"] = lambda x: convertSatelliteSystemToString

    def __eq__(self, right):
        """__eq__(SatID self, SatID right) -> bool"""
        return _gpstk.SatID___eq__(self, right)


    def __ne__(self, right):
        """__ne__(SatID self, SatID right) -> bool"""
        return _gpstk.SatID___ne__(self, right)


    def __lt__(self, right):
        """__lt__(SatID self, SatID right) -> bool"""
        return _gpstk.SatID___lt__(self, right)


    def __gt__(self, right):
        """__gt__(SatID self, SatID right) -> bool"""
        return _gpstk.SatID___gt__(self, right)


    def __le__(self, right):
        """__le__(SatID self, SatID right) -> bool"""
        return _gpstk.SatID___le__(self, right)


    def __ge__(self, right):
        """__ge__(SatID self, SatID right) -> bool"""
        return _gpstk.SatID___ge__(self, right)


    def isValid(self):
        """isValid(SatID self) -> bool"""
        return _gpstk.SatID_isValid(self)

    __swig_setmethods__["id"] = _gpstk.SatID_id_set
    __swig_getmethods__["id"] = _gpstk.SatID_id_get
    if _newclass:
        id = _swig_property(_gpstk.SatID_id_get, _gpstk.SatID_id_set)
    __swig_setmethods__["system"] = _gpstk.SatID_system_set
    __swig_getmethods__["system"] = _gpstk.SatID_system_get
    if _newclass:
        system = _swig_property(_gpstk.SatID_system_get, _gpstk.SatID_system_set)

    def __init__(self, *args):
        """
        __init__(gpstk::SatID self) -> SatID
        __init__(gpstk::SatID self, int p, gpstk::SatID::SatelliteSystem const & s) -> SatID
        __init__(gpstk::SatID self, int p) -> SatID
        """
        this = _gpstk.new_SatID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __str__(self):
        """__str__(SatID self) -> std::string"""
        return _gpstk.SatID___str__(self)

    __swig_destroy__ = _gpstk.delete_SatID
    __del__ = lambda self: None
SatID_swigregister = _gpstk.SatID_swigregister
SatID_swigregister(SatID)
DEG_TO_RAD = cvar.DEG_TO_RAD
RAD_TO_DEG = cvar.RAD_TO_DEG
MAX_PRN = cvar.MAX_PRN
MAX_PRN_GPS = cvar.MAX_PRN_GPS

def SatID_convertSatelliteSystemToString(s):
    """SatID_convertSatelliteSystemToString(gpstk::SatID::SatelliteSystem const & s) -> std::string"""
    return _gpstk.SatID_convertSatelliteSystemToString(s)


# Define a hash to allow SatID objects to be used in sets/dicts   
def __SatID_hash(self):
   return (self.id, self.system).__hash__()

SatID.__hash__ = __SatID_hash


class ObsIDInitializer(_object):
    """Proxy of C++ gpstk::ObsIDInitializer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObsIDInitializer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObsIDInitializer, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::ObsIDInitializer self) -> ObsIDInitializer"""
        this = _gpstk.new_ObsIDInitializer()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_ObsIDInitializer
    __del__ = lambda self: None
ObsIDInitializer_swigregister = _gpstk.ObsIDInitializer_swigregister
ObsIDInitializer_swigregister(ObsIDInitializer)


def asString(*args):
    """
    asString(SatID p) -> std::string
    asString(ObsID id) -> std::string
    """
    return _gpstk.asString(*args)
class ObsID(_object):
    """Proxy of C++ gpstk::ObsID class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObsID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObsID, name)
    __repr__ = _swig_repr
    otUnknown = _gpstk.ObsID_otUnknown
    otAny = _gpstk.ObsID_otAny
    otRange = _gpstk.ObsID_otRange
    otPhase = _gpstk.ObsID_otPhase
    otDoppler = _gpstk.ObsID_otDoppler
    otSNR = _gpstk.ObsID_otSNR
    otChannel = _gpstk.ObsID_otChannel
    otIono = _gpstk.ObsID_otIono
    otSSI = _gpstk.ObsID_otSSI
    otLLI = _gpstk.ObsID_otLLI
    otTrackLen = _gpstk.ObsID_otTrackLen
    otNavMsg = _gpstk.ObsID_otNavMsg
    otUndefined = _gpstk.ObsID_otUndefined
    otLast = _gpstk.ObsID_otLast
    cbUnknown = _gpstk.ObsID_cbUnknown
    cbAny = _gpstk.ObsID_cbAny
    cbZero = _gpstk.ObsID_cbZero
    cbL1 = _gpstk.ObsID_cbL1
    cbL2 = _gpstk.ObsID_cbL2
    cbL5 = _gpstk.ObsID_cbL5
    cbG1 = _gpstk.ObsID_cbG1
    cbG2 = _gpstk.ObsID_cbG2
    cbG3 = _gpstk.ObsID_cbG3
    cbE5b = _gpstk.ObsID_cbE5b
    cbE5ab = _gpstk.ObsID_cbE5ab
    cbE6 = _gpstk.ObsID_cbE6
    cbB1 = _gpstk.ObsID_cbB1
    cbB2 = _gpstk.ObsID_cbB2
    cbB3 = _gpstk.ObsID_cbB3
    cbL1L2 = _gpstk.ObsID_cbL1L2
    cbUndefined = _gpstk.ObsID_cbUndefined
    cbLast = _gpstk.ObsID_cbLast
    tcUnknown = _gpstk.ObsID_tcUnknown
    tcAny = _gpstk.ObsID_tcAny
    tcCA = _gpstk.ObsID_tcCA
    tcP = _gpstk.ObsID_tcP
    tcY = _gpstk.ObsID_tcY
    tcW = _gpstk.ObsID_tcW
    tcN = _gpstk.ObsID_tcN
    tcD = _gpstk.ObsID_tcD
    tcM = _gpstk.ObsID_tcM
    tcC2M = _gpstk.ObsID_tcC2M
    tcC2L = _gpstk.ObsID_tcC2L
    tcC2LM = _gpstk.ObsID_tcC2LM
    tcI5 = _gpstk.ObsID_tcI5
    tcQ5 = _gpstk.ObsID_tcQ5
    tcIQ5 = _gpstk.ObsID_tcIQ5
    tcGCA = _gpstk.ObsID_tcGCA
    tcGP = _gpstk.ObsID_tcGP
    tcIR3 = _gpstk.ObsID_tcIR3
    tcQR3 = _gpstk.ObsID_tcQR3
    tcIQR3 = _gpstk.ObsID_tcIQR3
    tcA = _gpstk.ObsID_tcA
    tcB = _gpstk.ObsID_tcB
    tcC = _gpstk.ObsID_tcC
    tcBC = _gpstk.ObsID_tcBC
    tcABC = _gpstk.ObsID_tcABC
    tcIE5 = _gpstk.ObsID_tcIE5
    tcQE5 = _gpstk.ObsID_tcQE5
    tcIQE5 = _gpstk.ObsID_tcIQE5
    tcSCA = _gpstk.ObsID_tcSCA
    tcSI5 = _gpstk.ObsID_tcSI5
    tcSQ5 = _gpstk.ObsID_tcSQ5
    tcSIQ5 = _gpstk.ObsID_tcSIQ5
    tcJCA = _gpstk.ObsID_tcJCA
    tcJD1 = _gpstk.ObsID_tcJD1
    tcJP1 = _gpstk.ObsID_tcJP1
    tcJX1 = _gpstk.ObsID_tcJX1
    tcJZ1 = _gpstk.ObsID_tcJZ1
    tcJM2 = _gpstk.ObsID_tcJM2
    tcJL2 = _gpstk.ObsID_tcJL2
    tcJX2 = _gpstk.ObsID_tcJX2
    tcJI5 = _gpstk.ObsID_tcJI5
    tcJQ5 = _gpstk.ObsID_tcJQ5
    tcJIQ5 = _gpstk.ObsID_tcJIQ5
    tcJI6 = _gpstk.ObsID_tcJI6
    tcJQ6 = _gpstk.ObsID_tcJQ6
    tcJIQ6 = _gpstk.ObsID_tcJIQ6
    tcCI1 = _gpstk.ObsID_tcCI1
    tcCQ1 = _gpstk.ObsID_tcCQ1
    tcCIQ1 = _gpstk.ObsID_tcCIQ1
    tcCI7 = _gpstk.ObsID_tcCI7
    tcCQ7 = _gpstk.ObsID_tcCQ7
    tcCIQ7 = _gpstk.ObsID_tcCIQ7
    tcCI6 = _gpstk.ObsID_tcCI6
    tcCQ6 = _gpstk.ObsID_tcCQ6
    tcCIQ6 = _gpstk.ObsID_tcCIQ6
    tcUndefined = _gpstk.ObsID_tcUndefined
    tcLast = _gpstk.ObsID_tcLast
    __swig_setmethods__["validRinexSystems"] = _gpstk.ObsID_validRinexSystems_set
    __swig_getmethods__["validRinexSystems"] = _gpstk.ObsID_validRinexSystems_get
    if _newclass:
        validRinexSystems = _swig_property(_gpstk.ObsID_validRinexSystems_get, _gpstk.ObsID_validRinexSystems_set)
    __swig_setmethods__["map1to3sys"] = _gpstk.ObsID_map1to3sys_set
    __swig_getmethods__["map1to3sys"] = _gpstk.ObsID_map1to3sys_get
    if _newclass:
        map1to3sys = _swig_property(_gpstk.ObsID_map1to3sys_get, _gpstk.ObsID_map1to3sys_set)
    __swig_setmethods__["map3to1sys"] = _gpstk.ObsID_map3to1sys_set
    __swig_getmethods__["map3to1sys"] = _gpstk.ObsID_map3to1sys_get
    if _newclass:
        map3to1sys = _swig_property(_gpstk.ObsID_map3to1sys_get, _gpstk.ObsID_map3to1sys_set)
    __swig_setmethods__["validRinexFrequencies"] = _gpstk.ObsID_validRinexFrequencies_set
    __swig_getmethods__["validRinexFrequencies"] = _gpstk.ObsID_validRinexFrequencies_get
    if _newclass:
        validRinexFrequencies = _swig_property(_gpstk.ObsID_validRinexFrequencies_get, _gpstk.ObsID_validRinexFrequencies_set)
    __swig_setmethods__["validRinexTrackingCodes"] = _gpstk.ObsID_validRinexTrackingCodes_set
    __swig_getmethods__["validRinexTrackingCodes"] = _gpstk.ObsID_validRinexTrackingCodes_get
    if _newclass:
        validRinexTrackingCodes = _swig_property(_gpstk.ObsID_validRinexTrackingCodes_get, _gpstk.ObsID_validRinexTrackingCodes_set)

    def __init__(self, *args):
        """
        __init__(gpstk::ObsID self) -> ObsID
        __init__(gpstk::ObsID self, gpstk::ObsID::ObservationType ot, gpstk::ObsID::CarrierBand cb, gpstk::ObsID::TrackingCode tc) -> ObsID
        __init__(gpstk::ObsID self, std::string const & id) -> ObsID
        __init__(gpstk::ObsID self, char const * id) -> ObsID
        """
        this = _gpstk.new_ObsID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __eq__(self, right):
        """__eq__(ObsID self, ObsID right) -> bool"""
        return _gpstk.ObsID___eq__(self, right)


    def __lt__(self, right):
        """__lt__(ObsID self, ObsID right) -> bool"""
        return _gpstk.ObsID___lt__(self, right)


    def __ne__(self, right):
        """__ne__(ObsID self, ObsID right) -> bool"""
        return _gpstk.ObsID___ne__(self, right)


    def __gt__(self, right):
        """__gt__(ObsID self, ObsID right) -> bool"""
        return _gpstk.ObsID___gt__(self, right)


    def __le__(self, right):
        """__le__(ObsID self, ObsID right) -> bool"""
        return _gpstk.ObsID___le__(self, right)


    def __ge__(self, right):
        """__ge__(ObsID self, ObsID right) -> bool"""
        return _gpstk.ObsID___ge__(self, right)

    __swig_destroy__ = _gpstk.delete_ObsID
    __del__ = lambda self: None

    def newID(*args):
        """
        newID(std::string const & id, std::string const & desc) -> ObsID
        newID(std::string const & id) -> ObsID
        """
        return _gpstk.ObsID_newID(*args)

    if _newclass:
        newID = staticmethod(newID)
    __swig_getmethods__["newID"] = lambda x: newID
    __swig_setmethods__["type"] = _gpstk.ObsID_type_set
    __swig_getmethods__["type"] = _gpstk.ObsID_type_get
    if _newclass:
        type = _swig_property(_gpstk.ObsID_type_get, _gpstk.ObsID_type_set)
    __swig_setmethods__["band"] = _gpstk.ObsID_band_set
    __swig_getmethods__["band"] = _gpstk.ObsID_band_get
    if _newclass:
        band = _swig_property(_gpstk.ObsID_band_get, _gpstk.ObsID_band_set)
    __swig_setmethods__["code"] = _gpstk.ObsID_code_set
    __swig_getmethods__["code"] = _gpstk.ObsID_code_get
    if _newclass:
        code = _swig_property(_gpstk.ObsID_code_get, _gpstk.ObsID_code_set)
    __swig_setmethods__["tcDesc"] = _gpstk.ObsID_tcDesc_set
    __swig_getmethods__["tcDesc"] = _gpstk.ObsID_tcDesc_get
    if _newclass:
        tcDesc = _swig_property(_gpstk.ObsID_tcDesc_get, _gpstk.ObsID_tcDesc_set)
    __swig_setmethods__["cbDesc"] = _gpstk.ObsID_cbDesc_set
    __swig_getmethods__["cbDesc"] = _gpstk.ObsID_cbDesc_get
    if _newclass:
        cbDesc = _swig_property(_gpstk.ObsID_cbDesc_get, _gpstk.ObsID_cbDesc_set)
    __swig_setmethods__["otDesc"] = _gpstk.ObsID_otDesc_set
    __swig_getmethods__["otDesc"] = _gpstk.ObsID_otDesc_get
    if _newclass:
        otDesc = _swig_property(_gpstk.ObsID_otDesc_get, _gpstk.ObsID_otDesc_set)
    __swig_setmethods__["char2ot"] = _gpstk.ObsID_char2ot_set
    __swig_getmethods__["char2ot"] = _gpstk.ObsID_char2ot_get
    if _newclass:
        char2ot = _swig_property(_gpstk.ObsID_char2ot_get, _gpstk.ObsID_char2ot_set)
    __swig_setmethods__["char2cb"] = _gpstk.ObsID_char2cb_set
    __swig_getmethods__["char2cb"] = _gpstk.ObsID_char2cb_get
    if _newclass:
        char2cb = _swig_property(_gpstk.ObsID_char2cb_get, _gpstk.ObsID_char2cb_set)
    __swig_setmethods__["char2tc"] = _gpstk.ObsID_char2tc_set
    __swig_getmethods__["char2tc"] = _gpstk.ObsID_char2tc_get
    if _newclass:
        char2tc = _swig_property(_gpstk.ObsID_char2tc_get, _gpstk.ObsID_char2tc_set)
    __swig_setmethods__["ot2char"] = _gpstk.ObsID_ot2char_set
    __swig_getmethods__["ot2char"] = _gpstk.ObsID_ot2char_get
    if _newclass:
        ot2char = _swig_property(_gpstk.ObsID_ot2char_get, _gpstk.ObsID_ot2char_set)
    __swig_setmethods__["cb2char"] = _gpstk.ObsID_cb2char_set
    __swig_getmethods__["cb2char"] = _gpstk.ObsID_cb2char_get
    if _newclass:
        cb2char = _swig_property(_gpstk.ObsID_cb2char_get, _gpstk.ObsID_cb2char_set)
    __swig_setmethods__["tc2char"] = _gpstk.ObsID_tc2char_set
    __swig_getmethods__["tc2char"] = _gpstk.ObsID_tc2char_get
    if _newclass:
        tc2char = _swig_property(_gpstk.ObsID_tc2char_get, _gpstk.ObsID_tc2char_set)

    def __str__(self):
        """__str__(ObsID self) -> std::string"""
        return _gpstk.ObsID___str__(self)

ObsID_swigregister = _gpstk.ObsID_swigregister
ObsID_swigregister(ObsID)

def ObsID_newID(*args):
    """
    newID(std::string const & id, std::string const & desc) -> ObsID
    ObsID_newID(std::string const & id) -> ObsID
    """
    return _gpstk.ObsID_newID(*args)


# Define a hash to allow ObsID objects to be used in sets/dicts   
def __ObsID_hash(self):
   return (self.type, self.code, self.band).__hash__()

ObsID.__hash__ = __ObsID_hash



def getLegacyFitInterval(iodc, fiti):
    """getLegacyFitInterval(short const iodc, short const fiti) -> short"""
    return _gpstk.getLegacyFitInterval(iodc, fiti)

def getWavelength(sat, n, N=0):
    """
    getWavelength(SatID sat, int const & n, int const N=0) -> double
    getWavelength(SatID sat, int const & n) -> double
    """
    return _gpstk.getWavelength(sat, n, N)

def getBeta(sat, na, nb):
    """getBeta(SatID sat, int const & na, int const & nb) -> double"""
    return _gpstk.getBeta(sat, na, nb)

def getAlpha(sat, na, nb):
    """getAlpha(SatID sat, int const & na, int const & nb) -> double"""
    return _gpstk.getAlpha(sat, na, nb)
class GeometryException(Exception):
    """Proxy of C++ gpstk::GeometryException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::GeometryException self) -> GeometryException
        __init__(gpstk::GeometryException self, GeometryException a) -> GeometryException
        __init__(gpstk::GeometryException self, Exception a) -> GeometryException
        __init__(gpstk::GeometryException self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> GeometryException
        __init__(gpstk::GeometryException self, std::string const & a, unsigned long b=0) -> GeometryException
        __init__(gpstk::GeometryException self, std::string const & a) -> GeometryException
        __init__(gpstk::GeometryException self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> GeometryException
        __init__(gpstk::GeometryException self, char const * a, unsigned long b=0) -> GeometryException
        __init__(gpstk::GeometryException self, char const * a) -> GeometryException
        """
        this = _gpstk.new_GeometryException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_GeometryException
    __del__ = lambda self: None

    def getName(self):
        """getName(GeometryException self) -> std::string"""
        return _gpstk.GeometryException_getName(self)

GeometryException_swigregister = _gpstk.GeometryException_swigregister
GeometryException_swigregister(GeometryException)
PI = cvar.PI
TWO_PI = cvar.TWO_PI
SQRT_PI = cvar.SQRT_PI
REL_CONST = cvar.REL_CONST
C_MPS = cvar.C_MPS
OSC_FREQ_GPS = cvar.OSC_FREQ_GPS
PY_CHIP_FREQ_GPS = cvar.PY_CHIP_FREQ_GPS
CA_CHIP_FREQ_GPS = cvar.CA_CHIP_FREQ_GPS
RSVCLK_GPS = cvar.RSVCLK_GPS
L1_FREQ_GPS = cvar.L1_FREQ_GPS
L2_FREQ_GPS = cvar.L2_FREQ_GPS
L5_FREQ_GPS = cvar.L5_FREQ_GPS
L1_WAVELENGTH_GPS = cvar.L1_WAVELENGTH_GPS
L2_WAVELENGTH_GPS = cvar.L2_WAVELENGTH_GPS
L5_WAVELENGTH_GPS = cvar.L5_WAVELENGTH_GPS
L1_MULT_GPS = cvar.L1_MULT_GPS
L2_MULT_GPS = cvar.L2_MULT_GPS
L5_MULT_GPS = cvar.L5_MULT_GPS
GAMMA_GPS = cvar.GAMMA_GPS
A_REF_GPS = cvar.A_REF_GPS
OMEGADOT_REF_GPS = cvar.OMEGADOT_REF_GPS
OSC_FREQ_GLO = cvar.OSC_FREQ_GLO
PY_CHIP_FREQ_GLO = cvar.PY_CHIP_FREQ_GLO
CA_CHIP_FREQ_GLO = cvar.CA_CHIP_FREQ_GLO
PSC_FREQ_GLO = cvar.PSC_FREQ_GLO
RSVCLK_GLO = cvar.RSVCLK_GLO
L1_FREQ_GLO = cvar.L1_FREQ_GLO
L1_FREQ_STEP_GLO = cvar.L1_FREQ_STEP_GLO
L1_WAVELENGTH_GLO = cvar.L1_WAVELENGTH_GLO
L2_FREQ_GLO = cvar.L2_FREQ_GLO
L2_FREQ_STEP_GLO = cvar.L2_FREQ_STEP_GLO
L2_WAVELENGTH_GLO = cvar.L2_WAVELENGTH_GLO
L1_MULT_GLO = cvar.L1_MULT_GLO
L2_MULT_GLO = cvar.L2_MULT_GLO
SV_ACCURACY_GLO_INDEX_MAX = cvar.SV_ACCURACY_GLO_INDEX_MAX
L1_FREQ_GAL = cvar.L1_FREQ_GAL
L5_FREQ_GAL = cvar.L5_FREQ_GAL
L6_FREQ_GAL = cvar.L6_FREQ_GAL
L7_FREQ_GAL = cvar.L7_FREQ_GAL
L8_FREQ_GAL = cvar.L8_FREQ_GAL
L1_WAVELENGTH_GAL = cvar.L1_WAVELENGTH_GAL
L5_WAVELENGTH_GAL = cvar.L5_WAVELENGTH_GAL
L6_WAVELENGTH_GAL = cvar.L6_WAVELENGTH_GAL
L7_WAVELENGTH_GAL = cvar.L7_WAVELENGTH_GAL
L8_WAVELENGTH_GAL = cvar.L8_WAVELENGTH_GAL
L1_FREQ_GEO = cvar.L1_FREQ_GEO
L5_FREQ_GEO = cvar.L5_FREQ_GEO
L1_WAVELENGTH_GEO = cvar.L1_WAVELENGTH_GEO
L5_WAVELENGTH_GEO = cvar.L5_WAVELENGTH_GEO
L1_FREQ_BDS = cvar.L1_FREQ_BDS
L2_FREQ_BDS = cvar.L2_FREQ_BDS
L3_FREQ_BDS = cvar.L3_FREQ_BDS
L1_WAVELENGTH_BDS = cvar.L1_WAVELENGTH_BDS
L2_WAVELENGTH_BDS = cvar.L2_WAVELENGTH_BDS
L3_WAVELENGTH_BDS = cvar.L3_WAVELENGTH_BDS
L1_FREQ_QZS = cvar.L1_FREQ_QZS
L2_FREQ_QZS = cvar.L2_FREQ_QZS
L5_FREQ_QZS = cvar.L5_FREQ_QZS
L6_FREQ_QZS = cvar.L6_FREQ_QZS
L1_WAVELENGTH_QZS = cvar.L1_WAVELENGTH_QZS
L2_WAVELENGTH_QZS = cvar.L2_WAVELENGTH_QZS
L5_WAVELENGTH_QZS = cvar.L5_WAVELENGTH_QZS
L6_WAVELENGTH_QZS = cvar.L6_WAVELENGTH_QZS

class Triple(_object):
    """Proxy of C++ gpstk::Triple class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Triple, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::Triple self) -> Triple
        __init__(gpstk::Triple self, Triple right) -> Triple
        __init__(gpstk::Triple self, double a, double b, double c) -> Triple
        """
        this = _gpstk.new_Triple(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_Triple
    __del__ = lambda self: None

    def toVector(self):
        """toVector(Triple self) -> Vector< double >"""
        return _gpstk.Triple_toVector(self)


    def toStdVector(self):
        """toStdVector(Triple self) -> vector_double"""
        return _gpstk.Triple_toStdVector(self)


    def dot(self, right):
        """dot(Triple self, Triple right) -> double"""
        return _gpstk.Triple_dot(self, right)


    def cross(self, right):
        """cross(Triple self, Triple right) -> Triple"""
        return _gpstk.Triple_cross(self, right)


    def mag(self):
        """mag(Triple self) -> double"""
        return _gpstk.Triple_mag(self)


    def unitVector(self):
        """unitVector(Triple self) -> Triple"""
        return _gpstk.Triple_unitVector(self)


    def cosVector(self, right):
        """cosVector(Triple self, Triple right) -> double"""
        return _gpstk.Triple_cosVector(self, right)


    def slantRange(self, right):
        """slantRange(Triple self, Triple right) -> double"""
        return _gpstk.Triple_slantRange(self, right)


    def elvAngle(self, right):
        """elvAngle(Triple self, Triple right) -> double"""
        return _gpstk.Triple_elvAngle(self, right)


    def azAngle(self, right):
        """azAngle(Triple self, Triple right) -> double"""
        return _gpstk.Triple_azAngle(self, right)


    def R1(self, angle):
        """R1(Triple self, double const & angle) -> Triple"""
        return _gpstk.Triple_R1(self, angle)


    def R2(self, angle):
        """R2(Triple self, double const & angle) -> Triple"""
        return _gpstk.Triple_R2(self, angle)


    def R3(self, angle):
        """R3(Triple self, double const & angle) -> Triple"""
        return _gpstk.Triple_R3(self, angle)


    def __eq__(self, right):
        """__eq__(Triple self, Triple right) -> bool"""
        return _gpstk.Triple___eq__(self, right)


    def __sub__(self, right):
        """__sub__(Triple self, Triple right) -> Triple"""
        return _gpstk.Triple___sub__(self, right)


    def __add__(self, right):
        """__add__(Triple self, Triple right) -> Triple"""
        return _gpstk.Triple___add__(self, right)


    def size(self):
        """size(Triple self) -> size_t"""
        return _gpstk.Triple_size(self)


    def __getitem__(self, i):
        """__getitem__(Triple self, unsigned int i) -> double"""
        return _gpstk.Triple___getitem__(self, i)


    def scale(self, scalar):
        """scale(Triple self, double scalar) -> Triple"""
        return _gpstk.Triple_scale(self, scalar)


    def __len__(self):
        """__len__(Triple self) -> int"""
        return _gpstk.Triple___len__(self)


    def __str__(self):
        """__str__(Triple self) -> std::string"""
        return _gpstk.Triple___str__(self)

Triple_swigregister = _gpstk.Triple_swigregister
Triple_swigregister(Triple)


# tuple -> triple translation:
def makeTriple(tuple):
    """Generates a GPSTk-style Triple from a Python tuple."""
# TODO: add error checking
    return Triple(tuple[0], tuple[1], tuple[2])

# triple -> tuple translation:
def makeTuple(self):
    """Given a GPSTk Triple, returns a tuple representing it."""
    return (self[0], self[1], self[2])
Triple.makeTuple = makeTuple

Triple.__str__ = lambda self: makeTuple(self).__str__()

class ReferenceFrame(_object):
    """Proxy of C++ gpstk::ReferenceFrame class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceFrame, name)
    __repr__ = _swig_repr
    Unknown = _gpstk.ReferenceFrame_Unknown
    WGS84 = _gpstk.ReferenceFrame_WGS84
    WGS84G730 = _gpstk.ReferenceFrame_WGS84G730
    WGS84G873 = _gpstk.ReferenceFrame_WGS84G873
    WGS84G1150 = _gpstk.ReferenceFrame_WGS84G1150
    ITRF = _gpstk.ReferenceFrame_ITRF
    PZ90 = _gpstk.ReferenceFrame_PZ90
    PZ90KGS = _gpstk.ReferenceFrame_PZ90KGS
    count = _gpstk.ReferenceFrame_count

    def __init__(self, *args):
        """
        __init__(gpstk::ReferenceFrame self, gpstk::ReferenceFrame::Frames f) -> ReferenceFrame
        __init__(gpstk::ReferenceFrame self) -> ReferenceFrame
        __init__(gpstk::ReferenceFrame self, std::string const str) -> ReferenceFrame
        """
        this = _gpstk.new_ReferenceFrame(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setReferenceFrame(self, f):
        """setReferenceFrame(ReferenceFrame self, gpstk::ReferenceFrame::Frames const & f)"""
        return _gpstk.ReferenceFrame_setReferenceFrame(self, f)


    def getReferenceFrame(self):
        """getReferenceFrame(ReferenceFrame self) -> gpstk::ReferenceFrame::Frames"""
        return _gpstk.ReferenceFrame_getReferenceFrame(self)


    def __str__(self):
        """__str__(ReferenceFrame self) -> std::string"""
        return _gpstk.ReferenceFrame___str__(self)


    def fromString(self, str):
        """fromString(ReferenceFrame self, std::string const str)"""
        return _gpstk.ReferenceFrame_fromString(self, str)


    def __eq__(self, right):
        """__eq__(ReferenceFrame self, ReferenceFrame right) -> bool"""
        return _gpstk.ReferenceFrame___eq__(self, right)


    def __lt__(self, right):
        """__lt__(ReferenceFrame self, ReferenceFrame right) -> bool"""
        return _gpstk.ReferenceFrame___lt__(self, right)


    def __ne__(self, right):
        """__ne__(ReferenceFrame self, ReferenceFrame right) -> bool"""
        return _gpstk.ReferenceFrame___ne__(self, right)


    def __ge__(self, right):
        """__ge__(ReferenceFrame self, ReferenceFrame right) -> bool"""
        return _gpstk.ReferenceFrame___ge__(self, right)


    def __le__(self, right):
        """__le__(ReferenceFrame self, ReferenceFrame right) -> bool"""
        return _gpstk.ReferenceFrame___le__(self, right)


    def __gt__(self, right):
        """__gt__(ReferenceFrame self, ReferenceFrame right) -> bool"""
        return _gpstk.ReferenceFrame___gt__(self, right)

    __swig_destroy__ = _gpstk.delete_ReferenceFrame
    __del__ = lambda self: None
ReferenceFrame_swigregister = _gpstk.ReferenceFrame_swigregister
ReferenceFrame_swigregister(ReferenceFrame)

class EllipsoidModel(_object):
    """Proxy of C++ gpstk::EllipsoidModel class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EllipsoidModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EllipsoidModel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def a(self):
        """a(EllipsoidModel self) -> double"""
        return _gpstk.EllipsoidModel_a(self)


    def a_km(self):
        """a_km(EllipsoidModel self) -> double"""
        return _gpstk.EllipsoidModel_a_km(self)


    def flattening(self):
        """flattening(EllipsoidModel self) -> double"""
        return _gpstk.EllipsoidModel_flattening(self)


    def eccentricity(self):
        """eccentricity(EllipsoidModel self) -> double"""
        return _gpstk.EllipsoidModel_eccentricity(self)


    def eccSquared(self):
        """eccSquared(EllipsoidModel self) -> double"""
        return _gpstk.EllipsoidModel_eccSquared(self)


    def angVelocity(self):
        """angVelocity(EllipsoidModel self) -> double"""
        return _gpstk.EllipsoidModel_angVelocity(self)


    def gm(self):
        """gm(EllipsoidModel self) -> double"""
        return _gpstk.EllipsoidModel_gm(self)


    def gm_km(self):
        """gm_km(EllipsoidModel self) -> double"""
        return _gpstk.EllipsoidModel_gm_km(self)


    def c(self):
        """c(EllipsoidModel self) -> double"""
        return _gpstk.EllipsoidModel_c(self)


    def c_km(self):
        """c_km(EllipsoidModel self) -> double"""
        return _gpstk.EllipsoidModel_c_km(self)

    __swig_destroy__ = _gpstk.delete_EllipsoidModel
    __del__ = lambda self: None
EllipsoidModel_swigregister = _gpstk.EllipsoidModel_swigregister
EllipsoidModel_swigregister(EllipsoidModel)

class Xvt(_object):
    """Proxy of C++ gpstk::Xvt class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Xvt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Xvt, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::Xvt self) -> Xvt"""
        this = _gpstk.new_Xvt()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_Xvt
    __del__ = lambda self: None

    def getPos(self):
        """getPos(Xvt self) -> Triple"""
        return _gpstk.Xvt_getPos(self)


    def getVel(self):
        """getVel(Xvt self) -> Triple"""
        return _gpstk.Xvt_getVel(self)


    def getClockBias(self):
        """getClockBias(Xvt self) -> double"""
        return _gpstk.Xvt_getClockBias(self)


    def getClockDrift(self):
        """getClockDrift(Xvt self) -> double"""
        return _gpstk.Xvt_getClockDrift(self)


    def getRelativityCorr(self):
        """getRelativityCorr(Xvt self) -> double"""
        return _gpstk.Xvt_getRelativityCorr(self)


    def computeRelativityCorrection(self):
        """computeRelativityCorrection(Xvt self) -> double"""
        return _gpstk.Xvt_computeRelativityCorrection(self)


    def preciseRho(self, rxPos, ellipsoid, correction=0):
        """
        preciseRho(Xvt self, Triple rxPos, EllipsoidModel ellipsoid, double correction=0) -> double
        preciseRho(Xvt self, Triple rxPos, EllipsoidModel ellipsoid) -> double
        """
        return _gpstk.Xvt_preciseRho(self, rxPos, ellipsoid, correction)

    __swig_setmethods__["x"] = _gpstk.Xvt_x_set
    __swig_getmethods__["x"] = _gpstk.Xvt_x_get
    if _newclass:
        x = _swig_property(_gpstk.Xvt_x_get, _gpstk.Xvt_x_set)
    __swig_setmethods__["v"] = _gpstk.Xvt_v_set
    __swig_getmethods__["v"] = _gpstk.Xvt_v_get
    if _newclass:
        v = _swig_property(_gpstk.Xvt_v_get, _gpstk.Xvt_v_set)
    __swig_setmethods__["clkbias"] = _gpstk.Xvt_clkbias_set
    __swig_getmethods__["clkbias"] = _gpstk.Xvt_clkbias_get
    if _newclass:
        clkbias = _swig_property(_gpstk.Xvt_clkbias_get, _gpstk.Xvt_clkbias_set)
    __swig_setmethods__["clkdrift"] = _gpstk.Xvt_clkdrift_set
    __swig_getmethods__["clkdrift"] = _gpstk.Xvt_clkdrift_get
    if _newclass:
        clkdrift = _swig_property(_gpstk.Xvt_clkdrift_get, _gpstk.Xvt_clkdrift_set)
    __swig_setmethods__["relcorr"] = _gpstk.Xvt_relcorr_set
    __swig_getmethods__["relcorr"] = _gpstk.Xvt_relcorr_get
    if _newclass:
        relcorr = _swig_property(_gpstk.Xvt_relcorr_get, _gpstk.Xvt_relcorr_set)
    __swig_setmethods__["frame"] = _gpstk.Xvt_frame_set
    __swig_getmethods__["frame"] = _gpstk.Xvt_frame_get
    if _newclass:
        frame = _swig_property(_gpstk.Xvt_frame_get, _gpstk.Xvt_frame_set)

    def __str__(self):
        """__str__(Xvt self) -> std::string"""
        return _gpstk.Xvt___str__(self)

Xvt_swigregister = _gpstk.Xvt_swigregister
Xvt_swigregister(Xvt)


def range(A, B):
    """range(Position A, Position B) -> double"""
    return _gpstk.range(A, B)
class Position(Triple):
    """Proxy of C++ gpstk::Position class"""
    __swig_setmethods__ = {}
    for _s in [Triple]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position, name, value)
    __swig_getmethods__ = {}
    for _s in [Triple]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Position, name)
    __repr__ = _swig_repr
    Unknown = _gpstk.Position_Unknown
    Geodetic = _gpstk.Position_Geodetic
    Geocentric = _gpstk.Position_Geocentric
    Cartesian = _gpstk.Position_Cartesian
    Spherical = _gpstk.Position_Spherical

    def getSystemName(self):
        """getSystemName(Position self) -> std::string"""
        return _gpstk.Position_getSystemName(self)

    __swig_setmethods__["POSITION_TOLERANCE"] = _gpstk.Position_POSITION_TOLERANCE_set
    __swig_getmethods__["POSITION_TOLERANCE"] = _gpstk.Position_POSITION_TOLERANCE_get
    if _newclass:
        POSITION_TOLERANCE = _swig_property(_gpstk.Position_POSITION_TOLERANCE_get, _gpstk.Position_POSITION_TOLERANCE_set)

    def setPositionTolerance(tol):
        """setPositionTolerance(double const tol) -> double"""
        return _gpstk.Position_setPositionTolerance(tol)

    if _newclass:
        setPositionTolerance = staticmethod(setPositionTolerance)
    __swig_getmethods__["setPositionTolerance"] = lambda x: setPositionTolerance

    def getPositionTolerance():
        """getPositionTolerance() -> double"""
        return _gpstk.Position_getPositionTolerance()

    if _newclass:
        getPositionTolerance = staticmethod(getPositionTolerance)
    __swig_getmethods__["getPositionTolerance"] = lambda x: getPositionTolerance

    def setTolerance(self, tol):
        """setTolerance(Position self, double const tol) -> Position"""
        return _gpstk.Position_setTolerance(self, tol)


    def __init__(self, *args):
        """
        __init__(gpstk::Position self) -> Position
        __init__(gpstk::Position self, double const & a, double const & b, double const & c, gpstk::Position::CoordinateSystem s, EllipsoidModel ell=None, ReferenceFrame frame) -> Position
        __init__(gpstk::Position self, double const & a, double const & b, double const & c, gpstk::Position::CoordinateSystem s, EllipsoidModel ell=None) -> Position
        __init__(gpstk::Position self, double const & a, double const & b, double const & c, gpstk::Position::CoordinateSystem s) -> Position
        __init__(gpstk::Position self, double const & a, double const & b, double const & c) -> Position
        __init__(gpstk::Position self, double const [3] ABC, gpstk::Position::CoordinateSystem s, EllipsoidModel ell=None, ReferenceFrame frame) -> Position
        __init__(gpstk::Position self, double const [3] ABC, gpstk::Position::CoordinateSystem s, EllipsoidModel ell=None) -> Position
        __init__(gpstk::Position self, double const [3] ABC, gpstk::Position::CoordinateSystem s) -> Position
        __init__(gpstk::Position self, double const [3] ABC) -> Position
        __init__(gpstk::Position self, Triple ABC, gpstk::Position::CoordinateSystem s, EllipsoidModel ell=None, ReferenceFrame frame) -> Position
        __init__(gpstk::Position self, Triple ABC, gpstk::Position::CoordinateSystem s, EllipsoidModel ell=None) -> Position
        __init__(gpstk::Position self, Triple ABC, gpstk::Position::CoordinateSystem s) -> Position
        __init__(gpstk::Position self, Triple ABC) -> Position
        __init__(gpstk::Position self, Xvt xvt) -> Position
        """
        this = _gpstk.new_Position(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_Position
    __del__ = lambda self: None

    def __isub__(self, right):
        """__isub__(Position self, Position right) -> Position"""
        return _gpstk.Position___isub__(self, right)


    def __iadd__(self, right):
        """__iadd__(Position self, Position right) -> Position"""
        return _gpstk.Position___iadd__(self, right)


    def __eq__(self, right):
        """__eq__(Position self, Position right) -> bool"""
        return _gpstk.Position___eq__(self, right)


    def __ne__(self, right):
        """__ne__(Position self, Position right) -> bool"""
        return _gpstk.Position___ne__(self, right)


    def transformTo(self, sys):
        """transformTo(Position self, gpstk::Position::CoordinateSystem sys) -> Position"""
        return _gpstk.Position_transformTo(self, sys)


    def asGeodetic(self, *args):
        """
        asGeodetic(Position self) -> Position
        asGeodetic(Position self, EllipsoidModel ell) -> Position
        """
        return _gpstk.Position_asGeodetic(self, *args)


    def asECEF(self):
        """asECEF(Position self) -> Position"""
        return _gpstk.Position_asECEF(self)


    def getReferenceFrame(self):
        """getReferenceFrame(Position self) -> ReferenceFrame"""
        return _gpstk.Position_getReferenceFrame(self)


    def X(self):
        """X(Position self) -> double"""
        return _gpstk.Position_X(self)


    def Y(self):
        """Y(Position self) -> double"""
        return _gpstk.Position_Y(self)


    def Z(self):
        """Z(Position self) -> double"""
        return _gpstk.Position_Z(self)


    def geodeticLatitude(self):
        """geodeticLatitude(Position self) -> double"""
        return _gpstk.Position_geodeticLatitude(self)


    def geocentricLatitude(self):
        """geocentricLatitude(Position self) -> double"""
        return _gpstk.Position_geocentricLatitude(self)


    def theta(self):
        """theta(Position self) -> double"""
        return _gpstk.Position_theta(self)


    def phi(self):
        """phi(Position self) -> double"""
        return _gpstk.Position_phi(self)


    def longitude(self):
        """longitude(Position self) -> double"""
        return _gpstk.Position_longitude(self)


    def radius(self):
        """radius(Position self) -> double"""
        return _gpstk.Position_radius(self)


    def height(self):
        """height(Position self) -> double"""
        return _gpstk.Position_height(self)


    def getCoordinateSystem(self):
        """getCoordinateSystem(Position self) -> gpstk::Position::CoordinateSystem"""
        return _gpstk.Position_getCoordinateSystem(self)


    def getGeodeticLatitude(self):
        """getGeodeticLatitude(Position self) -> double"""
        return _gpstk.Position_getGeodeticLatitude(self)


    def getGeocentricLatitude(self):
        """getGeocentricLatitude(Position self) -> double"""
        return _gpstk.Position_getGeocentricLatitude(self)


    def getLongitude(self):
        """getLongitude(Position self) -> double"""
        return _gpstk.Position_getLongitude(self)


    def getAltitude(self):
        """getAltitude(Position self) -> double"""
        return _gpstk.Position_getAltitude(self)


    def getHeight(self):
        """getHeight(Position self) -> double"""
        return _gpstk.Position_getHeight(self)


    def getX(self):
        """getX(Position self) -> double"""
        return _gpstk.Position_getX(self)


    def getY(self):
        """getY(Position self) -> double"""
        return _gpstk.Position_getY(self)


    def getZ(self):
        """getZ(Position self) -> double"""
        return _gpstk.Position_getZ(self)


    def getTheta(self):
        """getTheta(Position self) -> double"""
        return _gpstk.Position_getTheta(self)


    def getPhi(self):
        """getPhi(Position self) -> double"""
        return _gpstk.Position_getPhi(self)


    def getRadius(self):
        """getRadius(Position self) -> double"""
        return _gpstk.Position_getRadius(self)


    def setReferenceFrame(self, frame):
        """setReferenceFrame(Position self, ReferenceFrame frame)"""
        return _gpstk.Position_setReferenceFrame(self, frame)


    def setEllipsoidModel(self, ell):
        """setEllipsoidModel(Position self, EllipsoidModel ell)"""
        return _gpstk.Position_setEllipsoidModel(self, ell)


    def setGeodetic(self, lat, lon, ht, ell=None):
        """
        setGeodetic(Position self, double const lat, double const lon, double const ht, EllipsoidModel ell=None) -> Position
        setGeodetic(Position self, double const lat, double const lon, double const ht) -> Position
        """
        return _gpstk.Position_setGeodetic(self, lat, lon, ht, ell)


    def setGeocentric(self, lat, lon, rad):
        """setGeocentric(Position self, double const lat, double const lon, double const rad) -> Position"""
        return _gpstk.Position_setGeocentric(self, lat, lon, rad)


    def setSpherical(self, theta, phi, rad):
        """setSpherical(Position self, double const theta, double const phi, double const rad) -> Position"""
        return _gpstk.Position_setSpherical(self, theta, phi, rad)


    def setECEF(self, *args):
        """
        setECEF(Position self, double const X, double const Y, double const Z) -> Position
        setECEF(Position self, double const [3] XYZ) -> Position
        setECEF(Position self, Triple XYZ) -> Position
        """
        return _gpstk.Position_setECEF(self, *args)


    def setToString(self, str, fmt):
        """setToString(Position self, std::string const & str, std::string const & fmt) -> Position"""
        return _gpstk.Position_setToString(self, str, fmt)


    def printf(self, *args):
        """
        printf(Position self, char const * fmt) -> std::string
        printf(Position self, std::string const & fmt) -> std::string
        """
        return _gpstk.Position_printf(self, *args)


    def radiusEarth(self, *args):
        """
        radiusEarth(Position self, double const geolat, double const A, double const eccSq) -> double
        radiusEarth(Position self) -> double
        """
        return _gpstk.Position_radiusEarth(self, *args)


    def elevation(self, Target):
        """elevation(Position self, Position Target) -> double"""
        return _gpstk.Position_elevation(self, Target)


    def elevationGeodetic(self, Target):
        """elevationGeodetic(Position self, Position Target) -> double"""
        return _gpstk.Position_elevationGeodetic(self, Target)


    def azimuth(self, Target):
        """azimuth(Position self, Position Target) -> double"""
        return _gpstk.Position_azimuth(self, Target)


    def azimuthGeodetic(self, Target):
        """azimuthGeodetic(Position self, Position Target) -> double"""
        return _gpstk.Position_azimuthGeodetic(self, Target)


    def getIonosphericPiercePoint(self, elev, azim, ionoht):
        """getIonosphericPiercePoint(Position self, double const elev, double const azim, double const ionoht) -> Position"""
        return _gpstk.Position_getIonosphericPiercePoint(self, elev, azim, ionoht)


    def getCurvMeridian(self):
        """getCurvMeridian(Position self) -> double"""
        return _gpstk.Position_getCurvMeridian(self)


    def getCurvPrimeVertical(self):
        """getCurvPrimeVertical(Position self) -> double"""
        return _gpstk.Position_getCurvPrimeVertical(self)


    def convertSphericalToCartesian(tpr):
        """convertSphericalToCartesian(Triple tpr) -> Triple"""
        return _gpstk.Position_convertSphericalToCartesian(tpr)

    if _newclass:
        convertSphericalToCartesian = staticmethod(convertSphericalToCartesian)
    __swig_getmethods__["convertSphericalToCartesian"] = lambda x: convertSphericalToCartesian

    def convertCartesianToSpherical(xyz):
        """convertCartesianToSpherical(Triple xyz) -> Triple"""
        return _gpstk.Position_convertCartesianToSpherical(xyz)

    if _newclass:
        convertCartesianToSpherical = staticmethod(convertCartesianToSpherical)
    __swig_getmethods__["convertCartesianToSpherical"] = lambda x: convertCartesianToSpherical

    def convertCartesianToGeodetic(xyz, A, eccSq):
        """convertCartesianToGeodetic(Triple xyz, double const A, double const eccSq) -> Triple"""
        return _gpstk.Position_convertCartesianToGeodetic(xyz, A, eccSq)

    if _newclass:
        convertCartesianToGeodetic = staticmethod(convertCartesianToGeodetic)
    __swig_getmethods__["convertCartesianToGeodetic"] = lambda x: convertCartesianToGeodetic

    def convertGeodeticToCartesian(*args):
        """
        convertGeodeticToCartesian(Triple llh, Triple xyz, double const A, double const eccSq)
        convertGeodeticToCartesian(Triple llh, double const A, double const eccSq) -> Triple
        """
        return _gpstk.Position_convertGeodeticToCartesian(*args)

    if _newclass:
        convertGeodeticToCartesian = staticmethod(convertGeodeticToCartesian)
    __swig_getmethods__["convertGeodeticToCartesian"] = lambda x: convertGeodeticToCartesian

    def convertCartesianToGeocentric(xyz):
        """convertCartesianToGeocentric(Triple xyz) -> Triple"""
        return _gpstk.Position_convertCartesianToGeocentric(xyz)

    if _newclass:
        convertCartesianToGeocentric = staticmethod(convertCartesianToGeocentric)
    __swig_getmethods__["convertCartesianToGeocentric"] = lambda x: convertCartesianToGeocentric

    def convertGeocentricToCartesian(llr):
        """convertGeocentricToCartesian(Triple llr) -> Triple"""
        return _gpstk.Position_convertGeocentricToCartesian(llr)

    if _newclass:
        convertGeocentricToCartesian = staticmethod(convertGeocentricToCartesian)
    __swig_getmethods__["convertGeocentricToCartesian"] = lambda x: convertGeocentricToCartesian

    def convertGeocentricToGeodetic(llr, A, eccSq):
        """convertGeocentricToGeodetic(Triple llr, double const A, double const eccSq) -> Triple"""
        return _gpstk.Position_convertGeocentricToGeodetic(llr, A, eccSq)

    if _newclass:
        convertGeocentricToGeodetic = staticmethod(convertGeocentricToGeodetic)
    __swig_getmethods__["convertGeocentricToGeodetic"] = lambda x: convertGeocentricToGeodetic

    def convertGeodeticToGeocentric(geodeticllh, A, eccSq):
        """convertGeodeticToGeocentric(Triple geodeticllh, double const A, double const eccSq) -> Triple"""
        return _gpstk.Position_convertGeodeticToGeocentric(geodeticllh, A, eccSq)

    if _newclass:
        convertGeodeticToGeocentric = staticmethod(convertGeodeticToGeocentric)
    __swig_getmethods__["convertGeodeticToGeocentric"] = lambda x: convertGeodeticToGeocentric

    def __str__(self, *args):
        """
        __str__(Position self) -> std::string
        __str__(Position self) -> std::string
        """
        return _gpstk.Position___str__(self, *args)

Position_swigregister = _gpstk.Position_swigregister
Position_swigregister(Position)
Position.ONE_MM_TOLERANCE = _gpstk.cvar.Position_ONE_MM_TOLERANCE
Position.ONE_CM_TOLERANCE = _gpstk.cvar.Position_ONE_CM_TOLERANCE
Position.ONE_UM_TOLERANCE = _gpstk.cvar.Position_ONE_UM_TOLERANCE

def Position_setPositionTolerance(tol):
    """Position_setPositionTolerance(double const tol) -> double"""
    return _gpstk.Position_setPositionTolerance(tol)

def Position_getPositionTolerance():
    """Position_getPositionTolerance() -> double"""
    return _gpstk.Position_getPositionTolerance()

def Position_convertSphericalToCartesian(tpr):
    """Position_convertSphericalToCartesian(Triple tpr) -> Triple"""
    return _gpstk.Position_convertSphericalToCartesian(tpr)

def Position_convertCartesianToSpherical(xyz):
    """Position_convertCartesianToSpherical(Triple xyz) -> Triple"""
    return _gpstk.Position_convertCartesianToSpherical(xyz)

def Position_convertCartesianToGeodetic(xyz, A, eccSq):
    """Position_convertCartesianToGeodetic(Triple xyz, double const A, double const eccSq) -> Triple"""
    return _gpstk.Position_convertCartesianToGeodetic(xyz, A, eccSq)

def Position_convertGeodeticToCartesian(*args):
    """
    convertGeodeticToCartesian(Triple llh, Triple xyz, double const A, double const eccSq)
    Position_convertGeodeticToCartesian(Triple llh, double const A, double const eccSq) -> Triple
    """
    return _gpstk.Position_convertGeodeticToCartesian(*args)

def Position_convertCartesianToGeocentric(xyz):
    """Position_convertCartesianToGeocentric(Triple xyz) -> Triple"""
    return _gpstk.Position_convertCartesianToGeocentric(xyz)

def Position_convertGeocentricToCartesian(llr):
    """Position_convertGeocentricToCartesian(Triple llr) -> Triple"""
    return _gpstk.Position_convertGeocentricToCartesian(llr)

def Position_convertGeocentricToGeodetic(llr, A, eccSq):
    """Position_convertGeocentricToGeodetic(Triple llr, double const A, double const eccSq) -> Triple"""
    return _gpstk.Position_convertGeocentricToGeodetic(llr, A, eccSq)

def Position_convertGeodeticToGeocentric(geodeticllh, A, eccSq):
    """Position_convertGeodeticToGeocentric(Triple geodeticllh, double const A, double const eccSq) -> Triple"""
    return _gpstk.Position_convertGeodeticToGeocentric(geodeticllh, A, eccSq)


def cycles2meters(phase, freq, ellipsoid):
    """cycles2meters(double phase, double freq, EllipsoidModel ellipsoid) -> double"""
    return _gpstk.cycles2meters(phase, freq, ellipsoid)

def meters2cycles(range, freq, ellipsoid):
    """meters2cycles(double range, double freq, EllipsoidModel ellipsoid) -> double"""
    return _gpstk.meters2cycles(range, freq, ellipsoid)

def cel2far(c):
    """cel2far(double c) -> double"""
    return _gpstk.cel2far(c)

def far2cel(f):
    """far2cel(double f) -> double"""
    return _gpstk.far2cel(f)

def mb2hg(mb):
    """mb2hg(double mb) -> double"""
    return _gpstk.mb2hg(mb)

def hg2mb(hg):
    """hg2mb(double hg) -> double"""
    return _gpstk.hg2mb(hg)
class Xv(_object):
    """Proxy of C++ gpstk::Xv class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Xv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Xv, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::Xv self) -> Xv"""
        this = _gpstk.new_Xv()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["x"] = _gpstk.Xv_x_set
    __swig_getmethods__["x"] = _gpstk.Xv_x_get
    if _newclass:
        x = _swig_property(_gpstk.Xv_x_get, _gpstk.Xv_x_set)
    __swig_setmethods__["v"] = _gpstk.Xv_v_set
    __swig_getmethods__["v"] = _gpstk.Xv_v_get
    if _newclass:
        v = _swig_property(_gpstk.Xv_v_get, _gpstk.Xv_v_set)

    def __str__(self):
        """__str__(Xv self) -> std::string"""
        return _gpstk.Xv___str__(self)

    __swig_destroy__ = _gpstk.delete_Xv
    __del__ = lambda self: None
Xv_swigregister = _gpstk.Xv_swigregister
Xv_swigregister(Xv)

class VectorException(Exception):
    """Proxy of C++ gpstk::VectorException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, VectorException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::VectorException self) -> VectorException
        __init__(gpstk::VectorException self, VectorException a) -> VectorException
        __init__(gpstk::VectorException self, Exception a) -> VectorException
        __init__(gpstk::VectorException self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> VectorException
        __init__(gpstk::VectorException self, std::string const & a, unsigned long b=0) -> VectorException
        __init__(gpstk::VectorException self, std::string const & a) -> VectorException
        __init__(gpstk::VectorException self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> VectorException
        __init__(gpstk::VectorException self, char const * a, unsigned long b=0) -> VectorException
        __init__(gpstk::VectorException self, char const * a) -> VectorException
        """
        this = _gpstk.new_VectorException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_VectorException
    __del__ = lambda self: None

    def getName(self):
        """getName(VectorException self) -> std::string"""
        return _gpstk.VectorException_getName(self)

VectorException_swigregister = _gpstk.VectorException_swigregister
VectorException_swigregister(VectorException)

class RefVectorBaseHelper(_object):
    """Proxy of C++ gpstk::RefVectorBaseHelper class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefVectorBaseHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefVectorBaseHelper, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::RefVectorBaseHelper self) -> RefVectorBaseHelper"""
        this = _gpstk.new_RefVectorBaseHelper()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_RefVectorBaseHelper
    __del__ = lambda self: None
RefVectorBaseHelper_swigregister = _gpstk.RefVectorBaseHelper_swigregister
RefVectorBaseHelper_swigregister(RefVectorBaseHelper)

class ConstVectorBase_double(_object):
    """Proxy of C++ gpstk::ConstVectorBase<(double,Vector<(double)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstVectorBase_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstVectorBase_double, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::ConstVectorBase<(double,Vector<(double)>)> self) -> ConstVectorBase_double"""
        this = _gpstk.new_ConstVectorBase_double()
        try:
            self.this.append(this)
        except:
            self.this = this

    def size(self):
        """size(ConstVectorBase_double self) -> size_t"""
        return _gpstk.ConstVectorBase_double_size(self)


    def __call__(self, i):
        """__call__(ConstVectorBase_double self, size_t i) -> double"""
        return _gpstk.ConstVectorBase_double___call__(self, i)

    __swig_destroy__ = _gpstk.delete_ConstVectorBase_double
    __del__ = lambda self: None
ConstVectorBase_double_swigregister = _gpstk.ConstVectorBase_double_swigregister
ConstVectorBase_double_swigregister(ConstVectorBase_double)

class RefVectorBase_double(ConstVectorBase_double, RefVectorBaseHelper):
    """Proxy of C++ gpstk::RefVectorBase<(double,Vector<(double)>)> class"""
    __swig_setmethods__ = {}
    for _s in [ConstVectorBase_double, RefVectorBaseHelper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefVectorBase_double, name, value)
    __swig_getmethods__ = {}
    for _s in [ConstVectorBase_double, RefVectorBaseHelper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RefVectorBase_double, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::RefVectorBase<(double,Vector<(double)>)> self) -> RefVectorBase_double"""
        this = _gpstk.new_RefVectorBase_double()
        try:
            self.this.append(this)
        except:
            self.this = this

    def assignFrom(self, *args):
        """
        assignFrom(RefVectorBase_double self, std::valarray< double > const & x) -> vector
        assignFrom(RefVectorBase_double self, double const * x) -> vector
        assignFrom(RefVectorBase_double self, double x) -> vector
        """
        return _gpstk.RefVectorBase_double_assignFrom(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(RefVectorBase_double self, std::valarray< double > const & x) -> vector
        __iadd__(RefVectorBase_double self, double const * x) -> vector
        __iadd__(RefVectorBase_double self, double x) -> vector
        """
        return _gpstk.RefVectorBase_double___iadd__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(RefVectorBase_double self, std::valarray< double > const & x) -> vector
        __isub__(RefVectorBase_double self, double const * x) -> vector
        __isub__(RefVectorBase_double self, double x) -> vector
        """
        return _gpstk.RefVectorBase_double___isub__(self, *args)


    def __imul__(self, *args):
        """
        __imul__(RefVectorBase_double self, std::valarray< double > const & x) -> vector
        __imul__(RefVectorBase_double self, double const * x) -> vector
        __imul__(RefVectorBase_double self, double x) -> vector
        """
        return _gpstk.RefVectorBase_double___imul__(self, *args)


    def __idiv__(self, *args):
        """
        __idiv__(RefVectorBase_double self, std::valarray< double > const & x) -> vector
        __idiv__(RefVectorBase_double self, double const * x) -> vector
        __idiv__(RefVectorBase_double self, double x) -> vector
        """
        return _gpstk.RefVectorBase_double___idiv__(self, *args)


    def __neg__(self):
        """__neg__(RefVectorBase_double self) -> vector"""
        return _gpstk.RefVectorBase_double___neg__(self)

    __swig_destroy__ = _gpstk.delete_RefVectorBase_double
    __del__ = lambda self: None
RefVectorBase_double_swigregister = _gpstk.RefVectorBase_double_swigregister
RefVectorBase_double_swigregister(RefVectorBase_double)

class vector(RefVectorBase_double):
    """Proxy of C++ gpstk::Vector<(double)> class"""
    __swig_setmethods__ = {}
    for _s in [RefVectorBase_double]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector, name, value)
    __swig_getmethods__ = {}
    for _s in [RefVectorBase_double]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, vector, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_vector
    __del__ = lambda self: None

    def empty(self):
        """empty(vector self) -> bool"""
        return _gpstk.vector_empty(self)


    def max_size(self):
        """max_size(vector self) -> size_t"""
        return _gpstk.vector_max_size(self)


    def resize(self, *args):
        """
        resize(vector self, size_t const index) -> vector
        resize(vector self, size_t const index, double const defaultValue) -> vector
        """
        return _gpstk.vector_resize(self, *args)


    def toStdVector(self):
        """toStdVector(vector self) -> vector_double"""
        return _gpstk.vector_toStdVector(self)


    def __init__(self, *args):
        """
        __init__(gpstk::Vector<(double)> self) -> vector
        __init__(gpstk::Vector<(double)> self, size_t siz) -> vector
        __init__(gpstk::Vector<(double)> self, size_t siz, double const defaultValue) -> vector
        __init__(gpstk::Vector<(double)> self, vector r) -> vector
        __init__(gpstk::Vector<(double)> self, vector_double input) -> vector
        """
        this = _gpstk.new_vector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __getitem__(self, i):
        """__getitem__(vector self, unsigned int i) -> double"""
        return _gpstk.vector___getitem__(self, i)


    def concatenate(self, b):
        """concatenate(vector self, vector b) -> vector"""
        return _gpstk.vector_concatenate(self, b)


    def __str__(self):
        """__str__(vector self) -> std::string"""
        return _gpstk.vector___str__(self)

vector_swigregister = _gpstk.vector_swigregister
vector_swigregister(vector)


vector.__len__ = lambda self: self.size()

def __iter__(self):
    self.index = 0
    return self
vector.__iter__ = __iter__

def next(self):
      if self.index >= len(self):
        raise StopIteration
      else:
        self.index += 1
        return self[self.index - 1]
vector.next = next


def CIS2CTS(posCIS, t):
    """CIS2CTS(Triple posCIS, CommonTime t) -> Triple"""
    return _gpstk.CIS2CTS(posCIS, t)

def UTC2SID(t):
    """UTC2SID(CommonTime t) -> double"""
    return _gpstk.UTC2SID(t)
class PZ90Ellipsoid(EllipsoidModel):
    """Proxy of C++ gpstk::PZ90Ellipsoid class"""
    __swig_setmethods__ = {}
    for _s in [EllipsoidModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PZ90Ellipsoid, name, value)
    __swig_getmethods__ = {}
    for _s in [EllipsoidModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PZ90Ellipsoid, name)
    __repr__ = _swig_repr

    def a(self):
        """a(PZ90Ellipsoid self) -> double"""
        return _gpstk.PZ90Ellipsoid_a(self)


    def a_km(self):
        """a_km(PZ90Ellipsoid self) -> double"""
        return _gpstk.PZ90Ellipsoid_a_km(self)


    def flatteningInverse(self):
        """flatteningInverse(PZ90Ellipsoid self) -> double"""
        return _gpstk.PZ90Ellipsoid_flatteningInverse(self)


    def flattening(self):
        """flattening(PZ90Ellipsoid self) -> double"""
        return _gpstk.PZ90Ellipsoid_flattening(self)


    def eccentricity(self):
        """eccentricity(PZ90Ellipsoid self) -> double"""
        return _gpstk.PZ90Ellipsoid_eccentricity(self)


    def eccSquared(self):
        """eccSquared(PZ90Ellipsoid self) -> double"""
        return _gpstk.PZ90Ellipsoid_eccSquared(self)


    def angVelocity(self):
        """angVelocity(PZ90Ellipsoid self) -> double"""
        return _gpstk.PZ90Ellipsoid_angVelocity(self)


    def gm(self):
        """gm(PZ90Ellipsoid self) -> double"""
        return _gpstk.PZ90Ellipsoid_gm(self)


    def gm_km(self):
        """gm_km(PZ90Ellipsoid self) -> double"""
        return _gpstk.PZ90Ellipsoid_gm_km(self)


    def c(self):
        """c(PZ90Ellipsoid self) -> double"""
        return _gpstk.PZ90Ellipsoid_c(self)


    def c_km(self):
        """c_km(PZ90Ellipsoid self) -> double"""
        return _gpstk.PZ90Ellipsoid_c_km(self)


    def j20(self):
        """j20(PZ90Ellipsoid self) -> double"""
        return _gpstk.PZ90Ellipsoid_j20(self)

    __swig_destroy__ = _gpstk.delete_PZ90Ellipsoid
    __del__ = lambda self: None

    def __init__(self):
        """__init__(gpstk::PZ90Ellipsoid self) -> PZ90Ellipsoid"""
        this = _gpstk.new_PZ90Ellipsoid()
        try:
            self.this.append(this)
        except:
            self.this = this
PZ90Ellipsoid_swigregister = _gpstk.PZ90Ellipsoid_swigregister
PZ90Ellipsoid_swigregister(PZ90Ellipsoid)
AU_CONST = cvar.AU_CONST
MeanEarthMoonBary = cvar.MeanEarthMoonBary
MU_SUN = cvar.MU_SUN
MU_MOON = cvar.MU_MOON
EarthGrav = cvar.EarthGrav
D2R = cvar.D2R
DAS2R = cvar.DAS2R
DS2R = cvar.DS2R
B1950 = cvar.B1950
ERADAU = cvar.ERADAU

class WGS84Ellipsoid(EllipsoidModel):
    """Proxy of C++ gpstk::WGS84Ellipsoid class"""
    __swig_setmethods__ = {}
    for _s in [EllipsoidModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WGS84Ellipsoid, name, value)
    __swig_getmethods__ = {}
    for _s in [EllipsoidModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, WGS84Ellipsoid, name)
    __repr__ = _swig_repr

    def a(self):
        """a(WGS84Ellipsoid self) -> double"""
        return _gpstk.WGS84Ellipsoid_a(self)


    def a_km(self):
        """a_km(WGS84Ellipsoid self) -> double"""
        return _gpstk.WGS84Ellipsoid_a_km(self)


    def flattening(self):
        """flattening(WGS84Ellipsoid self) -> double"""
        return _gpstk.WGS84Ellipsoid_flattening(self)


    def eccentricity(self):
        """eccentricity(WGS84Ellipsoid self) -> double"""
        return _gpstk.WGS84Ellipsoid_eccentricity(self)


    def eccSquared(self):
        """eccSquared(WGS84Ellipsoid self) -> double"""
        return _gpstk.WGS84Ellipsoid_eccSquared(self)


    def angVelocity(self):
        """angVelocity(WGS84Ellipsoid self) -> double"""
        return _gpstk.WGS84Ellipsoid_angVelocity(self)


    def gm(self):
        """gm(WGS84Ellipsoid self) -> double"""
        return _gpstk.WGS84Ellipsoid_gm(self)


    def gm_km(self):
        """gm_km(WGS84Ellipsoid self) -> double"""
        return _gpstk.WGS84Ellipsoid_gm_km(self)


    def c(self):
        """c(WGS84Ellipsoid self) -> double"""
        return _gpstk.WGS84Ellipsoid_c(self)


    def c_km(self):
        """c_km(WGS84Ellipsoid self) -> double"""
        return _gpstk.WGS84Ellipsoid_c_km(self)

    __swig_destroy__ = _gpstk.delete_WGS84Ellipsoid
    __del__ = lambda self: None

    def __init__(self):
        """__init__(gpstk::WGS84Ellipsoid self) -> WGS84Ellipsoid"""
        this = _gpstk.new_WGS84Ellipsoid()
        try:
            self.this.append(this)
        except:
            self.this = this
WGS84Ellipsoid_swigregister = _gpstk.WGS84Ellipsoid_swigregister
WGS84Ellipsoid_swigregister(WGS84Ellipsoid)

class XvtStore_SatID(_object):
    """Proxy of C++ gpstk::XvtStore<(gpstk::SatID)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XvtStore_SatID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XvtStore_SatID, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_XvtStore_SatID
    __del__ = lambda self: None

    def getXvt(self, id, t):
        """getXvt(XvtStore_SatID self, SatID id, CommonTime t) -> Xvt"""
        return _gpstk.XvtStore_SatID_getXvt(self, id, t)


    def edit(self, *args):
        """
        edit(XvtStore_SatID self, CommonTime tmin, CommonTime tmax)
        edit(XvtStore_SatID self, CommonTime tmin)
        """
        return _gpstk.XvtStore_SatID_edit(self, *args)


    def clear(self):
        """clear(XvtStore_SatID self)"""
        return _gpstk.XvtStore_SatID_clear(self)


    def getTimeSystem(self):
        """getTimeSystem(XvtStore_SatID self) -> TimeSystem"""
        return _gpstk.XvtStore_SatID_getTimeSystem(self)


    def getInitialTime(self):
        """getInitialTime(XvtStore_SatID self) -> CommonTime"""
        return _gpstk.XvtStore_SatID_getInitialTime(self)


    def getFinalTime(self):
        """getFinalTime(XvtStore_SatID self) -> CommonTime"""
        return _gpstk.XvtStore_SatID_getFinalTime(self)


    def hasVelocity(self):
        """hasVelocity(XvtStore_SatID self) -> bool"""
        return _gpstk.XvtStore_SatID_hasVelocity(self)


    def isPresent(self, id):
        """isPresent(XvtStore_SatID self, SatID id) -> bool"""
        return _gpstk.XvtStore_SatID_isPresent(self, id)

XvtStore_SatID_swigregister = _gpstk.XvtStore_SatID_swigregister
XvtStore_SatID_swigregister(XvtStore_SatID)

class XvtStore_string(_object):
    """Proxy of C++ gpstk::XvtStore<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XvtStore_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XvtStore_string, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_XvtStore_string
    __del__ = lambda self: None

    def getXvt(self, id, t):
        """getXvt(XvtStore_string self, std::string const & id, CommonTime t) -> Xvt"""
        return _gpstk.XvtStore_string_getXvt(self, id, t)


    def edit(self, *args):
        """
        edit(XvtStore_string self, CommonTime tmin, CommonTime tmax)
        edit(XvtStore_string self, CommonTime tmin)
        """
        return _gpstk.XvtStore_string_edit(self, *args)


    def clear(self):
        """clear(XvtStore_string self)"""
        return _gpstk.XvtStore_string_clear(self)


    def getTimeSystem(self):
        """getTimeSystem(XvtStore_string self) -> TimeSystem"""
        return _gpstk.XvtStore_string_getTimeSystem(self)


    def getInitialTime(self):
        """getInitialTime(XvtStore_string self) -> CommonTime"""
        return _gpstk.XvtStore_string_getInitialTime(self)


    def getFinalTime(self):
        """getFinalTime(XvtStore_string self) -> CommonTime"""
        return _gpstk.XvtStore_string_getFinalTime(self)


    def hasVelocity(self):
        """hasVelocity(XvtStore_string self) -> bool"""
        return _gpstk.XvtStore_string_hasVelocity(self)


    def isPresent(self, id):
        """isPresent(XvtStore_string self, std::string const & id) -> bool"""
        return _gpstk.XvtStore_string_isPresent(self, id)

XvtStore_string_swigregister = _gpstk.XvtStore_string_swigregister
XvtStore_string_swigregister(XvtStore_string)

class CRCException(Exception):
    """Proxy of C++ gpstk::BinUtils::CRCException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRCException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CRCException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::BinUtils::CRCException self) -> CRCException
        __init__(gpstk::BinUtils::CRCException self, CRCException a) -> CRCException
        __init__(gpstk::BinUtils::CRCException self, Exception a) -> CRCException
        __init__(gpstk::BinUtils::CRCException self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> CRCException
        __init__(gpstk::BinUtils::CRCException self, std::string const & a, unsigned long b=0) -> CRCException
        __init__(gpstk::BinUtils::CRCException self, std::string const & a) -> CRCException
        __init__(gpstk::BinUtils::CRCException self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> CRCException
        __init__(gpstk::BinUtils::CRCException self, char const * a, unsigned long b=0) -> CRCException
        __init__(gpstk::BinUtils::CRCException self, char const * a) -> CRCException
        """
        this = _gpstk.new_CRCException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_CRCException
    __del__ = lambda self: None

    def getName(self):
        """getName(CRCException self) -> std::string"""
        return _gpstk.CRCException_getName(self)

CRCException_swigregister = _gpstk.CRCException_swigregister
CRCException_swigregister(CRCException)


def reflect(crc, bitnum):
    """reflect(unsigned long crc, int bitnum) -> unsigned long"""
    return _gpstk.reflect(crc, bitnum)
class CRCParam(_object):
    """Proxy of C++ gpstk::BinUtils::CRCParam class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRCParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRCParam, name)
    __repr__ = _swig_repr

    def __init__(self, o, p, i, f, d, ri, ro):
        """__init__(gpstk::BinUtils::CRCParam self, int o, unsigned long p, unsigned long i, unsigned long f, bool d, bool ri, bool ro) -> CRCParam"""
        this = _gpstk.new_CRCParam(o, p, i, f, d, ri, ro)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["order"] = _gpstk.CRCParam_order_set
    __swig_getmethods__["order"] = _gpstk.CRCParam_order_get
    if _newclass:
        order = _swig_property(_gpstk.CRCParam_order_get, _gpstk.CRCParam_order_set)
    __swig_setmethods__["polynom"] = _gpstk.CRCParam_polynom_set
    __swig_getmethods__["polynom"] = _gpstk.CRCParam_polynom_get
    if _newclass:
        polynom = _swig_property(_gpstk.CRCParam_polynom_get, _gpstk.CRCParam_polynom_set)
    __swig_setmethods__["initial"] = _gpstk.CRCParam_initial_set
    __swig_getmethods__["initial"] = _gpstk.CRCParam_initial_get
    if _newclass:
        initial = _swig_property(_gpstk.CRCParam_initial_get, _gpstk.CRCParam_initial_set)
    __swig_setmethods__["final"] = _gpstk.CRCParam_final_set
    __swig_getmethods__["final"] = _gpstk.CRCParam_final_get
    if _newclass:
        final = _swig_property(_gpstk.CRCParam_final_get, _gpstk.CRCParam_final_set)
    __swig_setmethods__["direct"] = _gpstk.CRCParam_direct_set
    __swig_getmethods__["direct"] = _gpstk.CRCParam_direct_get
    if _newclass:
        direct = _swig_property(_gpstk.CRCParam_direct_get, _gpstk.CRCParam_direct_set)
    __swig_setmethods__["refin"] = _gpstk.CRCParam_refin_set
    __swig_getmethods__["refin"] = _gpstk.CRCParam_refin_get
    if _newclass:
        refin = _swig_property(_gpstk.CRCParam_refin_get, _gpstk.CRCParam_refin_set)
    __swig_setmethods__["refout"] = _gpstk.CRCParam_refout_set
    __swig_getmethods__["refout"] = _gpstk.CRCParam_refout_get
    if _newclass:
        refout = _swig_property(_gpstk.CRCParam_refout_get, _gpstk.CRCParam_refout_set)
    __swig_destroy__ = _gpstk.delete_CRCParam
    __del__ = lambda self: None
CRCParam_swigregister = _gpstk.CRCParam_swigregister
CRCParam_swigregister(CRCParam)


def computeCRC(data, len, params):
    """computeCRC(unsigned char const * data, unsigned long len, CRCParam params) -> unsigned long"""
    return _gpstk.computeCRC(data, len, params)

def countBits(v):
    """countBits(uint32_t v) -> unsigned short"""
    return _gpstk.countBits(v)
class FFData(_object):
    """Proxy of C++ gpstk::FFData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FFData, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_FFData
    __del__ = lambda self: None

    def putRecord(self, s):
        """putRecord(FFData self, FFStream s)"""
        return _gpstk.FFData_putRecord(self, s)


    def getRecord(self, s):
        """getRecord(FFData self, FFStream s)"""
        return _gpstk.FFData_getRecord(self, s)


    def isHeader(self):
        """isHeader(FFData self) -> bool"""
        return _gpstk.FFData_isHeader(self)


    def isData(self):
        """isData(FFData self) -> bool"""
        return _gpstk.FFData_isData(self)

FFData_swigregister = _gpstk.FFData_swigregister
FFData_swigregister(FFData)
CRCCCITT = cvar.CRCCCITT
CRC16 = cvar.CRC16
CRC32 = cvar.CRC32
CRC24Q = cvar.CRC24Q

class EngNav(_object):
    """Proxy of C++ gpstk::EngNav class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EngNav, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EngNav, name)
    __repr__ = _swig_repr
    BITS8 = _gpstk.EngNav_BITS8
    BITS10 = _gpstk.EngNav_BITS10

    def __init__(self):
        """__init__(gpstk::EngNav self) -> EngNav"""
        this = _gpstk.new_EngNav()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_EngNav
    __del__ = lambda self: None

    def computeParity(sfword, psfword, knownUpright=True):
        """
        computeParity(uint32_t sfword, uint32_t psfword, bool knownUpright=True) -> uint32_t
        computeParity(uint32_t sfword, uint32_t psfword) -> uint32_t
        """
        return _gpstk.EngNav_computeParity(sfword, psfword, knownUpright)

    if _newclass:
        computeParity = staticmethod(computeParity)
    __swig_getmethods__["computeParity"] = lambda x: computeParity

    def fixParity(sfword, psfword, nib):
        """fixParity(uint32_t sfword, uint32_t psfword, bool nib) -> uint32_t"""
        return _gpstk.EngNav_fixParity(sfword, psfword, nib)

    if _newclass:
        fixParity = staticmethod(fixParity)
    __swig_getmethods__["fixParity"] = lambda x: fixParity

    def checkParity(*args):
        """
        checkParity(uint32_t const [10] input, bool knownUpright=True) -> bool
        checkParity(uint32_t const [10] input) -> bool
        checkParity(std::vector< uint32_t,std::allocator< uint32_t > > const & v, bool knownUpright=True) -> bool
        checkParity(std::vector< uint32_t,std::allocator< uint32_t > > const & v) -> bool
        """
        return _gpstk.EngNav_checkParity(*args)

    if _newclass:
        checkParity = staticmethod(checkParity)
    __swig_getmethods__["checkParity"] = lambda x: checkParity

    def subframeParity(input):
        """subframeParity(long const [10] input) -> bool"""
        return _gpstk.EngNav_subframeParity(input)

    if _newclass:
        subframeParity = staticmethod(subframeParity)
    __swig_getmethods__["subframeParity"] = lambda x: subframeParity

    def getd30(sfword):
        """getd30(uint32_t sfword) -> uint32_t"""
        return _gpstk.EngNav_getd30(sfword)

    if _newclass:
        getd30 = staticmethod(getd30)
    __swig_getmethods__["getd30"] = lambda x: getd30

    def getd29(sfword):
        """getd29(uint32_t sfword) -> uint32_t"""
        return _gpstk.EngNav_getd29(sfword)

    if _newclass:
        getd29 = staticmethod(getd29)
    __swig_getmethods__["getd29"] = lambda x: getd29

    def getHOWTime(word2):
        """getHOWTime(uint32_t word2) -> unsigned long"""
        return _gpstk.EngNav_getHOWTime(word2)

    if _newclass:
        getHOWTime = staticmethod(getHOWTime)
    __swig_getmethods__["getHOWTime"] = lambda x: getHOWTime

    def getSFID(word2):
        """getSFID(uint32_t word2) -> short"""
        return _gpstk.EngNav_getSFID(word2)

    if _newclass:
        getSFID = staticmethod(getSFID)
    __swig_getmethods__["getSFID"] = lambda x: getSFID

    def subframeConvert(*args):
        """
        subframeConvert(long const [10] input, int gpsWeek, double [60] output) -> bool
        subframeConvert(uint32_t const [10] input, short gpsWeek, double [60] output) -> bool
        """
        return _gpstk.EngNav_subframeConvert(*args)

    if _newclass:
        subframeConvert = staticmethod(subframeConvert)
    __swig_getmethods__["subframeConvert"] = lambda x: subframeConvert

    def convert8bit(gpsWeek, out):
        """convert8bit(int gpsWeek, double * out) -> bool"""
        return _gpstk.EngNav_convert8bit(gpsWeek, out)

    if _newclass:
        convert8bit = staticmethod(convert8bit)
    __swig_getmethods__["convert8bit"] = lambda x: convert8bit

    def convert10bit(gpsWeek, out):
        """convert10bit(int gpsWeek, double * out) -> bool"""
        return _gpstk.EngNav_convert10bit(gpsWeek, out)

    if _newclass:
        convert10bit = staticmethod(convert10bit)
    __swig_getmethods__["convert10bit"] = lambda x: convert10bit

    def convertXBit(fullGPSWeek, incompleteGPSWeek, type):
        """convertXBit(short fullGPSWeek, short incompleteGPSWeek, gpstk::EngNav::BitConvertType type) -> short"""
        return _gpstk.EngNav_convertXBit(fullGPSWeek, incompleteGPSWeek, type)

    if _newclass:
        convertXBit = staticmethod(convertXBit)
    __swig_getmethods__["convertXBit"] = lambda x: convertXBit

    def getSubframePattern(*args):
        """
        getSubframePattern(long const [10] input) -> short
        getSubframePattern(uint32_t const [10] input) -> short
        """
        return _gpstk.EngNav_getSubframePattern(*args)

    if _newclass:
        getSubframePattern = staticmethod(getSubframePattern)
    __swig_getmethods__["getSubframePattern"] = lambda x: getSubframePattern

    def __str__(self):
        """__str__(EngNav self) -> std::string"""
        return _gpstk.EngNav___str__(self)

EngNav_swigregister = _gpstk.EngNav_swigregister
EngNav_swigregister(EngNav)

def EngNav_computeParity(sfword, psfword, knownUpright=True):
    """
    computeParity(uint32_t sfword, uint32_t psfword, bool knownUpright=True) -> uint32_t
    EngNav_computeParity(uint32_t sfword, uint32_t psfword) -> uint32_t
    """
    return _gpstk.EngNav_computeParity(sfword, psfword, knownUpright)

def EngNav_fixParity(sfword, psfword, nib):
    """EngNav_fixParity(uint32_t sfword, uint32_t psfword, bool nib) -> uint32_t"""
    return _gpstk.EngNav_fixParity(sfword, psfword, nib)

def EngNav_checkParity(*args):
    """
    checkParity(uint32_t const [10] input, bool knownUpright=True) -> bool
    checkParity(uint32_t const [10] input) -> bool
    checkParity(std::vector< uint32_t,std::allocator< uint32_t > > const & v, bool knownUpright=True) -> bool
    EngNav_checkParity(std::vector< uint32_t,std::allocator< uint32_t > > const & v) -> bool
    """
    return _gpstk.EngNav_checkParity(*args)

def EngNav_subframeParity(input):
    """EngNav_subframeParity(long const [10] input) -> bool"""
    return _gpstk.EngNav_subframeParity(input)

def EngNav_getd30(sfword):
    """EngNav_getd30(uint32_t sfword) -> uint32_t"""
    return _gpstk.EngNav_getd30(sfword)

def EngNav_getd29(sfword):
    """EngNav_getd29(uint32_t sfword) -> uint32_t"""
    return _gpstk.EngNav_getd29(sfword)

def EngNav_getHOWTime(word2):
    """EngNav_getHOWTime(uint32_t word2) -> unsigned long"""
    return _gpstk.EngNav_getHOWTime(word2)

def EngNav_getSFID(word2):
    """EngNav_getSFID(uint32_t word2) -> short"""
    return _gpstk.EngNav_getSFID(word2)

def EngNav_subframeConvert(*args):
    """
    subframeConvert(long const [10] input, int gpsWeek, double [60] output) -> bool
    EngNav_subframeConvert(uint32_t const [10] input, short gpsWeek, double [60] output) -> bool
    """
    return _gpstk.EngNav_subframeConvert(*args)

def EngNav_convert8bit(gpsWeek, out):
    """EngNav_convert8bit(int gpsWeek, double * out) -> bool"""
    return _gpstk.EngNav_convert8bit(gpsWeek, out)

def EngNav_convert10bit(gpsWeek, out):
    """EngNav_convert10bit(int gpsWeek, double * out) -> bool"""
    return _gpstk.EngNav_convert10bit(gpsWeek, out)

def EngNav_convertXBit(fullGPSWeek, incompleteGPSWeek, type):
    """EngNav_convertXBit(short fullGPSWeek, short incompleteGPSWeek, gpstk::EngNav::BitConvertType type) -> short"""
    return _gpstk.EngNav_convertXBit(fullGPSWeek, incompleteGPSWeek, type)

def EngNav_getSubframePattern(*args):
    """
    getSubframePattern(long const [10] input) -> short
    EngNav_getSubframePattern(uint32_t const [10] input) -> short
    """
    return _gpstk.EngNav_getSubframePattern(*args)

class YumaBase(FFData):
    """Proxy of C++ gpstk::YumaBase class"""
    __swig_setmethods__ = {}
    for _s in [FFData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YumaBase, name, value)
    __swig_getmethods__ = {}
    for _s in [FFData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YumaBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_YumaBase
    __del__ = lambda self: None
YumaBase_swigregister = _gpstk.YumaBase_swigregister
YumaBase_swigregister(YumaBase)

class EndOfFile(FFStreamError):
    """Proxy of C++ gpstk::EndOfFile class"""
    __swig_setmethods__ = {}
    for _s in [FFStreamError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EndOfFile, name, value)
    __swig_getmethods__ = {}
    for _s in [FFStreamError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EndOfFile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::EndOfFile self) -> EndOfFile
        __init__(gpstk::EndOfFile self, EndOfFile a) -> EndOfFile
        __init__(gpstk::EndOfFile self, Exception a) -> EndOfFile
        __init__(gpstk::EndOfFile self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> EndOfFile
        __init__(gpstk::EndOfFile self, std::string const & a, unsigned long b=0) -> EndOfFile
        __init__(gpstk::EndOfFile self, std::string const & a) -> EndOfFile
        __init__(gpstk::EndOfFile self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> EndOfFile
        __init__(gpstk::EndOfFile self, char const * a, unsigned long b=0) -> EndOfFile
        __init__(gpstk::EndOfFile self, char const * a) -> EndOfFile
        """
        this = _gpstk.new_EndOfFile(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_EndOfFile
    __del__ = lambda self: None

    def getName(self):
        """getName(EndOfFile self) -> std::string"""
        return _gpstk.EndOfFile_getName(self)

EndOfFile_swigregister = _gpstk.EndOfFile_swigregister
EndOfFile_swigregister(EndOfFile)

class FFStream(_object):
    """Proxy of C++ gpstk::FFStream class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFStream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FFStream, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_FFStream
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(gpstk::FFStream self) -> FFStream
        __init__(gpstk::FFStream self, char const * fn, std::ios::openmode mode) -> FFStream
        __init__(gpstk::FFStream self, char const * fn) -> FFStream
        __init__(gpstk::FFStream self, std::string const & fn, std::ios::openmode mode) -> FFStream
        __init__(gpstk::FFStream self, std::string const & fn) -> FFStream
        """
        this = _gpstk.new_FFStream(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def open(self, *args):
        """
        open(FFStream self, char const * fn, std::ios::openmode mode)
        open(FFStream self, std::string const & fn, std::ios::openmode mode)
        """
        return _gpstk.FFStream_open(self, *args)


    def dumpState(self, *args):
        """
        dumpState(FFStream self, std::ostream & s)
        dumpState(FFStream self)
        """
        return _gpstk.FFStream_dumpState(self, *args)


    def conditionalThrow(self):
        """conditionalThrow(FFStream self)"""
        return _gpstk.FFStream_conditionalThrow(self)


    def IsFFStream(i):
        """IsFFStream(std::istream & i) -> bool"""
        return _gpstk.FFStream_IsFFStream(i)

    if _newclass:
        IsFFStream = staticmethod(IsFFStream)
    __swig_getmethods__["IsFFStream"] = lambda x: IsFFStream
    __swig_setmethods__["mostRecentException"] = _gpstk.FFStream_mostRecentException_set
    __swig_getmethods__["mostRecentException"] = _gpstk.FFStream_mostRecentException_get
    if _newclass:
        mostRecentException = _swig_property(_gpstk.FFStream_mostRecentException_get, _gpstk.FFStream_mostRecentException_set)
    __swig_setmethods__["recordNumber"] = _gpstk.FFStream_recordNumber_set
    __swig_getmethods__["recordNumber"] = _gpstk.FFStream_recordNumber_get
    if _newclass:
        recordNumber = _swig_property(_gpstk.FFStream_recordNumber_get, _gpstk.FFStream_recordNumber_set)
    __swig_setmethods__["filename"] = _gpstk.FFStream_filename_set
    __swig_getmethods__["filename"] = _gpstk.FFStream_filename_get
    if _newclass:
        filename = _swig_property(_gpstk.FFStream_filename_get, _gpstk.FFStream_filename_set)
FFStream_swigregister = _gpstk.FFStream_swigregister
FFStream_swigregister(FFStream)

def FFStream_IsFFStream(i):
    """FFStream_IsFFStream(std::istream & i) -> bool"""
    return _gpstk.FFStream_IsFFStream(i)

class FFTextStream(FFStream):
    """Proxy of C++ gpstk::FFTextStream class"""
    __swig_setmethods__ = {}
    for _s in [FFStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFTextStream, name, value)
    __swig_getmethods__ = {}
    for _s in [FFStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FFTextStream, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_FFTextStream
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(gpstk::FFTextStream self) -> FFTextStream
        __init__(gpstk::FFTextStream self, char const * fn, std::ios::openmode mode) -> FFTextStream
        __init__(gpstk::FFTextStream self, char const * fn) -> FFTextStream
        __init__(gpstk::FFTextStream self, std::string const & fn, std::ios::openmode mode) -> FFTextStream
        __init__(gpstk::FFTextStream self, std::string const & fn) -> FFTextStream
        """
        this = _gpstk.new_FFTextStream(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def open(self, *args):
        """
        open(FFTextStream self, char const * fn, std::ios::openmode mode)
        open(FFTextStream self, std::string const & fn, std::ios::openmode mode)
        """
        return _gpstk.FFTextStream_open(self, *args)

    __swig_setmethods__["lineNumber"] = _gpstk.FFTextStream_lineNumber_set
    __swig_getmethods__["lineNumber"] = _gpstk.FFTextStream_lineNumber_get
    if _newclass:
        lineNumber = _swig_property(_gpstk.FFTextStream_lineNumber_get, _gpstk.FFTextStream_lineNumber_set)

    def formattedGetLine(self, line, expectEOF=False):
        """
        formattedGetLine(FFTextStream self, std::string & line, bool const expectEOF=False)
        formattedGetLine(FFTextStream self, std::string & line)
        """
        return _gpstk.FFTextStream_formattedGetLine(self, line, expectEOF)

FFTextStream_swigregister = _gpstk.FFTextStream_swigregister
FFTextStream_swigregister(FFTextStream)

class AlmOrbit(_object):
    """Proxy of C++ gpstk::AlmOrbit class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AlmOrbit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AlmOrbit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::AlmOrbit self) -> AlmOrbit
        __init__(gpstk::AlmOrbit self, short prn, double aEcc, double ai_offset, double aOMEGAdot, double aAhalf, double aOMEGA0, double aw, double aM0, double aAF0, double aAF1, long aToa, long axmit_time, short aweek, short aSV_health) -> AlmOrbit
        """
        this = _gpstk.new_AlmOrbit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def svXvt(self, t):
        """svXvt(AlmOrbit self, CommonTime t) -> Xvt"""
        return _gpstk.AlmOrbit_svXvt(self, t)


    def getPRNID(self):
        """getPRNID(AlmOrbit self) -> short"""
        return _gpstk.AlmOrbit_getPRNID(self)


    def getFullWeek(self):
        """getFullWeek(AlmOrbit self) -> short"""
        return _gpstk.AlmOrbit_getFullWeek(self)


    def getTransmitTime(self):
        """getTransmitTime(AlmOrbit self) -> CommonTime"""
        return _gpstk.AlmOrbit_getTransmitTime(self)


    def getToaTime(self):
        """getToaTime(AlmOrbit self) -> CommonTime"""
        return _gpstk.AlmOrbit_getToaTime(self)


    def getTimestamp(self):
        """getTimestamp(AlmOrbit self) -> CommonTime"""
        return _gpstk.AlmOrbit_getTimestamp(self)


    def getSVHealth(self):
        """getSVHealth(AlmOrbit self) -> short"""
        return _gpstk.AlmOrbit_getSVHealth(self)


    def getPRN(self):
        """getPRN(AlmOrbit self) -> short"""
        return _gpstk.AlmOrbit_getPRN(self)


    def getecc(self):
        """getecc(AlmOrbit self) -> double"""
        return _gpstk.AlmOrbit_getecc(self)


    def geti_offset(self):
        """geti_offset(AlmOrbit self) -> double"""
        return _gpstk.AlmOrbit_geti_offset(self)


    def getOMEGAdot(self):
        """getOMEGAdot(AlmOrbit self) -> double"""
        return _gpstk.AlmOrbit_getOMEGAdot(self)


    def getAhalf(self):
        """getAhalf(AlmOrbit self) -> double"""
        return _gpstk.AlmOrbit_getAhalf(self)


    def getOMEGA0(self):
        """getOMEGA0(AlmOrbit self) -> double"""
        return _gpstk.AlmOrbit_getOMEGA0(self)


    def getw(self):
        """getw(AlmOrbit self) -> double"""
        return _gpstk.AlmOrbit_getw(self)


    def getM0(self):
        """getM0(AlmOrbit self) -> double"""
        return _gpstk.AlmOrbit_getM0(self)


    def getAF0(self):
        """getAF0(AlmOrbit self) -> double"""
        return _gpstk.AlmOrbit_getAF0(self)


    def getAF1(self):
        """getAF1(AlmOrbit self) -> double"""
        return _gpstk.AlmOrbit_getAF1(self)


    def getToaSOW(self):
        """getToaSOW(AlmOrbit self) -> long"""
        return _gpstk.AlmOrbit_getToaSOW(self)


    def getxmit_time(self):
        """getxmit_time(AlmOrbit self) -> long"""
        return _gpstk.AlmOrbit_getxmit_time(self)


    def getToaWeek(self):
        """getToaWeek(AlmOrbit self) -> short"""
        return _gpstk.AlmOrbit_getToaWeek(self)


    def __str__(self):
        """__str__(AlmOrbit self) -> std::string"""
        return _gpstk.AlmOrbit___str__(self)

    __swig_destroy__ = _gpstk.delete_AlmOrbit
    __del__ = lambda self: None
AlmOrbit_swigregister = _gpstk.AlmOrbit_swigregister
AlmOrbit_swigregister(AlmOrbit)

class YumaHeader(YumaBase):
    """Proxy of C++ gpstk::YumaHeader class"""
    __swig_setmethods__ = {}
    for _s in [YumaBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YumaHeader, name, value)
    __swig_getmethods__ = {}
    for _s in [YumaBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YumaHeader, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::YumaHeader self) -> YumaHeader"""
        this = _gpstk.new_YumaHeader()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_YumaHeader
    __del__ = lambda self: None

    def isHeader(self):
        """isHeader(YumaHeader self) -> bool"""
        return _gpstk.YumaHeader_isHeader(self)


    def __str__(self):
        """__str__(YumaHeader self) -> std::string"""
        return _gpstk.YumaHeader___str__(self)

YumaHeader_swigregister = _gpstk.YumaHeader_swigregister
YumaHeader_swigregister(YumaHeader)

class SVNotPresentException(InvalidRequest):
    """Proxy of C++ gpstk::SVNotPresentException class"""
    __swig_setmethods__ = {}
    for _s in [InvalidRequest]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVNotPresentException, name, value)
    __swig_getmethods__ = {}
    for _s in [InvalidRequest]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SVNotPresentException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::SVNotPresentException self) -> SVNotPresentException
        __init__(gpstk::SVNotPresentException self, SVNotPresentException a) -> SVNotPresentException
        __init__(gpstk::SVNotPresentException self, Exception a) -> SVNotPresentException
        __init__(gpstk::SVNotPresentException self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> SVNotPresentException
        __init__(gpstk::SVNotPresentException self, std::string const & a, unsigned long b=0) -> SVNotPresentException
        __init__(gpstk::SVNotPresentException self, std::string const & a) -> SVNotPresentException
        __init__(gpstk::SVNotPresentException self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> SVNotPresentException
        __init__(gpstk::SVNotPresentException self, char const * a, unsigned long b=0) -> SVNotPresentException
        __init__(gpstk::SVNotPresentException self, char const * a) -> SVNotPresentException
        """
        this = _gpstk.new_SVNotPresentException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_SVNotPresentException
    __del__ = lambda self: None

    def getName(self):
        """getName(SVNotPresentException self) -> std::string"""
        return _gpstk.SVNotPresentException_getName(self)

SVNotPresentException_swigregister = _gpstk.SVNotPresentException_swigregister
SVNotPresentException_swigregister(SVNotPresentException)

class EngAlmanac(EngNav):
    """Proxy of C++ gpstk::EngAlmanac class"""
    __swig_setmethods__ = {}
    for _s in [EngNav]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EngAlmanac, name, value)
    __swig_getmethods__ = {}
    for _s in [EngNav]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EngAlmanac, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::EngAlmanac self) -> EngAlmanac"""
        this = _gpstk.new_EngAlmanac()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_EngAlmanac
    __del__ = lambda self: None

    def addSubframe(self, subframe, gpsWeek):
        """addSubframe(EngAlmanac self, long const [10] subframe, int const gpsWeek) -> bool"""
        return _gpstk.EngAlmanac_addSubframe(self, subframe, gpsWeek)


    def isData(self, sat):
        """isData(EngAlmanac self, SatID sat) -> bool"""
        return _gpstk.EngAlmanac_isData(self, sat)


    def getEcc(self, sat):
        """getEcc(EngAlmanac self, SatID sat) -> double"""
        return _gpstk.EngAlmanac_getEcc(self, sat)


    def getIOffset(self, sat):
        """getIOffset(EngAlmanac self, SatID sat) -> double"""
        return _gpstk.EngAlmanac_getIOffset(self, sat)


    def getOmegadot(self, sat):
        """getOmegadot(EngAlmanac self, SatID sat) -> double"""
        return _gpstk.EngAlmanac_getOmegadot(self, sat)


    def get6bitHealth(self, sat):
        """get6bitHealth(EngAlmanac self, SatID sat) -> short"""
        return _gpstk.EngAlmanac_get6bitHealth(self, sat)


    def getSVHealth(self, sat):
        """getSVHealth(EngAlmanac self, SatID sat) -> short"""
        return _gpstk.EngAlmanac_getSVHealth(self, sat)


    def getSVConfig(self, sat):
        """getSVConfig(EngAlmanac self, SatID sat) -> short"""
        return _gpstk.EngAlmanac_getSVConfig(self, sat)


    def getAhalf(self, sat):
        """getAhalf(EngAlmanac self, SatID sat) -> double"""
        return _gpstk.EngAlmanac_getAhalf(self, sat)


    def getA(self, sat):
        """getA(EngAlmanac self, SatID sat) -> double"""
        return _gpstk.EngAlmanac_getA(self, sat)


    def getOmega0(self, sat):
        """getOmega0(EngAlmanac self, SatID sat) -> double"""
        return _gpstk.EngAlmanac_getOmega0(self, sat)


    def getW(self, sat):
        """getW(EngAlmanac self, SatID sat) -> double"""
        return _gpstk.EngAlmanac_getW(self, sat)


    def getM0(self, sat):
        """getM0(EngAlmanac self, SatID sat) -> double"""
        return _gpstk.EngAlmanac_getM0(self, sat)


    def getAf0(self, sat):
        """getAf0(EngAlmanac self, SatID sat) -> double"""
        return _gpstk.EngAlmanac_getAf0(self, sat)


    def getAf1(self, sat):
        """getAf1(EngAlmanac self, SatID sat) -> double"""
        return _gpstk.EngAlmanac_getAf1(self, sat)


    def getToa(self, *args):
        """
        getToa(EngAlmanac self) -> double
        getToa(EngAlmanac self, SatID sat) -> double
        """
        return _gpstk.EngAlmanac_getToa(self, *args)


    def getXmitTime(self, sat):
        """getXmitTime(EngAlmanac self, SatID sat) -> double"""
        return _gpstk.EngAlmanac_getXmitTime(self, sat)


    def getFullWeek(self, sat):
        """getFullWeek(EngAlmanac self, SatID sat) -> short"""
        return _gpstk.EngAlmanac_getFullWeek(self, sat)


    def getIon(self, a, b):
        """getIon(EngAlmanac self, double [4] a, double [4] b)"""
        return _gpstk.EngAlmanac_getIon(self, a, b)


    def getAlmWeek(self):
        """getAlmWeek(EngAlmanac self) -> short"""
        return _gpstk.EngAlmanac_getAlmWeek(self)


    def getAlmOrbElem(self, sat):
        """getAlmOrbElem(EngAlmanac self, SatID sat) -> AlmOrbit"""
        return _gpstk.EngAlmanac_getAlmOrbElem(self, sat)


    def getAlmOrbElems(self):
        """getAlmOrbElems(EngAlmanac self) -> gpstk::AlmOrbits"""
        return _gpstk.EngAlmanac_getAlmOrbElems(self)


    def svXvt(self, *args):
        """
        svXvt(EngAlmanac self, SatID sat, CommonTime t) -> Xvt
        svXvt(EngAlmanac self, short prn, CommonTime t) -> Xvt
        """
        return _gpstk.EngAlmanac_svXvt(self, *args)


    def check(self, s):
        """check(EngAlmanac self, std::ostream & s) -> bool"""
        return _gpstk.EngAlmanac_check(self, s)


    def __str__(self):
        """__str__(EngAlmanac self) -> std::string"""
        return _gpstk.EngAlmanac___str__(self)

EngAlmanac_swigregister = _gpstk.EngAlmanac_swigregister
EngAlmanac_swigregister(EngAlmanac)

class OrbElem(_object):
    """Proxy of C++ gpstk::OrbElem class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrbElem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrbElem, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_OrbElem
    __del__ = lambda self: None

    def clone(self):
        """clone(OrbElem self) -> OrbElem"""
        return _gpstk.OrbElem_clone(self)


    def isValid(self, ct):
        """isValid(OrbElem self, CommonTime ct) -> bool"""
        return _gpstk.OrbElem_isValid(self, ct)


    def dataLoaded(self):
        """dataLoaded(OrbElem self) -> bool"""
        return _gpstk.OrbElem_dataLoaded(self)


    def getName(self):
        """getName(OrbElem self) -> std::string"""
        return _gpstk.OrbElem_getName(self)


    def getNameLong(self):
        """getNameLong(OrbElem self) -> std::string"""
        return _gpstk.OrbElem_getNameLong(self)


    def isHealthy(self):
        """isHealthy(OrbElem self) -> bool"""
        return _gpstk.OrbElem_isHealthy(self)


    def svClockBias(self, t):
        """svClockBias(OrbElem self, CommonTime t) -> double"""
        return _gpstk.OrbElem_svClockBias(self, t)


    def svClockBiasM(self, t):
        """svClockBiasM(OrbElem self, CommonTime t) -> double"""
        return _gpstk.OrbElem_svClockBiasM(self, t)


    def svClockDrift(self, t):
        """svClockDrift(OrbElem self, CommonTime t) -> double"""
        return _gpstk.OrbElem_svClockDrift(self, t)


    def svXvt(self, t):
        """svXvt(OrbElem self, CommonTime t) -> Xvt"""
        return _gpstk.OrbElem_svXvt(self, t)


    def svRelativity(self, t):
        """svRelativity(OrbElem self, CommonTime t) -> double"""
        return _gpstk.OrbElem_svRelativity(self, t)


    def adjustBeginningValidity(self):
        """adjustBeginningValidity(OrbElem self)"""
        return _gpstk.OrbElem_adjustBeginningValidity(self)


    def shortcut(os, HOW):
        """shortcut(std::ostream & os, long const HOW)"""
        return _gpstk.OrbElem_shortcut(os, HOW)

    if _newclass:
        shortcut = staticmethod(shortcut)
    __swig_getmethods__["shortcut"] = lambda x: shortcut

    def timeDisplay(os, t):
        """timeDisplay(std::ostream & os, CommonTime t)"""
        return _gpstk.OrbElem_timeDisplay(os, t)

    if _newclass:
        timeDisplay = staticmethod(timeDisplay)
    __swig_getmethods__["timeDisplay"] = lambda x: timeDisplay

    def dumpTerse(self, *args):
        """
        dumpTerse(OrbElem self, std::ostream & s)
        dumpTerse(OrbElem self)
        """
        return _gpstk.OrbElem_dumpTerse(self, *args)


    def dumpHeader(self, *args):
        """
        dumpHeader(OrbElem self, std::ostream & s)
        dumpHeader(OrbElem self)
        """
        return _gpstk.OrbElem_dumpHeader(self, *args)


    def dumpBody(self, *args):
        """
        dumpBody(OrbElem self, std::ostream & s)
        dumpBody(OrbElem self)
        """
        return _gpstk.OrbElem_dumpBody(self, *args)


    def dumpFooter(self, *args):
        """
        dumpFooter(OrbElem self, std::ostream & s)
        dumpFooter(OrbElem self)
        """
        return _gpstk.OrbElem_dumpFooter(self, *args)

    __swig_setmethods__["dataLoadedFlag"] = _gpstk.OrbElem_dataLoadedFlag_set
    __swig_getmethods__["dataLoadedFlag"] = _gpstk.OrbElem_dataLoadedFlag_get
    if _newclass:
        dataLoadedFlag = _swig_property(_gpstk.OrbElem_dataLoadedFlag_get, _gpstk.OrbElem_dataLoadedFlag_set)
    __swig_setmethods__["satID"] = _gpstk.OrbElem_satID_set
    __swig_getmethods__["satID"] = _gpstk.OrbElem_satID_get
    if _newclass:
        satID = _swig_property(_gpstk.OrbElem_satID_get, _gpstk.OrbElem_satID_set)
    __swig_setmethods__["obsID"] = _gpstk.OrbElem_obsID_set
    __swig_getmethods__["obsID"] = _gpstk.OrbElem_obsID_get
    if _newclass:
        obsID = _swig_property(_gpstk.OrbElem_obsID_get, _gpstk.OrbElem_obsID_set)
    __swig_setmethods__["ctToe"] = _gpstk.OrbElem_ctToe_set
    __swig_getmethods__["ctToe"] = _gpstk.OrbElem_ctToe_get
    if _newclass:
        ctToe = _swig_property(_gpstk.OrbElem_ctToe_get, _gpstk.OrbElem_ctToe_set)
    __swig_setmethods__["healthy"] = _gpstk.OrbElem_healthy_set
    __swig_getmethods__["healthy"] = _gpstk.OrbElem_healthy_get
    if _newclass:
        healthy = _swig_property(_gpstk.OrbElem_healthy_get, _gpstk.OrbElem_healthy_set)
    __swig_setmethods__["Cuc"] = _gpstk.OrbElem_Cuc_set
    __swig_getmethods__["Cuc"] = _gpstk.OrbElem_Cuc_get
    if _newclass:
        Cuc = _swig_property(_gpstk.OrbElem_Cuc_get, _gpstk.OrbElem_Cuc_set)
    __swig_setmethods__["Cus"] = _gpstk.OrbElem_Cus_set
    __swig_getmethods__["Cus"] = _gpstk.OrbElem_Cus_get
    if _newclass:
        Cus = _swig_property(_gpstk.OrbElem_Cus_get, _gpstk.OrbElem_Cus_set)
    __swig_setmethods__["Crc"] = _gpstk.OrbElem_Crc_set
    __swig_getmethods__["Crc"] = _gpstk.OrbElem_Crc_get
    if _newclass:
        Crc = _swig_property(_gpstk.OrbElem_Crc_get, _gpstk.OrbElem_Crc_set)
    __swig_setmethods__["Crs"] = _gpstk.OrbElem_Crs_set
    __swig_getmethods__["Crs"] = _gpstk.OrbElem_Crs_get
    if _newclass:
        Crs = _swig_property(_gpstk.OrbElem_Crs_get, _gpstk.OrbElem_Crs_set)
    __swig_setmethods__["Cic"] = _gpstk.OrbElem_Cic_set
    __swig_getmethods__["Cic"] = _gpstk.OrbElem_Cic_get
    if _newclass:
        Cic = _swig_property(_gpstk.OrbElem_Cic_get, _gpstk.OrbElem_Cic_set)
    __swig_setmethods__["Cis"] = _gpstk.OrbElem_Cis_set
    __swig_getmethods__["Cis"] = _gpstk.OrbElem_Cis_get
    if _newclass:
        Cis = _swig_property(_gpstk.OrbElem_Cis_get, _gpstk.OrbElem_Cis_set)
    __swig_setmethods__["M0"] = _gpstk.OrbElem_M0_set
    __swig_getmethods__["M0"] = _gpstk.OrbElem_M0_get
    if _newclass:
        M0 = _swig_property(_gpstk.OrbElem_M0_get, _gpstk.OrbElem_M0_set)
    __swig_setmethods__["dn"] = _gpstk.OrbElem_dn_set
    __swig_getmethods__["dn"] = _gpstk.OrbElem_dn_get
    if _newclass:
        dn = _swig_property(_gpstk.OrbElem_dn_get, _gpstk.OrbElem_dn_set)
    __swig_setmethods__["dndot"] = _gpstk.OrbElem_dndot_set
    __swig_getmethods__["dndot"] = _gpstk.OrbElem_dndot_get
    if _newclass:
        dndot = _swig_property(_gpstk.OrbElem_dndot_get, _gpstk.OrbElem_dndot_set)
    __swig_setmethods__["ecc"] = _gpstk.OrbElem_ecc_set
    __swig_getmethods__["ecc"] = _gpstk.OrbElem_ecc_get
    if _newclass:
        ecc = _swig_property(_gpstk.OrbElem_ecc_get, _gpstk.OrbElem_ecc_set)
    __swig_setmethods__["A"] = _gpstk.OrbElem_A_set
    __swig_getmethods__["A"] = _gpstk.OrbElem_A_get
    if _newclass:
        A = _swig_property(_gpstk.OrbElem_A_get, _gpstk.OrbElem_A_set)
    __swig_setmethods__["Adot"] = _gpstk.OrbElem_Adot_set
    __swig_getmethods__["Adot"] = _gpstk.OrbElem_Adot_get
    if _newclass:
        Adot = _swig_property(_gpstk.OrbElem_Adot_get, _gpstk.OrbElem_Adot_set)
    __swig_setmethods__["OMEGA0"] = _gpstk.OrbElem_OMEGA0_set
    __swig_getmethods__["OMEGA0"] = _gpstk.OrbElem_OMEGA0_get
    if _newclass:
        OMEGA0 = _swig_property(_gpstk.OrbElem_OMEGA0_get, _gpstk.OrbElem_OMEGA0_set)
    __swig_setmethods__["i0"] = _gpstk.OrbElem_i0_set
    __swig_getmethods__["i0"] = _gpstk.OrbElem_i0_get
    if _newclass:
        i0 = _swig_property(_gpstk.OrbElem_i0_get, _gpstk.OrbElem_i0_set)
    __swig_setmethods__["w"] = _gpstk.OrbElem_w_set
    __swig_getmethods__["w"] = _gpstk.OrbElem_w_get
    if _newclass:
        w = _swig_property(_gpstk.OrbElem_w_get, _gpstk.OrbElem_w_set)
    __swig_setmethods__["OMEGAdot"] = _gpstk.OrbElem_OMEGAdot_set
    __swig_getmethods__["OMEGAdot"] = _gpstk.OrbElem_OMEGAdot_get
    if _newclass:
        OMEGAdot = _swig_property(_gpstk.OrbElem_OMEGAdot_get, _gpstk.OrbElem_OMEGAdot_set)
    __swig_setmethods__["idot"] = _gpstk.OrbElem_idot_set
    __swig_getmethods__["idot"] = _gpstk.OrbElem_idot_get
    if _newclass:
        idot = _swig_property(_gpstk.OrbElem_idot_get, _gpstk.OrbElem_idot_set)
    __swig_setmethods__["ctToc"] = _gpstk.OrbElem_ctToc_set
    __swig_getmethods__["ctToc"] = _gpstk.OrbElem_ctToc_get
    if _newclass:
        ctToc = _swig_property(_gpstk.OrbElem_ctToc_get, _gpstk.OrbElem_ctToc_set)
    __swig_setmethods__["af0"] = _gpstk.OrbElem_af0_set
    __swig_getmethods__["af0"] = _gpstk.OrbElem_af0_get
    if _newclass:
        af0 = _swig_property(_gpstk.OrbElem_af0_get, _gpstk.OrbElem_af0_set)
    __swig_setmethods__["af1"] = _gpstk.OrbElem_af1_set
    __swig_getmethods__["af1"] = _gpstk.OrbElem_af1_get
    if _newclass:
        af1 = _swig_property(_gpstk.OrbElem_af1_get, _gpstk.OrbElem_af1_set)
    __swig_setmethods__["af2"] = _gpstk.OrbElem_af2_set
    __swig_getmethods__["af2"] = _gpstk.OrbElem_af2_get
    if _newclass:
        af2 = _swig_property(_gpstk.OrbElem_af2_get, _gpstk.OrbElem_af2_set)
    __swig_setmethods__["beginValid"] = _gpstk.OrbElem_beginValid_set
    __swig_getmethods__["beginValid"] = _gpstk.OrbElem_beginValid_get
    if _newclass:
        beginValid = _swig_property(_gpstk.OrbElem_beginValid_get, _gpstk.OrbElem_beginValid_set)
    __swig_setmethods__["endValid"] = _gpstk.OrbElem_endValid_set
    __swig_getmethods__["endValid"] = _gpstk.OrbElem_endValid_get
    if _newclass:
        endValid = _swig_property(_gpstk.OrbElem_endValid_get, _gpstk.OrbElem_endValid_set)

    def __str__(self):
        """__str__(OrbElem self) -> std::string"""
        return _gpstk.OrbElem___str__(self)

OrbElem_swigregister = _gpstk.OrbElem_swigregister
OrbElem_swigregister(OrbElem)

def OrbElem_shortcut(os, HOW):
    """OrbElem_shortcut(std::ostream & os, long const HOW)"""
    return _gpstk.OrbElem_shortcut(os, HOW)

def OrbElem_timeDisplay(os, t):
    """OrbElem_timeDisplay(std::ostream & os, CommonTime t)"""
    return _gpstk.OrbElem_timeDisplay(os, t)

class OrbElemStore(XvtStore_SatID):
    """Proxy of C++ gpstk::OrbElemStore class"""
    __swig_setmethods__ = {}
    for _s in [XvtStore_SatID]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrbElemStore, name, value)
    __swig_getmethods__ = {}
    for _s in [XvtStore_SatID]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrbElemStore, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_OrbElemStore
    __del__ = lambda self: None

    def getXvt(self, id, t):
        """getXvt(OrbElemStore self, SatID id, CommonTime t) -> Xvt"""
        return _gpstk.OrbElemStore_getXvt(self, id, t)


    def edit(self, *args):
        """
        edit(OrbElemStore self, CommonTime tmin, CommonTime tmax)
        edit(OrbElemStore self, CommonTime tmin)
        """
        return _gpstk.OrbElemStore_edit(self, *args)


    def clear(self):
        """clear(OrbElemStore self)"""
        return _gpstk.OrbElemStore_clear(self)


    def getInitialTime(self):
        """getInitialTime(OrbElemStore self) -> CommonTime"""
        return _gpstk.OrbElemStore_getInitialTime(self)


    def getFinalTime(self):
        """getFinalTime(OrbElemStore self) -> CommonTime"""
        return _gpstk.OrbElemStore_getFinalTime(self)


    def velocityIsPresent(self):
        """velocityIsPresent(OrbElemStore self) -> bool"""
        return _gpstk.OrbElemStore_velocityIsPresent(self)


    def hasVelocity(self):
        """hasVelocity(OrbElemStore self) -> bool"""
        return _gpstk.OrbElemStore_hasVelocity(self)


    def isPresent(self, id):
        """isPresent(OrbElemStore self, SatID id) -> bool"""
        return _gpstk.OrbElemStore_isPresent(self, id)


    def __str__(self):
        """__str__(OrbElemStore self) -> std::string"""
        return _gpstk.OrbElemStore___str__(self)

OrbElemStore_swigregister = _gpstk.OrbElemStore_swigregister
OrbElemStore_swigregister(OrbElemStore)

class YumaStream(FFTextStream):
    """Proxy of C++ gpstk::YumaStream class"""
    __swig_setmethods__ = {}
    for _s in [FFTextStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YumaStream, name, value)
    __swig_getmethods__ = {}
    for _s in [FFTextStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YumaStream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::YumaStream self) -> YumaStream
        __init__(gpstk::YumaStream self, char const * fn, std::ios::openmode mode) -> YumaStream
        __init__(gpstk::YumaStream self, char const * fn) -> YumaStream
        """
        this = _gpstk.new_YumaStream(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_YumaStream
    __del__ = lambda self: None

    def open(self, fn, mode):
        """open(YumaStream self, char const * fn, std::ios::openmode mode)"""
        return _gpstk.YumaStream_open(self, fn, mode)

    __swig_setmethods__["header"] = _gpstk.YumaStream_header_set
    __swig_getmethods__["header"] = _gpstk.YumaStream_header_get
    if _newclass:
        header = _swig_property(_gpstk.YumaStream_header_get, _gpstk.YumaStream_header_set)
    __swig_setmethods__["headerRead"] = _gpstk.YumaStream_headerRead_set
    __swig_getmethods__["headerRead"] = _gpstk.YumaStream_headerRead_get
    if _newclass:
        headerRead = _swig_property(_gpstk.YumaStream_headerRead_get, _gpstk.YumaStream_headerRead_set)

    def inYumaStream(fileName):
        """inYumaStream(std::string const fileName) -> YumaStream"""
        return _gpstk.YumaStream_inYumaStream(fileName)

    if _newclass:
        inYumaStream = staticmethod(inYumaStream)
    __swig_getmethods__["inYumaStream"] = lambda x: inYumaStream

    def outYumaStream(fileName):
        """outYumaStream(std::string const fileName) -> YumaStream"""
        return _gpstk.YumaStream_outYumaStream(fileName)

    if _newclass:
        outYumaStream = staticmethod(outYumaStream)
    __swig_getmethods__["outYumaStream"] = lambda x: outYumaStream

    def _remove(ptr):
        """_remove(YumaStream ptr)"""
        return _gpstk.YumaStream__remove(ptr)

    if _newclass:
        _remove = staticmethod(_remove)
    __swig_getmethods__["_remove"] = lambda x: _remove

    def readHeader(self):
        """readHeader(YumaStream self) -> YumaHeader"""
        return _gpstk.YumaStream_readHeader(self)


    def readData(self):
        """readData(YumaStream self) -> YumaData"""
        return _gpstk.YumaStream_readData(self)


    def writeHeader(self, head):
        """writeHeader(YumaStream self, YumaHeader head)"""
        return _gpstk.YumaStream_writeHeader(self, head)


    def writeData(self, data):
        """writeData(YumaStream self, YumaData data)"""
        return _gpstk.YumaStream_writeData(self, data)

YumaStream_swigregister = _gpstk.YumaStream_swigregister
YumaStream_swigregister(YumaStream)

def YumaStream_inYumaStream(fileName):
    """YumaStream_inYumaStream(std::string const fileName) -> YumaStream"""
    return _gpstk.YumaStream_inYumaStream(fileName)

def YumaStream_outYumaStream(fileName):
    """YumaStream_outYumaStream(std::string const fileName) -> YumaStream"""
    return _gpstk.YumaStream_outYumaStream(fileName)

def YumaStream__remove(ptr):
    """YumaStream__remove(YumaStream ptr)"""
    return _gpstk.YumaStream__remove(ptr)

class YumaData(YumaBase):
    """Proxy of C++ gpstk::YumaData class"""
    __swig_setmethods__ = {}
    for _s in [YumaBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YumaData, name, value)
    __swig_getmethods__ = {}
    for _s in [YumaBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YumaData, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::YumaData self) -> YumaData"""
        this = _gpstk.new_YumaData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_YumaData
    __del__ = lambda self: None
    __swig_setmethods__["nearFullWeek"] = _gpstk.YumaData_nearFullWeek_set
    __swig_getmethods__["nearFullWeek"] = _gpstk.YumaData_nearFullWeek_get
    if _newclass:
        nearFullWeek = _swig_property(_gpstk.YumaData_nearFullWeek_get, _gpstk.YumaData_nearFullWeek_set)
    __swig_setmethods__["PRN"] = _gpstk.YumaData_PRN_set
    __swig_getmethods__["PRN"] = _gpstk.YumaData_PRN_get
    if _newclass:
        PRN = _swig_property(_gpstk.YumaData_PRN_get, _gpstk.YumaData_PRN_set)
    __swig_setmethods__["week"] = _gpstk.YumaData_week_set
    __swig_getmethods__["week"] = _gpstk.YumaData_week_get
    if _newclass:
        week = _swig_property(_gpstk.YumaData_week_get, _gpstk.YumaData_week_set)
    __swig_setmethods__["SV_health"] = _gpstk.YumaData_SV_health_set
    __swig_getmethods__["SV_health"] = _gpstk.YumaData_SV_health_get
    if _newclass:
        SV_health = _swig_property(_gpstk.YumaData_SV_health_get, _gpstk.YumaData_SV_health_set)
    __swig_setmethods__["ecc"] = _gpstk.YumaData_ecc_set
    __swig_getmethods__["ecc"] = _gpstk.YumaData_ecc_get
    if _newclass:
        ecc = _swig_property(_gpstk.YumaData_ecc_get, _gpstk.YumaData_ecc_set)
    __swig_setmethods__["Toa"] = _gpstk.YumaData_Toa_set
    __swig_getmethods__["Toa"] = _gpstk.YumaData_Toa_get
    if _newclass:
        Toa = _swig_property(_gpstk.YumaData_Toa_get, _gpstk.YumaData_Toa_set)
    __swig_setmethods__["i_offset"] = _gpstk.YumaData_i_offset_set
    __swig_getmethods__["i_offset"] = _gpstk.YumaData_i_offset_get
    if _newclass:
        i_offset = _swig_property(_gpstk.YumaData_i_offset_get, _gpstk.YumaData_i_offset_set)
    __swig_setmethods__["OMEGAdot"] = _gpstk.YumaData_OMEGAdot_set
    __swig_getmethods__["OMEGAdot"] = _gpstk.YumaData_OMEGAdot_get
    if _newclass:
        OMEGAdot = _swig_property(_gpstk.YumaData_OMEGAdot_get, _gpstk.YumaData_OMEGAdot_set)
    __swig_setmethods__["Ahalf"] = _gpstk.YumaData_Ahalf_set
    __swig_getmethods__["Ahalf"] = _gpstk.YumaData_Ahalf_get
    if _newclass:
        Ahalf = _swig_property(_gpstk.YumaData_Ahalf_get, _gpstk.YumaData_Ahalf_set)
    __swig_setmethods__["OMEGA0"] = _gpstk.YumaData_OMEGA0_set
    __swig_getmethods__["OMEGA0"] = _gpstk.YumaData_OMEGA0_get
    if _newclass:
        OMEGA0 = _swig_property(_gpstk.YumaData_OMEGA0_get, _gpstk.YumaData_OMEGA0_set)
    __swig_setmethods__["w"] = _gpstk.YumaData_w_set
    __swig_getmethods__["w"] = _gpstk.YumaData_w_get
    if _newclass:
        w = _swig_property(_gpstk.YumaData_w_get, _gpstk.YumaData_w_set)
    __swig_setmethods__["M0"] = _gpstk.YumaData_M0_set
    __swig_getmethods__["M0"] = _gpstk.YumaData_M0_get
    if _newclass:
        M0 = _swig_property(_gpstk.YumaData_M0_get, _gpstk.YumaData_M0_set)
    __swig_setmethods__["AF0"] = _gpstk.YumaData_AF0_set
    __swig_getmethods__["AF0"] = _gpstk.YumaData_AF0_get
    if _newclass:
        AF0 = _swig_property(_gpstk.YumaData_AF0_get, _gpstk.YumaData_AF0_set)
    __swig_setmethods__["AF1"] = _gpstk.YumaData_AF1_set
    __swig_getmethods__["AF1"] = _gpstk.YumaData_AF1_get
    if _newclass:
        AF1 = _swig_property(_gpstk.YumaData_AF1_get, _gpstk.YumaData_AF1_set)
    __swig_setmethods__["xmit_time"] = _gpstk.YumaData_xmit_time_set
    __swig_getmethods__["xmit_time"] = _gpstk.YumaData_xmit_time_get
    if _newclass:
        xmit_time = _swig_property(_gpstk.YumaData_xmit_time_get, _gpstk.YumaData_xmit_time_set)

    def isData(self):
        """isData(YumaData self) -> bool"""
        return _gpstk.YumaData_isData(self)


    def toAlmOrbit(self):
        """toAlmOrbit(YumaData self) -> AlmOrbit"""
        return _gpstk.YumaData_toAlmOrbit(self)


    def __str__(self):
        """__str__(YumaData self) -> std::string"""
        return _gpstk.YumaData___str__(self)

YumaData_swigregister = _gpstk.YumaData_swigregister
YumaData_swigregister(YumaData)
YumaData.sID = _gpstk.cvar.YumaData_sID
YumaData.sHlth = _gpstk.cvar.YumaData_sHlth
YumaData.sEcc = _gpstk.cvar.YumaData_sEcc
YumaData.sTOA = _gpstk.cvar.YumaData_sTOA
YumaData.sOrbI = _gpstk.cvar.YumaData_sOrbI
YumaData.sRRA = _gpstk.cvar.YumaData_sRRA
YumaData.sSqrA = _gpstk.cvar.YumaData_sSqrA
YumaData.sRtAs = _gpstk.cvar.YumaData_sRtAs
YumaData.sArgP = _gpstk.cvar.YumaData_sArgP
YumaData.sMnAn = _gpstk.cvar.YumaData_sMnAn
YumaData.sAf0 = _gpstk.cvar.YumaData_sAf0
YumaData.sAf1 = _gpstk.cvar.YumaData_sAf1
YumaData.sweek = _gpstk.cvar.YumaData_sweek

class GPSAlmanacStore(OrbElemStore):
    """Proxy of C++ gpstk::GPSAlmanacStore class"""
    __swig_setmethods__ = {}
    for _s in [OrbElemStore]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPSAlmanacStore, name, value)
    __swig_getmethods__ = {}
    for _s in [OrbElemStore]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GPSAlmanacStore, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::GPSAlmanacStore self) -> GPSAlmanacStore"""
        this = _gpstk.new_GPSAlmanacStore()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_GPSAlmanacStore
    __del__ = lambda self: None

    def getXvt(self, id, t):
        """getXvt(GPSAlmanacStore self, SatID id, CommonTime t) -> Xvt"""
        return _gpstk.GPSAlmanacStore_getXvt(self, id, t)


    def getXvtMostRecentXmit(self, id, t):
        """getXvtMostRecentXmit(GPSAlmanacStore self, SatID id, CommonTime t) -> Xvt"""
        return _gpstk.GPSAlmanacStore_getXvtMostRecentXmit(self, id, t)


    def edit(self, *args):
        """
        edit(GPSAlmanacStore self, CommonTime tmin, CommonTime tmax)
        edit(GPSAlmanacStore self, CommonTime tmin)
        """
        return _gpstk.GPSAlmanacStore_edit(self, *args)


    def clear(self):
        """clear(GPSAlmanacStore self)"""
        return _gpstk.GPSAlmanacStore_clear(self)


    def getTimeSystem(self):
        """getTimeSystem(GPSAlmanacStore self) -> TimeSystem"""
        return _gpstk.GPSAlmanacStore_getTimeSystem(self)


    def getInitialTime(self):
        """getInitialTime(GPSAlmanacStore self) -> CommonTime"""
        return _gpstk.GPSAlmanacStore_getInitialTime(self)


    def getFinalTime(self):
        """getFinalTime(GPSAlmanacStore self) -> CommonTime"""
        return _gpstk.GPSAlmanacStore_getFinalTime(self)


    def velocityIsPresent(self):
        """velocityIsPresent(GPSAlmanacStore self) -> bool"""
        return _gpstk.GPSAlmanacStore_velocityIsPresent(self)


    def hasVelocity(self):
        """hasVelocity(GPSAlmanacStore self) -> bool"""
        return _gpstk.GPSAlmanacStore_hasVelocity(self)


    def isPresent(self, sat):
        """isPresent(GPSAlmanacStore self, SatID sat) -> bool"""
        return _gpstk.GPSAlmanacStore_isPresent(self, sat)


    def getSatHealth(self, sat, t):
        """getSatHealth(GPSAlmanacStore self, SatID sat, CommonTime t) -> short"""
        return _gpstk.GPSAlmanacStore_getSatHealth(self, sat, t)


    def addAlmanac(self, *args):
        """
        addAlmanac(GPSAlmanacStore self, AlmOrbit alm) -> bool
        addAlmanac(GPSAlmanacStore self, EngAlmanac alm) -> bool
        """
        return _gpstk.GPSAlmanacStore_addAlmanac(self, *args)


    def findAlmanac(self, sat, t):
        """findAlmanac(GPSAlmanacStore self, SatID sat, CommonTime t) -> AlmOrbit"""
        return _gpstk.GPSAlmanacStore_findAlmanac(self, sat, t)


    def findMostRecentAlmanac(self, sat, t):
        """findMostRecentAlmanac(GPSAlmanacStore self, SatID sat, CommonTime t) -> AlmOrbit"""
        return _gpstk.GPSAlmanacStore_findMostRecentAlmanac(self, sat, t)


    def findAlmanacs(self, t):
        """findAlmanacs(GPSAlmanacStore self, CommonTime t) -> gpstk::AlmOrbits"""
        return _gpstk.GPSAlmanacStore_findAlmanacs(self, t)

GPSAlmanacStore_swigregister = _gpstk.GPSAlmanacStore_swigregister
GPSAlmanacStore_swigregister(GPSAlmanacStore)

class FileStore_YumaHeader(_object):
    """Proxy of C++ gpstk::FileStore<(gpstk::YumaHeader)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileStore_YumaHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileStore_YumaHeader, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::FileStore<(gpstk::YumaHeader)> self) -> FileStore_YumaHeader"""
        this = _gpstk.new_FileStore_YumaHeader()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_FileStore_YumaHeader
    __del__ = lambda self: None

    def getFileNames(self):
        """getFileNames(FileStore_YumaHeader self) -> vector_string"""
        return _gpstk.FileStore_YumaHeader_getFileNames(self)


    def addFile(self, fn, header):
        """addFile(FileStore_YumaHeader self, std::string const & fn, YumaHeader header)"""
        return _gpstk.FileStore_YumaHeader_addFile(self, fn, header)


    def getHeader(self, fn):
        """getHeader(FileStore_YumaHeader self, std::string const & fn) -> YumaHeader"""
        return _gpstk.FileStore_YumaHeader_getHeader(self, fn)


    def clear(self):
        """clear(FileStore_YumaHeader self)"""
        return _gpstk.FileStore_YumaHeader_clear(self)


    def size(self):
        """size(FileStore_YumaHeader self) -> unsigned int"""
        return _gpstk.FileStore_YumaHeader_size(self)


    def nfiles(self):
        """nfiles(FileStore_YumaHeader self) -> unsigned int"""
        return _gpstk.FileStore_YumaHeader_nfiles(self)

FileStore_YumaHeader_swigregister = _gpstk.FileStore_YumaHeader_swigregister
FileStore_YumaHeader_swigregister(FileStore_YumaHeader)

class YumaAlmanacStore(FileStore_YumaHeader, GPSAlmanacStore):
    """Proxy of C++ gpstk::YumaAlmanacStore class"""
    __swig_setmethods__ = {}
    for _s in [FileStore_YumaHeader, GPSAlmanacStore]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, YumaAlmanacStore, name, value)
    __swig_getmethods__ = {}
    for _s in [FileStore_YumaHeader, GPSAlmanacStore]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, YumaAlmanacStore, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::YumaAlmanacStore self, CommonTime dtInterest) -> YumaAlmanacStore
        __init__(gpstk::YumaAlmanacStore self) -> YumaAlmanacStore
        """
        this = _gpstk.new_YumaAlmanacStore(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def loadFile(self, filename):
        """loadFile(YumaAlmanacStore self, std::string const & filename)"""
        return _gpstk.YumaAlmanacStore_loadFile(self, filename)

    __swig_setmethods__["timeOfInterest"] = _gpstk.YumaAlmanacStore_timeOfInterest_set
    __swig_getmethods__["timeOfInterest"] = _gpstk.YumaAlmanacStore_timeOfInterest_get
    if _newclass:
        timeOfInterest = _swig_property(_gpstk.YumaAlmanacStore_timeOfInterest_get, _gpstk.YumaAlmanacStore_timeOfInterest_set)
    __swig_destroy__ = _gpstk.delete_YumaAlmanacStore
    __del__ = lambda self: None
YumaAlmanacStore_swigregister = _gpstk.YumaAlmanacStore_swigregister
YumaAlmanacStore_swigregister(YumaAlmanacStore)

class NoPRNNumberFound(Exception):
    """Proxy of C++ gpstk::NoPRNNumberFound class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoPRNNumberFound, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoPRNNumberFound, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::NoPRNNumberFound self) -> NoPRNNumberFound
        __init__(gpstk::NoPRNNumberFound self, NoPRNNumberFound a) -> NoPRNNumberFound
        __init__(gpstk::NoPRNNumberFound self, Exception a) -> NoPRNNumberFound
        __init__(gpstk::NoPRNNumberFound self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> NoPRNNumberFound
        __init__(gpstk::NoPRNNumberFound self, std::string const & a, unsigned long b=0) -> NoPRNNumberFound
        __init__(gpstk::NoPRNNumberFound self, std::string const & a) -> NoPRNNumberFound
        __init__(gpstk::NoPRNNumberFound self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> NoPRNNumberFound
        __init__(gpstk::NoPRNNumberFound self, char const * a, unsigned long b=0) -> NoPRNNumberFound
        __init__(gpstk::NoPRNNumberFound self, char const * a) -> NoPRNNumberFound
        """
        this = _gpstk.new_NoPRNNumberFound(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_NoPRNNumberFound
    __del__ = lambda self: None

    def getName(self):
        """getName(NoPRNNumberFound self) -> std::string"""
        return _gpstk.NoPRNNumberFound_getName(self)

NoPRNNumberFound_swigregister = _gpstk.NoPRNNumberFound_swigregister
NoPRNNumberFound_swigregister(NoPRNNumberFound)

class NoNAVSTARNumberFound(Exception):
    """Proxy of C++ gpstk::NoNAVSTARNumberFound class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NoNAVSTARNumberFound, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NoNAVSTARNumberFound, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::NoNAVSTARNumberFound self) -> NoNAVSTARNumberFound
        __init__(gpstk::NoNAVSTARNumberFound self, NoNAVSTARNumberFound a) -> NoNAVSTARNumberFound
        __init__(gpstk::NoNAVSTARNumberFound self, Exception a) -> NoNAVSTARNumberFound
        __init__(gpstk::NoNAVSTARNumberFound self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> NoNAVSTARNumberFound
        __init__(gpstk::NoNAVSTARNumberFound self, std::string const & a, unsigned long b=0) -> NoNAVSTARNumberFound
        __init__(gpstk::NoNAVSTARNumberFound self, std::string const & a) -> NoNAVSTARNumberFound
        __init__(gpstk::NoNAVSTARNumberFound self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> NoNAVSTARNumberFound
        __init__(gpstk::NoNAVSTARNumberFound self, char const * a, unsigned long b=0) -> NoNAVSTARNumberFound
        __init__(gpstk::NoNAVSTARNumberFound self, char const * a) -> NoNAVSTARNumberFound
        """
        this = _gpstk.new_NoNAVSTARNumberFound(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_NoNAVSTARNumberFound
    __del__ = lambda self: None

    def getName(self):
        """getName(NoNAVSTARNumberFound self) -> std::string"""
        return _gpstk.NoNAVSTARNumberFound_getName(self)

NoNAVSTARNumberFound_swigregister = _gpstk.NoNAVSTARNumberFound_swigregister
NoNAVSTARNumberFound_swigregister(NoNAVSTARNumberFound)

class XRefNode(_object):
    """Proxy of C++ gpstk::XRefNode class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XRefNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XRefNode, name)
    __repr__ = _swig_repr

    def __init__(self, NumArg, begDT, endDT):
        """__init__(gpstk::XRefNode self, int const NumArg, CommonTime begDT, CommonTime endDT) -> XRefNode"""
        this = _gpstk.new_XRefNode(NumArg, begDT, endDT)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getNAVSTARNum(self):
        """getNAVSTARNum(XRefNode self) -> int"""
        return _gpstk.XRefNode_getNAVSTARNum(self)


    def getPRNNum(self):
        """getPRNNum(XRefNode self) -> int"""
        return _gpstk.XRefNode_getPRNNum(self)


    def getBeginTime(self):
        """getBeginTime(XRefNode self) -> CommonTime"""
        return _gpstk.XRefNode_getBeginTime(self)


    def getEndTime(self):
        """getEndTime(XRefNode self) -> CommonTime"""
        return _gpstk.XRefNode_getEndTime(self)


    def isApplicable(self, dt):
        """isApplicable(XRefNode self, CommonTime dt) -> bool"""
        return _gpstk.XRefNode_isApplicable(self, dt)


    def toString(self):
        """toString(XRefNode self) -> std::string"""
        return _gpstk.XRefNode_toString(self)

    __swig_destroy__ = _gpstk.delete_XRefNode
    __del__ = lambda self: None
XRefNode_swigregister = _gpstk.XRefNode_swigregister
XRefNode_swigregister(XRefNode)

class SVNumXRef(_object):
    """Proxy of C++ gpstk::SVNumXRef class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVNumXRef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SVNumXRef, name)
    __repr__ = _swig_repr
    I = _gpstk.SVNumXRef_I
    II = _gpstk.SVNumXRef_II
    IIA = _gpstk.SVNumXRef_IIA
    IIR = _gpstk.SVNumXRef_IIR
    IIR_M = _gpstk.SVNumXRef_IIR_M
    IIF = _gpstk.SVNumXRef_IIF

    def __init__(self):
        """__init__(gpstk::SVNumXRef self) -> SVNumXRef"""
        this = _gpstk.new_SVNumXRef()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_SVNumXRef
    __del__ = lambda self: None

    def getBlockType(self, NAVSTARID):
        """getBlockType(SVNumXRef self, int const NAVSTARID) -> gpstk::SVNumXRef::BlockType"""
        return _gpstk.SVNumXRef_getBlockType(self, NAVSTARID)


    def getBlockTypeString(self, NAVSTARID):
        """getBlockTypeString(SVNumXRef self, int const NAVSTARID) -> std::string"""
        return _gpstk.SVNumXRef_getBlockTypeString(self, NAVSTARID)


    def getNAVSTAR(self, *args):
        """
        getNAVSTAR(SVNumXRef self, int const PRNID, CommonTime dt) -> int
        getNAVSTAR(SVNumXRef self, int const PRNID) -> int
        """
        return _gpstk.SVNumXRef_getNAVSTAR(self, *args)


    def getPRNID(self, *args):
        """
        getPRNID(SVNumXRef self, int const NAVSTARID, CommonTime dt) -> int
        getPRNID(SVNumXRef self, int const NAVSTARID) -> int
        """
        return _gpstk.SVNumXRef_getPRNID(self, *args)


    def PRNIDAvailable(self, *args):
        """
        PRNIDAvailable(SVNumXRef self, int const NAVSTARID, CommonTime dt) -> bool
        PRNIDAvailable(SVNumXRef self, int const NAVSTARID) -> bool
        """
        return _gpstk.SVNumXRef_PRNIDAvailable(self, *args)


    def NAVSTARIDAvailable(self, *args):
        """
        NAVSTARIDAvailable(SVNumXRef self, int const PRNID, CommonTime dt) -> bool
        NAVSTARIDAvailable(SVNumXRef self, int const PRNID) -> bool
        """
        return _gpstk.SVNumXRef_NAVSTARIDAvailable(self, *args)


    def BlockTypeAvailable(self, NAVSTARID):
        """BlockTypeAvailable(SVNumXRef self, int const NAVSTARID) -> bool"""
        return _gpstk.SVNumXRef_BlockTypeAvailable(self, NAVSTARID)


    def NAVSTARIDActive(self, *args):
        """
        NAVSTARIDActive(SVNumXRef self, int const NAVSTARID, CommonTime dt) -> bool
        NAVSTARIDActive(SVNumXRef self, int const NAVSTARID) -> bool
        """
        return _gpstk.SVNumXRef_NAVSTARIDActive(self, *args)

SVNumXRef_swigregister = _gpstk.SVNumXRef_swigregister
SVNumXRef_swigregister(SVNumXRef)

class RinexSatID(SatID):
    """Proxy of C++ gpstk::RinexSatID class"""
    __swig_setmethods__ = {}
    for _s in [SatID]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexSatID, name, value)
    __swig_getmethods__ = {}
    for _s in [SatID]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexSatID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::RinexSatID self) -> RinexSatID
        __init__(gpstk::RinexSatID self, int p, gpstk::SatID::SatelliteSystem const & s) -> RinexSatID
        __init__(gpstk::RinexSatID self, std::string const & str) -> RinexSatID
        __init__(gpstk::RinexSatID self, SatID sat) -> RinexSatID
        """
        this = _gpstk.new_RinexSatID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setfill(self, c):
        """setfill(RinexSatID self, char c) -> char"""
        return _gpstk.RinexSatID_setfill(self, c)


    def getfill(self):
        """getfill(RinexSatID self) -> char"""
        return _gpstk.RinexSatID_getfill(self)


    def systemChar(self):
        """systemChar(RinexSatID self) -> char"""
        return _gpstk.RinexSatID_systemChar(self)


    def systemString(self):
        """systemString(RinexSatID self) -> std::string"""
        return _gpstk.RinexSatID_systemString(self)


    def systemString3(self):
        """systemString3(RinexSatID self) -> std::string"""
        return _gpstk.RinexSatID_systemString3(self)


    def fromString(self, s):
        """fromString(RinexSatID self, std::string const & s)"""
        return _gpstk.RinexSatID_fromString(self, s)


    def toString(self):
        """toString(RinexSatID self) -> std::string"""
        return _gpstk.RinexSatID_toString(self)


    def __str__(self):
        """__str__(RinexSatID self) -> std::string"""
        return _gpstk.RinexSatID___str__(self)

    __swig_destroy__ = _gpstk.delete_RinexSatID
    __del__ = lambda self: None
RinexSatID_swigregister = _gpstk.RinexSatID_swigregister
RinexSatID_swigregister(RinexSatID)


def accuracy2ura(acc):
    """accuracy2ura(double const & acc) -> short"""
    return _gpstk.accuracy2ura(acc)

def ura2accuracy(ura):
    """ura2accuracy(short const & ura) -> double"""
    return _gpstk.ura2accuracy(ura)

def nominalAccuracy2ura(acc):
    """nominalAccuracy2ura(double const & acc) -> short"""
    return _gpstk.nominalAccuracy2ura(acc)

def ura2nominalAccuracy(ura):
    """ura2nominalAccuracy(short const & ura) -> double"""
    return _gpstk.ura2nominalAccuracy(ura)

def accuracy2CNAVura(acc):
    """accuracy2CNAVura(double const & acc) -> short"""
    return _gpstk.accuracy2CNAVura(acc)

def ura2CNAVaccuracy(ura):
    """ura2CNAVaccuracy(short const & ura) -> double"""
    return _gpstk.ura2CNAVaccuracy(ura)

def ura2CNAVNominalaccuracy(ura):
    """ura2CNAVNominalaccuracy(short const & ura) -> double"""
    return _gpstk.ura2CNAVNominalaccuracy(ura)

def sv_accuracy_gps_min_index(index):
    """sv_accuracy_gps_min_index(int index) -> double"""
    return _gpstk.sv_accuracy_gps_min_index(index)

def sv_accuracy_gps_nominal_index(index):
    """sv_accuracy_gps_nominal_index(int index) -> double"""
    return _gpstk.sv_accuracy_gps_nominal_index(index)

def sv_accuracy_gps_max_index(index):
    """sv_accuracy_gps_max_index(int index) -> double"""
    return _gpstk.sv_accuracy_gps_max_index(index)

def sv_cnav_accuracy_gps_min_index(index):
    """sv_cnav_accuracy_gps_min_index(int index) -> double"""
    return _gpstk.sv_cnav_accuracy_gps_min_index(index)

def sv_cnav_accuracy_gps_nom_index(index):
    """sv_cnav_accuracy_gps_nom_index(int index) -> double"""
    return _gpstk.sv_cnav_accuracy_gps_nom_index(index)

def sv_cnav_accuracy_gps_max_index(index):
    """sv_cnav_accuracy_gps_max_index(int index) -> double"""
    return _gpstk.sv_cnav_accuracy_gps_max_index(index)

def sv_accuracy_glo_index(index):
    """sv_accuracy_glo_index(int index) -> double"""
    return _gpstk.sv_accuracy_glo_index(index)
class BrcClockCorrection(EngNav):
    """Proxy of C++ gpstk::BrcClockCorrection class"""
    __swig_setmethods__ = {}
    for _s in [EngNav]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrcClockCorrection, name, value)
    __swig_getmethods__ = {}
    for _s in [EngNav]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BrcClockCorrection, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::BrcClockCorrection self) -> BrcClockCorrection
        __init__(gpstk::BrcClockCorrection self, std::string const satSysArg, ObsID obsIDArg, short const PRNIDArg, CommonTime TocArg, CommonTime TopArg, short const URAocArg, short const URAoc1Arg, short const URAoc2Arg, bool const healthyArg, double const af0Arg, double const af1Arg, double const af2Arg) -> BrcClockCorrection
        __init__(gpstk::BrcClockCorrection self, ObsID obsIDArg, short const PRNID, short const fullweeknum, long const [10] subframe1) -> BrcClockCorrection
        """
        this = _gpstk.new_BrcClockCorrection(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_BrcClockCorrection
    __del__ = lambda self: None

    def hasData(self):
        """hasData(BrcClockCorrection self) -> bool"""
        return _gpstk.BrcClockCorrection_hasData(self)


    def getEpochTime(self):
        """getEpochTime(BrcClockCorrection self) -> CommonTime"""
        return _gpstk.BrcClockCorrection_getEpochTime(self)


    def getPRNID(self):
        """getPRNID(BrcClockCorrection self) -> short"""
        return _gpstk.BrcClockCorrection_getPRNID(self)


    def getAccuracy(self, t):
        """getAccuracy(BrcClockCorrection self, CommonTime t) -> double"""
        return _gpstk.BrcClockCorrection_getAccuracy(self, t)


    def getURAoc(self, ndx):
        """getURAoc(BrcClockCorrection self, short const & ndx) -> short"""
        return _gpstk.BrcClockCorrection_getURAoc(self, ndx)


    def getFullWeek(self):
        """getFullWeek(BrcClockCorrection self) -> short"""
        return _gpstk.BrcClockCorrection_getFullWeek(self)


    def getToc(self):
        """getToc(BrcClockCorrection self) -> double"""
        return _gpstk.BrcClockCorrection_getToc(self)


    def getAf0(self):
        """getAf0(BrcClockCorrection self) -> double"""
        return _gpstk.BrcClockCorrection_getAf0(self)


    def getAf1(self):
        """getAf1(BrcClockCorrection self) -> double"""
        return _gpstk.BrcClockCorrection_getAf1(self)


    def getAf2(self):
        """getAf2(BrcClockCorrection self) -> double"""
        return _gpstk.BrcClockCorrection_getAf2(self)


    def svClockBias(self, t):
        """svClockBias(BrcClockCorrection self, CommonTime t) -> double"""
        return _gpstk.BrcClockCorrection_svClockBias(self, t)


    def svClockBiasM(self, t):
        """svClockBiasM(BrcClockCorrection self, CommonTime t) -> double"""
        return _gpstk.BrcClockCorrection_svClockBiasM(self, t)


    def svClockDrift(self, t):
        """svClockDrift(BrcClockCorrection self, CommonTime t) -> double"""
        return _gpstk.BrcClockCorrection_svClockDrift(self, t)


    def loadData(self, *args):
        """
        loadData(BrcClockCorrection self, std::string const satSysArg, ObsID obsIDArg, short const PRNIDArg, CommonTime TocArg, CommonTime TopArg, short const URAocArg, short const URAoc1Arg, short const URAoc2Arg, bool const healthyArg, double const af0Arg, double const af1Arg, double const af2Arg)
        loadData(BrcClockCorrection self, std::string const satSysArg, ObsID obsIDArg, short const PRNIDArg, CommonTime TocArg, short const URAocArg, bool const healthyArg, double const af0Arg, double const af1Arg, double const af2Arg)
        loadData(BrcClockCorrection self, ObsID obsIDArg, short const PRNID, short const fullweeknum, long const [10] subframe1)
        """
        return _gpstk.BrcClockCorrection_loadData(self, *args)


    def __str__(self):
        """__str__(BrcClockCorrection self) -> std::string"""
        return _gpstk.BrcClockCorrection___str__(self)

BrcClockCorrection_swigregister = _gpstk.BrcClockCorrection_swigregister
BrcClockCorrection_swigregister(BrcClockCorrection)
SV_ACCURACY_GPS_MAX_INDEX_VALUE = cvar.SV_ACCURACY_GPS_MAX_INDEX_VALUE
SV_CNAV_ACCURACY_GPS_MAX_INDEX_VALUE = cvar.SV_CNAV_ACCURACY_GPS_MAX_INDEX_VALUE
SV_CNAV_NOMINAL_MAX_INDEX = cvar.SV_CNAV_NOMINAL_MAX_INDEX
SV_CNAV_INDEX_OFFSET = cvar.SV_CNAV_INDEX_OFFSET

class BrcKeplerOrbit(EngNav):
    """Proxy of C++ gpstk::BrcKeplerOrbit class"""
    __swig_setmethods__ = {}
    for _s in [EngNav]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BrcKeplerOrbit, name, value)
    __swig_getmethods__ = {}
    for _s in [EngNav]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BrcKeplerOrbit, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::BrcKeplerOrbit self) -> BrcKeplerOrbit
        __init__(gpstk::BrcKeplerOrbit self, std::string const satSysArg, ObsID obsIDArg, short const PRNIDArg, CommonTime beginFitArg, CommonTime endFitArg, CommonTime ToeArg, short const URAoeArg, bool const healthyArg, double const CucArg, double const CusArg, double const CrcArg, double const CrsArg, double const CicArg, double const CisArg, double const M0Arg, double const dnArg, double const dndotArg, double const eccArg, double const AArg, double const AhalfArg, double const AdotArg, double const OMEGA0Arg, double const i0Arg, double const wArg, double const OMEGAdotARg, double const idotArg) -> BrcKeplerOrbit
        __init__(gpstk::BrcKeplerOrbit self, ObsID obsIDArg, short const PRNID, short const fullweeknum, long const [10] subframe1, long const [10] subframe2, long const [10] subframe3) -> BrcKeplerOrbit
        """
        this = _gpstk.new_BrcKeplerOrbit(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_BrcKeplerOrbit
    __del__ = lambda self: None

    def loadData(self, *args):
        """
        loadData(BrcKeplerOrbit self, std::string const satSysArg, ObsID obsIDArg, short const PRNIDArg, CommonTime beginFitArg, CommonTime endFitArg, CommonTime ToeArg, short const URAoeArg, bool const healthyArg, double const CucArg, double const CusArg, double const CrcArg, double const CrsArg, double const CicArg, double const CisArg, double const M0Arg, double const dnArg, double const dndotArg, double const eccArg, double const AArg, double const AhalfArg, double const AdotArg, double const OMEGA0Arg, double const i0Arg, double const wArg, double const OMEGAdotARg, double const idotArg)
        loadData(BrcKeplerOrbit self, ObsID obsIDArg, short const PRNID, short const fullweeknum, long const [10] subframe1, long const [10] subframe2, long const [10] subframe3)
        """
        return _gpstk.BrcKeplerOrbit_loadData(self, *args)


    def getOrbitEpoch(self):
        """getOrbitEpoch(BrcKeplerOrbit self) -> CommonTime"""
        return _gpstk.BrcKeplerOrbit_getOrbitEpoch(self)


    def getBeginningOfFitInterval(self):
        """getBeginningOfFitInterval(BrcKeplerOrbit self) -> CommonTime"""
        return _gpstk.BrcKeplerOrbit_getBeginningOfFitInterval(self)


    def getEndOfFitInterval(self):
        """getEndOfFitInterval(BrcKeplerOrbit self) -> CommonTime"""
        return _gpstk.BrcKeplerOrbit_getEndOfFitInterval(self)


    def hasData(self):
        """hasData(BrcKeplerOrbit self) -> bool"""
        return _gpstk.BrcKeplerOrbit_hasData(self)


    def getPRNID(self):
        """getPRNID(BrcKeplerOrbit self) -> short"""
        return _gpstk.BrcKeplerOrbit_getPRNID(self)


    def isHealthy(self):
        """isHealthy(BrcKeplerOrbit self) -> bool"""
        return _gpstk.BrcKeplerOrbit_isHealthy(self)


    def withinFitInterval(self, arg2):
        """withinFitInterval(BrcKeplerOrbit self, CommonTime arg2) -> bool"""
        return _gpstk.BrcKeplerOrbit_withinFitInterval(self, arg2)


    def getFullWeek(self):
        """getFullWeek(BrcKeplerOrbit self) -> short"""
        return _gpstk.BrcKeplerOrbit_getFullWeek(self)


    def getAccuracy(self):
        """getAccuracy(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getAccuracy(self)


    def setAccuracy(self, acc):
        """setAccuracy(BrcKeplerOrbit self, double const & acc)"""
        return _gpstk.BrcKeplerOrbit_setAccuracy(self, acc)


    def getURAoe(self):
        """getURAoe(BrcKeplerOrbit self) -> short"""
        return _gpstk.BrcKeplerOrbit_getURAoe(self)


    def getCus(self):
        """getCus(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getCus(self)


    def getCrs(self):
        """getCrs(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getCrs(self)


    def getCis(self):
        """getCis(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getCis(self)


    def getCrc(self):
        """getCrc(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getCrc(self)


    def getCuc(self):
        """getCuc(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getCuc(self)


    def getCic(self):
        """getCic(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getCic(self)


    def getToe(self):
        """getToe(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getToe(self)


    def getM0(self):
        """getM0(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getM0(self)


    def getDn(self):
        """getDn(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getDn(self)


    def getDnDot(self):
        """getDnDot(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getDnDot(self)


    def getEcc(self):
        """getEcc(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getEcc(self)


    def getA(self):
        """getA(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getA(self)


    def getAhalf(self):
        """getAhalf(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getAhalf(self)


    def getAdot(self):
        """getAdot(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getAdot(self)


    def getOmega0(self):
        """getOmega0(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getOmega0(self)


    def getI0(self):
        """getI0(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getI0(self)


    def getW(self):
        """getW(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getW(self)


    def getOmegaDot(self):
        """getOmegaDot(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getOmegaDot(self)


    def getIDot(self):
        """getIDot(BrcKeplerOrbit self) -> double"""
        return _gpstk.BrcKeplerOrbit_getIDot(self)


    def svXv(self, t):
        """svXv(BrcKeplerOrbit self, CommonTime t) -> Xv"""
        return _gpstk.BrcKeplerOrbit_svXv(self, t)


    def svRelativity(self, t):
        """svRelativity(BrcKeplerOrbit self, CommonTime t) -> double"""
        return _gpstk.BrcKeplerOrbit_svRelativity(self, t)


    def __str__(self):
        """__str__(BrcKeplerOrbit self) -> std::string"""
        return _gpstk.BrcKeplerOrbit___str__(self)

BrcKeplerOrbit_swigregister = _gpstk.BrcKeplerOrbit_swigregister
BrcKeplerOrbit_swigregister(BrcKeplerOrbit)

class CorrectedEphemerisRange(_object):
    """Proxy of C++ gpstk::CorrectedEphemerisRange class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CorrectedEphemerisRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CorrectedEphemerisRange, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::CorrectedEphemerisRange self) -> CorrectedEphemerisRange"""
        this = _gpstk.new_CorrectedEphemerisRange()
        try:
            self.this.append(this)
        except:
            self.this = this

    def ComputeAtReceiveTime(self, tr_nom, Rx, sat, Eph):
        """ComputeAtReceiveTime(CorrectedEphemerisRange self, CommonTime tr_nom, Position Rx, SatID sat, XvtStore_SatID Eph) -> double"""
        return _gpstk.CorrectedEphemerisRange_ComputeAtReceiveTime(self, tr_nom, Rx, sat, Eph)


    def ComputeAtTransmitTime(self, *args):
        """
        ComputeAtTransmitTime(CorrectedEphemerisRange self, CommonTime tr_nom, double const & pr, Position Rx, SatID sat, XvtStore_SatID Eph) -> double
        ComputeAtTransmitTime(CorrectedEphemerisRange self, CommonTime tr_nom, Position Rx, SatID sat, XvtStore_SatID Eph) -> double
        """
        return _gpstk.CorrectedEphemerisRange_ComputeAtTransmitTime(self, *args)


    def ComputeAtTransmitSvTime(self, tt_nom, pr, Rx, sat, Eph):
        """ComputeAtTransmitSvTime(CorrectedEphemerisRange self, CommonTime tt_nom, double const & pr, Position Rx, SatID sat, XvtStore_SatID Eph) -> double"""
        return _gpstk.CorrectedEphemerisRange_ComputeAtTransmitSvTime(self, tt_nom, pr, Rx, sat, Eph)

    __swig_setmethods__["rawrange"] = _gpstk.CorrectedEphemerisRange_rawrange_set
    __swig_getmethods__["rawrange"] = _gpstk.CorrectedEphemerisRange_rawrange_get
    if _newclass:
        rawrange = _swig_property(_gpstk.CorrectedEphemerisRange_rawrange_get, _gpstk.CorrectedEphemerisRange_rawrange_set)
    __swig_setmethods__["svclkbias"] = _gpstk.CorrectedEphemerisRange_svclkbias_set
    __swig_getmethods__["svclkbias"] = _gpstk.CorrectedEphemerisRange_svclkbias_get
    if _newclass:
        svclkbias = _swig_property(_gpstk.CorrectedEphemerisRange_svclkbias_get, _gpstk.CorrectedEphemerisRange_svclkbias_set)
    __swig_setmethods__["svclkdrift"] = _gpstk.CorrectedEphemerisRange_svclkdrift_set
    __swig_getmethods__["svclkdrift"] = _gpstk.CorrectedEphemerisRange_svclkdrift_get
    if _newclass:
        svclkdrift = _swig_property(_gpstk.CorrectedEphemerisRange_svclkdrift_get, _gpstk.CorrectedEphemerisRange_svclkdrift_set)
    __swig_setmethods__["relativity"] = _gpstk.CorrectedEphemerisRange_relativity_set
    __swig_getmethods__["relativity"] = _gpstk.CorrectedEphemerisRange_relativity_get
    if _newclass:
        relativity = _swig_property(_gpstk.CorrectedEphemerisRange_relativity_get, _gpstk.CorrectedEphemerisRange_relativity_set)
    __swig_setmethods__["elevation"] = _gpstk.CorrectedEphemerisRange_elevation_set
    __swig_getmethods__["elevation"] = _gpstk.CorrectedEphemerisRange_elevation_get
    if _newclass:
        elevation = _swig_property(_gpstk.CorrectedEphemerisRange_elevation_get, _gpstk.CorrectedEphemerisRange_elevation_set)
    __swig_setmethods__["azimuth"] = _gpstk.CorrectedEphemerisRange_azimuth_set
    __swig_getmethods__["azimuth"] = _gpstk.CorrectedEphemerisRange_azimuth_get
    if _newclass:
        azimuth = _swig_property(_gpstk.CorrectedEphemerisRange_azimuth_get, _gpstk.CorrectedEphemerisRange_azimuth_set)
    __swig_setmethods__["elevationGeodetic"] = _gpstk.CorrectedEphemerisRange_elevationGeodetic_set
    __swig_getmethods__["elevationGeodetic"] = _gpstk.CorrectedEphemerisRange_elevationGeodetic_get
    if _newclass:
        elevationGeodetic = _swig_property(_gpstk.CorrectedEphemerisRange_elevationGeodetic_get, _gpstk.CorrectedEphemerisRange_elevationGeodetic_set)
    __swig_setmethods__["azimuthGeodetic"] = _gpstk.CorrectedEphemerisRange_azimuthGeodetic_set
    __swig_getmethods__["azimuthGeodetic"] = _gpstk.CorrectedEphemerisRange_azimuthGeodetic_get
    if _newclass:
        azimuthGeodetic = _swig_property(_gpstk.CorrectedEphemerisRange_azimuthGeodetic_get, _gpstk.CorrectedEphemerisRange_azimuthGeodetic_set)
    __swig_setmethods__["transmit"] = _gpstk.CorrectedEphemerisRange_transmit_set
    __swig_getmethods__["transmit"] = _gpstk.CorrectedEphemerisRange_transmit_get
    if _newclass:
        transmit = _swig_property(_gpstk.CorrectedEphemerisRange_transmit_get, _gpstk.CorrectedEphemerisRange_transmit_set)
    __swig_setmethods__["cosines"] = _gpstk.CorrectedEphemerisRange_cosines_set
    __swig_getmethods__["cosines"] = _gpstk.CorrectedEphemerisRange_cosines_get
    if _newclass:
        cosines = _swig_property(_gpstk.CorrectedEphemerisRange_cosines_get, _gpstk.CorrectedEphemerisRange_cosines_set)
    __swig_setmethods__["svPosVel"] = _gpstk.CorrectedEphemerisRange_svPosVel_set
    __swig_getmethods__["svPosVel"] = _gpstk.CorrectedEphemerisRange_svPosVel_get
    if _newclass:
        svPosVel = _swig_property(_gpstk.CorrectedEphemerisRange_svPosVel_get, _gpstk.CorrectedEphemerisRange_svPosVel_set)
    __swig_destroy__ = _gpstk.delete_CorrectedEphemerisRange
    __del__ = lambda self: None
CorrectedEphemerisRange_swigregister = _gpstk.CorrectedEphemerisRange_swigregister
CorrectedEphemerisRange_swigregister(CorrectedEphemerisRange)


def RelativityCorrection(svPosVel):
    """RelativityCorrection(Xvt svPosVel) -> double"""
    return _gpstk.RelativityCorrection(svPosVel)
class OrbitEph(_object):
    """Proxy of C++ gpstk::OrbitEph class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrbitEph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OrbitEph, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::OrbitEph self) -> OrbitEph"""
        this = _gpstk.new_OrbitEph()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_OrbitEph
    __del__ = lambda self: None

    def clone(self):
        """clone(OrbitEph self) -> OrbitEph"""
        return _gpstk.OrbitEph_clone(self)


    def isValid(self, ct):
        """isValid(OrbitEph self, CommonTime ct) -> bool"""
        return _gpstk.OrbitEph_isValid(self, ct)


    def dataLoaded(self):
        """dataLoaded(OrbitEph self) -> bool"""
        return _gpstk.OrbitEph_dataLoaded(self)


    def getName(self):
        """getName(OrbitEph self) -> std::string"""
        return _gpstk.OrbitEph_getName(self)


    def isHealthy(self):
        """isHealthy(OrbitEph self) -> bool"""
        return _gpstk.OrbitEph_isHealthy(self)


    def svClockBias(self, t):
        """svClockBias(OrbitEph self, CommonTime t) -> double"""
        return _gpstk.OrbitEph_svClockBias(self, t)


    def svClockDrift(self, t):
        """svClockDrift(OrbitEph self, CommonTime t) -> double"""
        return _gpstk.OrbitEph_svClockDrift(self, t)


    def svXvt(self, t):
        """svXvt(OrbitEph self, CommonTime t) -> Xvt"""
        return _gpstk.OrbitEph_svXvt(self, t)


    def svRelativity(self, t):
        """svRelativity(OrbitEph self, CommonTime t) -> double"""
        return _gpstk.OrbitEph_svRelativity(self, t)


    def adjustValidity(self):
        """adjustValidity(OrbitEph self)"""
        return _gpstk.OrbitEph_adjustValidity(self)


    def __str__(self):
        """__str__(OrbitEph self) -> std::string"""
        return _gpstk.OrbitEph___str__(self)


    def timeDisplay(self, t, showHead=False):
        """
        timeDisplay(OrbitEph self, CommonTime t, bool showHead=False) -> std::string
        timeDisplay(OrbitEph self, CommonTime t) -> std::string
        """
        return _gpstk.OrbitEph_timeDisplay(self, t, showHead)


    def dumpHeader(self, *args):
        """
        dumpHeader(OrbitEph self, std::ostream & os)
        dumpHeader(OrbitEph self)
        """
        return _gpstk.OrbitEph_dumpHeader(self, *args)


    def dumpBody(self, *args):
        """
        dumpBody(OrbitEph self, std::ostream & os)
        dumpBody(OrbitEph self)
        """
        return _gpstk.OrbitEph_dumpBody(self, *args)

    __swig_setmethods__["dataLoadedFlag"] = _gpstk.OrbitEph_dataLoadedFlag_set
    __swig_getmethods__["dataLoadedFlag"] = _gpstk.OrbitEph_dataLoadedFlag_get
    if _newclass:
        dataLoadedFlag = _swig_property(_gpstk.OrbitEph_dataLoadedFlag_get, _gpstk.OrbitEph_dataLoadedFlag_set)
    __swig_setmethods__["satID"] = _gpstk.OrbitEph_satID_set
    __swig_getmethods__["satID"] = _gpstk.OrbitEph_satID_get
    if _newclass:
        satID = _swig_property(_gpstk.OrbitEph_satID_get, _gpstk.OrbitEph_satID_set)
    __swig_setmethods__["obsID"] = _gpstk.OrbitEph_obsID_set
    __swig_getmethods__["obsID"] = _gpstk.OrbitEph_obsID_get
    if _newclass:
        obsID = _swig_property(_gpstk.OrbitEph_obsID_get, _gpstk.OrbitEph_obsID_set)
    __swig_setmethods__["ctToe"] = _gpstk.OrbitEph_ctToe_set
    __swig_getmethods__["ctToe"] = _gpstk.OrbitEph_ctToe_get
    if _newclass:
        ctToe = _swig_property(_gpstk.OrbitEph_ctToe_get, _gpstk.OrbitEph_ctToe_set)
    __swig_setmethods__["ctToc"] = _gpstk.OrbitEph_ctToc_set
    __swig_getmethods__["ctToc"] = _gpstk.OrbitEph_ctToc_get
    if _newclass:
        ctToc = _swig_property(_gpstk.OrbitEph_ctToc_get, _gpstk.OrbitEph_ctToc_set)
    __swig_setmethods__["af0"] = _gpstk.OrbitEph_af0_set
    __swig_getmethods__["af0"] = _gpstk.OrbitEph_af0_get
    if _newclass:
        af0 = _swig_property(_gpstk.OrbitEph_af0_get, _gpstk.OrbitEph_af0_set)
    __swig_setmethods__["af1"] = _gpstk.OrbitEph_af1_set
    __swig_getmethods__["af1"] = _gpstk.OrbitEph_af1_get
    if _newclass:
        af1 = _swig_property(_gpstk.OrbitEph_af1_get, _gpstk.OrbitEph_af1_set)
    __swig_setmethods__["af2"] = _gpstk.OrbitEph_af2_set
    __swig_getmethods__["af2"] = _gpstk.OrbitEph_af2_get
    if _newclass:
        af2 = _swig_property(_gpstk.OrbitEph_af2_get, _gpstk.OrbitEph_af2_set)
    __swig_setmethods__["M0"] = _gpstk.OrbitEph_M0_set
    __swig_getmethods__["M0"] = _gpstk.OrbitEph_M0_get
    if _newclass:
        M0 = _swig_property(_gpstk.OrbitEph_M0_get, _gpstk.OrbitEph_M0_set)
    __swig_setmethods__["dn"] = _gpstk.OrbitEph_dn_set
    __swig_getmethods__["dn"] = _gpstk.OrbitEph_dn_get
    if _newclass:
        dn = _swig_property(_gpstk.OrbitEph_dn_get, _gpstk.OrbitEph_dn_set)
    __swig_setmethods__["ecc"] = _gpstk.OrbitEph_ecc_set
    __swig_getmethods__["ecc"] = _gpstk.OrbitEph_ecc_get
    if _newclass:
        ecc = _swig_property(_gpstk.OrbitEph_ecc_get, _gpstk.OrbitEph_ecc_set)
    __swig_setmethods__["A"] = _gpstk.OrbitEph_A_set
    __swig_getmethods__["A"] = _gpstk.OrbitEph_A_get
    if _newclass:
        A = _swig_property(_gpstk.OrbitEph_A_get, _gpstk.OrbitEph_A_set)
    __swig_setmethods__["OMEGA0"] = _gpstk.OrbitEph_OMEGA0_set
    __swig_getmethods__["OMEGA0"] = _gpstk.OrbitEph_OMEGA0_get
    if _newclass:
        OMEGA0 = _swig_property(_gpstk.OrbitEph_OMEGA0_get, _gpstk.OrbitEph_OMEGA0_set)
    __swig_setmethods__["i0"] = _gpstk.OrbitEph_i0_set
    __swig_getmethods__["i0"] = _gpstk.OrbitEph_i0_get
    if _newclass:
        i0 = _swig_property(_gpstk.OrbitEph_i0_get, _gpstk.OrbitEph_i0_set)
    __swig_setmethods__["w"] = _gpstk.OrbitEph_w_set
    __swig_getmethods__["w"] = _gpstk.OrbitEph_w_get
    if _newclass:
        w = _swig_property(_gpstk.OrbitEph_w_get, _gpstk.OrbitEph_w_set)
    __swig_setmethods__["OMEGAdot"] = _gpstk.OrbitEph_OMEGAdot_set
    __swig_getmethods__["OMEGAdot"] = _gpstk.OrbitEph_OMEGAdot_get
    if _newclass:
        OMEGAdot = _swig_property(_gpstk.OrbitEph_OMEGAdot_get, _gpstk.OrbitEph_OMEGAdot_set)
    __swig_setmethods__["idot"] = _gpstk.OrbitEph_idot_set
    __swig_getmethods__["idot"] = _gpstk.OrbitEph_idot_get
    if _newclass:
        idot = _swig_property(_gpstk.OrbitEph_idot_get, _gpstk.OrbitEph_idot_set)
    __swig_setmethods__["dndot"] = _gpstk.OrbitEph_dndot_set
    __swig_getmethods__["dndot"] = _gpstk.OrbitEph_dndot_get
    if _newclass:
        dndot = _swig_property(_gpstk.OrbitEph_dndot_get, _gpstk.OrbitEph_dndot_set)
    __swig_setmethods__["Adot"] = _gpstk.OrbitEph_Adot_set
    __swig_getmethods__["Adot"] = _gpstk.OrbitEph_Adot_get
    if _newclass:
        Adot = _swig_property(_gpstk.OrbitEph_Adot_get, _gpstk.OrbitEph_Adot_set)
    __swig_setmethods__["Cuc"] = _gpstk.OrbitEph_Cuc_set
    __swig_getmethods__["Cuc"] = _gpstk.OrbitEph_Cuc_get
    if _newclass:
        Cuc = _swig_property(_gpstk.OrbitEph_Cuc_get, _gpstk.OrbitEph_Cuc_set)
    __swig_setmethods__["Cus"] = _gpstk.OrbitEph_Cus_set
    __swig_getmethods__["Cus"] = _gpstk.OrbitEph_Cus_get
    if _newclass:
        Cus = _swig_property(_gpstk.OrbitEph_Cus_get, _gpstk.OrbitEph_Cus_set)
    __swig_setmethods__["Crc"] = _gpstk.OrbitEph_Crc_set
    __swig_getmethods__["Crc"] = _gpstk.OrbitEph_Crc_get
    if _newclass:
        Crc = _swig_property(_gpstk.OrbitEph_Crc_get, _gpstk.OrbitEph_Crc_set)
    __swig_setmethods__["Crs"] = _gpstk.OrbitEph_Crs_set
    __swig_getmethods__["Crs"] = _gpstk.OrbitEph_Crs_get
    if _newclass:
        Crs = _swig_property(_gpstk.OrbitEph_Crs_get, _gpstk.OrbitEph_Crs_set)
    __swig_setmethods__["Cic"] = _gpstk.OrbitEph_Cic_set
    __swig_getmethods__["Cic"] = _gpstk.OrbitEph_Cic_get
    if _newclass:
        Cic = _swig_property(_gpstk.OrbitEph_Cic_get, _gpstk.OrbitEph_Cic_set)
    __swig_setmethods__["Cis"] = _gpstk.OrbitEph_Cis_set
    __swig_getmethods__["Cis"] = _gpstk.OrbitEph_Cis_get
    if _newclass:
        Cis = _swig_property(_gpstk.OrbitEph_Cis_get, _gpstk.OrbitEph_Cis_set)
    __swig_setmethods__["beginValid"] = _gpstk.OrbitEph_beginValid_set
    __swig_getmethods__["beginValid"] = _gpstk.OrbitEph_beginValid_get
    if _newclass:
        beginValid = _swig_property(_gpstk.OrbitEph_beginValid_get, _gpstk.OrbitEph_beginValid_set)
    __swig_setmethods__["endValid"] = _gpstk.OrbitEph_endValid_set
    __swig_getmethods__["endValid"] = _gpstk.OrbitEph_endValid_get
    if _newclass:
        endValid = _swig_property(_gpstk.OrbitEph_endValid_get, _gpstk.OrbitEph_endValid_set)
OrbitEph_swigregister = _gpstk.OrbitEph_swigregister
OrbitEph_swigregister(OrbitEph)

class BDSEphemeris(OrbitEph):
    """Proxy of C++ gpstk::BDSEphemeris class"""
    __swig_setmethods__ = {}
    for _s in [OrbitEph]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BDSEphemeris, name, value)
    __swig_getmethods__ = {}
    for _s in [OrbitEph]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BDSEphemeris, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::BDSEphemeris self) -> BDSEphemeris"""
        this = _gpstk.new_BDSEphemeris()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_BDSEphemeris
    __del__ = lambda self: None

    def clone(self):
        """clone(BDSEphemeris self) -> BDSEphemeris"""
        return _gpstk.BDSEphemeris_clone(self)


    def isValid(self, ct):
        """isValid(BDSEphemeris self, CommonTime ct) -> bool"""
        return _gpstk.BDSEphemeris_isValid(self, ct)


    def getName(self):
        """getName(BDSEphemeris self) -> std::string"""
        return _gpstk.BDSEphemeris_getName(self)


    def isHealthy(self):
        """isHealthy(BDSEphemeris self) -> bool"""
        return _gpstk.BDSEphemeris_isHealthy(self)


    def getAccuracy(self):
        """getAccuracy(BDSEphemeris self) -> double"""
        return _gpstk.BDSEphemeris_getAccuracy(self)


    def adjustValidity(self):
        """adjustValidity(BDSEphemeris self)"""
        return _gpstk.BDSEphemeris_adjustValidity(self)


    def svXvt(self, t):
        """svXvt(BDSEphemeris self, CommonTime t) -> Xvt"""
        return _gpstk.BDSEphemeris_svXvt(self, t)


    def dumpBody(self, *args):
        """
        dumpBody(BDSEphemeris self, std::ostream & os)
        dumpBody(BDSEphemeris self)
        """
        return _gpstk.BDSEphemeris_dumpBody(self, *args)


    def dumpTerse(self, *args):
        """
        dumpTerse(BDSEphemeris self, std::ostream & os)
        dumpTerse(BDSEphemeris self)
        """
        return _gpstk.BDSEphemeris_dumpTerse(self, *args)

    __swig_setmethods__["transmitTime"] = _gpstk.BDSEphemeris_transmitTime_set
    __swig_getmethods__["transmitTime"] = _gpstk.BDSEphemeris_transmitTime_get
    if _newclass:
        transmitTime = _swig_property(_gpstk.BDSEphemeris_transmitTime_get, _gpstk.BDSEphemeris_transmitTime_set)
    __swig_setmethods__["HOWtime"] = _gpstk.BDSEphemeris_HOWtime_set
    __swig_getmethods__["HOWtime"] = _gpstk.BDSEphemeris_HOWtime_get
    if _newclass:
        HOWtime = _swig_property(_gpstk.BDSEphemeris_HOWtime_get, _gpstk.BDSEphemeris_HOWtime_set)
    __swig_setmethods__["IODE"] = _gpstk.BDSEphemeris_IODE_set
    __swig_getmethods__["IODE"] = _gpstk.BDSEphemeris_IODE_get
    if _newclass:
        IODE = _swig_property(_gpstk.BDSEphemeris_IODE_get, _gpstk.BDSEphemeris_IODE_set)
    __swig_setmethods__["IODC"] = _gpstk.BDSEphemeris_IODC_set
    __swig_getmethods__["IODC"] = _gpstk.BDSEphemeris_IODC_get
    if _newclass:
        IODC = _swig_property(_gpstk.BDSEphemeris_IODC_get, _gpstk.BDSEphemeris_IODC_set)
    __swig_setmethods__["health"] = _gpstk.BDSEphemeris_health_set
    __swig_getmethods__["health"] = _gpstk.BDSEphemeris_health_get
    if _newclass:
        health = _swig_property(_gpstk.BDSEphemeris_health_get, _gpstk.BDSEphemeris_health_set)
    __swig_setmethods__["accuracy"] = _gpstk.BDSEphemeris_accuracy_set
    __swig_getmethods__["accuracy"] = _gpstk.BDSEphemeris_accuracy_get
    if _newclass:
        accuracy = _swig_property(_gpstk.BDSEphemeris_accuracy_get, _gpstk.BDSEphemeris_accuracy_set)
    __swig_setmethods__["Tgd13"] = _gpstk.BDSEphemeris_Tgd13_set
    __swig_getmethods__["Tgd13"] = _gpstk.BDSEphemeris_Tgd13_get
    if _newclass:
        Tgd13 = _swig_property(_gpstk.BDSEphemeris_Tgd13_get, _gpstk.BDSEphemeris_Tgd13_set)
    __swig_setmethods__["Tgd23"] = _gpstk.BDSEphemeris_Tgd23_set
    __swig_getmethods__["Tgd23"] = _gpstk.BDSEphemeris_Tgd23_get
    if _newclass:
        Tgd23 = _swig_property(_gpstk.BDSEphemeris_Tgd23_get, _gpstk.BDSEphemeris_Tgd23_set)
    __swig_setmethods__["fitDuration"] = _gpstk.BDSEphemeris_fitDuration_set
    __swig_getmethods__["fitDuration"] = _gpstk.BDSEphemeris_fitDuration_get
    if _newclass:
        fitDuration = _swig_property(_gpstk.BDSEphemeris_fitDuration_get, _gpstk.BDSEphemeris_fitDuration_set)

    def __str__(self):
        """__str__(BDSEphemeris self) -> std::string"""
        return _gpstk.BDSEphemeris___str__(self)

BDSEphemeris_swigregister = _gpstk.BDSEphemeris_swigregister
BDSEphemeris_swigregister(BDSEphemeris)

class EngEphemeris(EngNav):
    """Proxy of C++ gpstk::EngEphemeris class"""
    __swig_setmethods__ = {}
    for _s in [EngNav]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EngEphemeris, name, value)
    __swig_getmethods__ = {}
    for _s in [EngNav]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EngEphemeris, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::EngEphemeris self) -> EngEphemeris"""
        this = _gpstk.new_EngEphemeris()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_EngEphemeris
    __del__ = lambda self: None

    def addSubframe(self, subframe, gpsWeek, PRN, track):
        """addSubframe(EngEphemeris self, long const [10] subframe, int const gpsWeek, short const PRN, short const track) -> bool"""
        return _gpstk.EngEphemeris_addSubframe(self, subframe, gpsWeek, PRN, track)


    def addSubframeNoParity(self, subframe, gpsWeek, PRN, track):
        """addSubframeNoParity(EngEphemeris self, long const [10] subframe, int const gpsWeek, short const PRN, short const track) -> bool"""
        return _gpstk.EngEphemeris_addSubframeNoParity(self, subframe, gpsWeek, PRN, track)


    def addIncompleteSF1Thru3(self, sf1, sf2, sf3, sf1TransmitSOW, gpsWeek, PRN, track):
        """addIncompleteSF1Thru3(EngEphemeris self, long const [8] sf1, long const [8] sf2, long const [8] sf3, long const sf1TransmitSOW, int const gpsWeek, short const PRN, short const track) -> bool"""
        return _gpstk.EngEphemeris_addIncompleteSF1Thru3(self, sf1, sf2, sf3, sf1TransmitSOW, gpsWeek, PRN, track)


    def isData(self, subframe):
        """isData(EngEphemeris self, short subframe) -> bool"""
        return _gpstk.EngEphemeris_isData(self, subframe)


    def setAccuracy(self, acc):
        """setAccuracy(EngEphemeris self, double const & acc)"""
        return _gpstk.EngEphemeris_setAccuracy(self, acc)


    def getFitInterval(self):
        """getFitInterval(EngEphemeris self) -> short"""
        return _gpstk.EngEphemeris_getFitInterval(self)


    def svXvt(self, t):
        """svXvt(EngEphemeris self, CommonTime t) -> Xvt"""
        return _gpstk.EngEphemeris_svXvt(self, t)


    def getTLMPreamble(self):
        """getTLMPreamble(EngEphemeris self) -> unsigned char"""
        return _gpstk.EngEphemeris_getTLMPreamble(self)


    def getTLMMessage(self, subframe):
        """getTLMMessage(EngEphemeris self, short subframe) -> unsigned int"""
        return _gpstk.EngEphemeris_getTLMMessage(self, subframe)


    def getEphemerisEpoch(self):
        """getEphemerisEpoch(EngEphemeris self) -> CommonTime"""
        return _gpstk.EngEphemeris_getEphemerisEpoch(self)


    def getEpochTime(self):
        """getEpochTime(EngEphemeris self) -> CommonTime"""
        return _gpstk.EngEphemeris_getEpochTime(self)


    def getTransmitTime(self):
        """getTransmitTime(EngEphemeris self) -> CommonTime"""
        return _gpstk.EngEphemeris_getTransmitTime(self)


    def getTimestamp(self):
        """getTimestamp(EngEphemeris self) -> CommonTime"""
        return _gpstk.EngEphemeris_getTimestamp(self)


    def getSatSys(self):
        """getSatSys(EngEphemeris self) -> std::string"""
        return _gpstk.EngEphemeris_getSatSys(self)


    def getPRNID(self):
        """getPRNID(EngEphemeris self) -> short"""
        return _gpstk.EngEphemeris_getPRNID(self)


    def getTracker(self):
        """getTracker(EngEphemeris self) -> short"""
        return _gpstk.EngEphemeris_getTracker(self)


    def getHOWTime(self, subframe):
        """getHOWTime(EngEphemeris self, short subframe) -> double"""
        return _gpstk.EngEphemeris_getHOWTime(self, subframe)


    def getASAlert(self, subframe):
        """getASAlert(EngEphemeris self, short subframe) -> short"""
        return _gpstk.EngEphemeris_getASAlert(self, subframe)


    def getFullWeek(self):
        """getFullWeek(EngEphemeris self) -> short"""
        return _gpstk.EngEphemeris_getFullWeek(self)


    def getCodeFlags(self):
        """getCodeFlags(EngEphemeris self) -> short"""
        return _gpstk.EngEphemeris_getCodeFlags(self)


    def getAccuracy(self):
        """getAccuracy(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getAccuracy(self)


    def getAccFlag(self):
        """getAccFlag(EngEphemeris self) -> short"""
        return _gpstk.EngEphemeris_getAccFlag(self)


    def getHealth(self):
        """getHealth(EngEphemeris self) -> short"""
        return _gpstk.EngEphemeris_getHealth(self)


    def getL2Pdata(self):
        """getL2Pdata(EngEphemeris self) -> short"""
        return _gpstk.EngEphemeris_getL2Pdata(self)


    def getIODC(self):
        """getIODC(EngEphemeris self) -> short"""
        return _gpstk.EngEphemeris_getIODC(self)


    def getIODE(self):
        """getIODE(EngEphemeris self) -> short"""
        return _gpstk.EngEphemeris_getIODE(self)


    def getAODO(self):
        """getAODO(EngEphemeris self) -> long"""
        return _gpstk.EngEphemeris_getAODO(self)


    def getToc(self):
        """getToc(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getToc(self)


    def getAf0(self):
        """getAf0(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getAf0(self)


    def getAf1(self):
        """getAf1(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getAf1(self)


    def getAf2(self):
        """getAf2(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getAf2(self)


    def getTgd(self):
        """getTgd(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getTgd(self)


    def getCus(self):
        """getCus(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getCus(self)


    def getCrs(self):
        """getCrs(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getCrs(self)


    def getCis(self):
        """getCis(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getCis(self)


    def getCrc(self):
        """getCrc(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getCrc(self)


    def getCuc(self):
        """getCuc(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getCuc(self)


    def getCic(self):
        """getCic(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getCic(self)


    def getToe(self):
        """getToe(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getToe(self)


    def getM0(self):
        """getM0(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getM0(self)


    def getDn(self):
        """getDn(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getDn(self)


    def getEcc(self):
        """getEcc(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getEcc(self)


    def getAhalf(self):
        """getAhalf(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getAhalf(self)


    def getA(self):
        """getA(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getA(self)


    def getOmega0(self):
        """getOmega0(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getOmega0(self)


    def getI0(self):
        """getI0(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getI0(self)


    def getW(self):
        """getW(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getW(self)


    def getOmegaDot(self):
        """getOmegaDot(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getOmegaDot(self)


    def getIDot(self):
        """getIDot(EngEphemeris self) -> double"""
        return _gpstk.EngEphemeris_getIDot(self)


    def svRelativity(self, t):
        """svRelativity(EngEphemeris self, CommonTime t) -> double"""
        return _gpstk.EngEphemeris_svRelativity(self, t)


    def svClockBias(self, t):
        """svClockBias(EngEphemeris self, CommonTime t) -> double"""
        return _gpstk.EngEphemeris_svClockBias(self, t)


    def svClockDrift(self, t):
        """svClockDrift(EngEphemeris self, CommonTime t) -> double"""
        return _gpstk.EngEphemeris_svClockDrift(self, t)


    def getFitInt(self):
        """getFitInt(EngEphemeris self) -> short"""
        return _gpstk.EngEphemeris_getFitInt(self)


    def getTot(self):
        """getTot(EngEphemeris self) -> long"""
        return _gpstk.EngEphemeris_getTot(self)


    def getOrbit(self):
        """getOrbit(EngEphemeris self) -> BrcKeplerOrbit"""
        return _gpstk.EngEphemeris_getOrbit(self)


    def getClock(self):
        """getClock(EngEphemeris self) -> BrcClockCorrection"""
        return _gpstk.EngEphemeris_getClock(self)


    def loadData(self, satSysArg, tlm, how, asalert, Tracker, prn, fullweek, cflags, acc, svhealth, iodc, l2pdata, Aodo, tgd, toc, Af2, Af1, Af0, iode, crs, Dn, m0, cuc, Ecc, cus, ahalf, toe, fitInt, cic, Omega0, cis, I0, crc, W, OmegaDot, IDot):
        """loadData(EngEphemeris self, std::string const satSysArg, unsigned short [3] tlm, long const [3] how, short const [3] asalert, short const Tracker, short const prn, short const fullweek, short const cflags, short const acc, short const svhealth, short const iodc, short const l2pdata, long const Aodo, double const tgd, double const toc, double const Af2, double const Af1, double const Af0, short const iode, double const crs, double const Dn, double const m0, double const cuc, double const Ecc, double const cus, double const ahalf, double const toe, short const fitInt, double const cic, double const Omega0, double const cis, double const I0, double const crc, double const W, double const OmegaDot, double const IDot) -> EngEphemeris"""
        return _gpstk.EngEphemeris_loadData(self, satSysArg, tlm, how, asalert, Tracker, prn, fullweek, cflags, acc, svhealth, iodc, l2pdata, Aodo, tgd, toc, Af2, Af1, Af0, iode, crs, Dn, m0, cuc, Ecc, cus, ahalf, toe, fitInt, cic, Omega0, cis, I0, crc, W, OmegaDot, IDot)


    def setSF1(self, tlm, how, asalert, fullweek, cflags, acc, svhealth, iodc, l2pdata, tgd, toc, Af2, Af1, Af0, Tracker, prn):
        """setSF1(EngEphemeris self, unsigned int tlm, double how, short asalert, short fullweek, short cflags, short acc, short svhealth, short iodc, short l2pdata, double tgd, double toc, double Af2, double Af1, double Af0, short Tracker, short prn) -> EngEphemeris"""
        return _gpstk.EngEphemeris_setSF1(self, tlm, how, asalert, fullweek, cflags, acc, svhealth, iodc, l2pdata, tgd, toc, Af2, Af1, Af0, Tracker, prn)


    def setSF2(self, tlm, how, asalert, iode, crs, Dn, m0, cuc, Ecc, cus, ahalf, toe, fitInt):
        """setSF2(EngEphemeris self, unsigned int tlm, double how, short asalert, short iode, double crs, double Dn, double m0, double cuc, double Ecc, double cus, double ahalf, double toe, short fitInt) -> EngEphemeris"""
        return _gpstk.EngEphemeris_setSF2(self, tlm, how, asalert, iode, crs, Dn, m0, cuc, Ecc, cus, ahalf, toe, fitInt)


    def setSF3(self, tlm, how, asalert, cic, Omega0, cis, I0, crc, W, OmegaDot, IDot):
        """setSF3(EngEphemeris self, unsigned int tlm, double how, short asalert, double cic, double Omega0, double cis, double I0, double crc, double W, double OmegaDot, double IDot) -> EngEphemeris"""
        return _gpstk.EngEphemeris_setSF3(self, tlm, how, asalert, cic, Omega0, cis, I0, crc, W, OmegaDot, IDot)


    def setFIC(self, arg):
        """setFIC(EngEphemeris self, bool const arg)"""
        return _gpstk.EngEphemeris_setFIC(self, arg)


    def dumpTerse(self, *args):
        """
        dumpTerse(EngEphemeris self, std::ostream & s)
        dumpTerse(EngEphemeris self)
        """
        return _gpstk.EngEphemeris_dumpTerse(self, *args)

    __swig_setmethods__["haveSubframe"] = _gpstk.EngEphemeris_haveSubframe_set
    __swig_getmethods__["haveSubframe"] = _gpstk.EngEphemeris_haveSubframe_get
    if _newclass:
        haveSubframe = _swig_property(_gpstk.EngEphemeris_haveSubframe_get, _gpstk.EngEphemeris_haveSubframe_set)

    def unifiedConvert(self, gpsWeek, PRN, track):
        """unifiedConvert(EngEphemeris self, int const gpsWeek, short const PRN, short const track) -> bool"""
        return _gpstk.EngEphemeris_unifiedConvert(self, gpsWeek, PRN, track)

    __swig_setmethods__["subframeStore"] = _gpstk.EngEphemeris_subframeStore_set
    __swig_getmethods__["subframeStore"] = _gpstk.EngEphemeris_subframeStore_get
    if _newclass:
        subframeStore = _swig_property(_gpstk.EngEphemeris_subframeStore_get, _gpstk.EngEphemeris_subframeStore_set)
    __swig_setmethods__["isFIC"] = _gpstk.EngEphemeris_isFIC_set
    __swig_getmethods__["isFIC"] = _gpstk.EngEphemeris_isFIC_get
    if _newclass:
        isFIC = _swig_property(_gpstk.EngEphemeris_isFIC_get, _gpstk.EngEphemeris_isFIC_set)
    __swig_setmethods__["tlm_message"] = _gpstk.EngEphemeris_tlm_message_set
    __swig_getmethods__["tlm_message"] = _gpstk.EngEphemeris_tlm_message_get
    if _newclass:
        tlm_message = _swig_property(_gpstk.EngEphemeris_tlm_message_get, _gpstk.EngEphemeris_tlm_message_set)
    __swig_setmethods__["satSys"] = _gpstk.EngEphemeris_satSys_set
    __swig_getmethods__["satSys"] = _gpstk.EngEphemeris_satSys_get
    if _newclass:
        satSys = _swig_property(_gpstk.EngEphemeris_satSys_get, _gpstk.EngEphemeris_satSys_set)
    __swig_setmethods__["PRNID"] = _gpstk.EngEphemeris_PRNID_set
    __swig_getmethods__["PRNID"] = _gpstk.EngEphemeris_PRNID_get
    if _newclass:
        PRNID = _swig_property(_gpstk.EngEphemeris_PRNID_get, _gpstk.EngEphemeris_PRNID_set)
    __swig_setmethods__["tracker"] = _gpstk.EngEphemeris_tracker_set
    __swig_getmethods__["tracker"] = _gpstk.EngEphemeris_tracker_get
    if _newclass:
        tracker = _swig_property(_gpstk.EngEphemeris_tracker_get, _gpstk.EngEphemeris_tracker_set)
    __swig_setmethods__["HOWtime"] = _gpstk.EngEphemeris_HOWtime_set
    __swig_getmethods__["HOWtime"] = _gpstk.EngEphemeris_HOWtime_get
    if _newclass:
        HOWtime = _swig_property(_gpstk.EngEphemeris_HOWtime_get, _gpstk.EngEphemeris_HOWtime_set)
    __swig_setmethods__["ASalert"] = _gpstk.EngEphemeris_ASalert_set
    __swig_getmethods__["ASalert"] = _gpstk.EngEphemeris_ASalert_get
    if _newclass:
        ASalert = _swig_property(_gpstk.EngEphemeris_ASalert_get, _gpstk.EngEphemeris_ASalert_set)
    __swig_setmethods__["weeknum"] = _gpstk.EngEphemeris_weeknum_set
    __swig_getmethods__["weeknum"] = _gpstk.EngEphemeris_weeknum_get
    if _newclass:
        weeknum = _swig_property(_gpstk.EngEphemeris_weeknum_get, _gpstk.EngEphemeris_weeknum_set)
    __swig_setmethods__["codeflags"] = _gpstk.EngEphemeris_codeflags_set
    __swig_getmethods__["codeflags"] = _gpstk.EngEphemeris_codeflags_get
    if _newclass:
        codeflags = _swig_property(_gpstk.EngEphemeris_codeflags_get, _gpstk.EngEphemeris_codeflags_set)
    __swig_setmethods__["health"] = _gpstk.EngEphemeris_health_set
    __swig_getmethods__["health"] = _gpstk.EngEphemeris_health_get
    if _newclass:
        health = _swig_property(_gpstk.EngEphemeris_health_get, _gpstk.EngEphemeris_health_set)
    __swig_setmethods__["L2Pdata"] = _gpstk.EngEphemeris_L2Pdata_set
    __swig_getmethods__["L2Pdata"] = _gpstk.EngEphemeris_L2Pdata_get
    if _newclass:
        L2Pdata = _swig_property(_gpstk.EngEphemeris_L2Pdata_get, _gpstk.EngEphemeris_L2Pdata_set)
    __swig_setmethods__["IODC"] = _gpstk.EngEphemeris_IODC_set
    __swig_getmethods__["IODC"] = _gpstk.EngEphemeris_IODC_get
    if _newclass:
        IODC = _swig_property(_gpstk.EngEphemeris_IODC_get, _gpstk.EngEphemeris_IODC_set)
    __swig_setmethods__["IODE"] = _gpstk.EngEphemeris_IODE_set
    __swig_getmethods__["IODE"] = _gpstk.EngEphemeris_IODE_get
    if _newclass:
        IODE = _swig_property(_gpstk.EngEphemeris_IODE_get, _gpstk.EngEphemeris_IODE_set)
    __swig_setmethods__["AODO"] = _gpstk.EngEphemeris_AODO_set
    __swig_getmethods__["AODO"] = _gpstk.EngEphemeris_AODO_get
    if _newclass:
        AODO = _swig_property(_gpstk.EngEphemeris_AODO_get, _gpstk.EngEphemeris_AODO_set)
    __swig_setmethods__["fitint"] = _gpstk.EngEphemeris_fitint_set
    __swig_getmethods__["fitint"] = _gpstk.EngEphemeris_fitint_get
    if _newclass:
        fitint = _swig_property(_gpstk.EngEphemeris_fitint_get, _gpstk.EngEphemeris_fitint_set)
    __swig_setmethods__["Tgd"] = _gpstk.EngEphemeris_Tgd_set
    __swig_getmethods__["Tgd"] = _gpstk.EngEphemeris_Tgd_get
    if _newclass:
        Tgd = _swig_property(_gpstk.EngEphemeris_Tgd_get, _gpstk.EngEphemeris_Tgd_set)
    __swig_setmethods__["accFlagTmp"] = _gpstk.EngEphemeris_accFlagTmp_set
    __swig_getmethods__["accFlagTmp"] = _gpstk.EngEphemeris_accFlagTmp_get
    if _newclass:
        accFlagTmp = _swig_property(_gpstk.EngEphemeris_accFlagTmp_get, _gpstk.EngEphemeris_accFlagTmp_set)
    __swig_setmethods__["bcClock"] = _gpstk.EngEphemeris_bcClock_set
    __swig_getmethods__["bcClock"] = _gpstk.EngEphemeris_bcClock_get
    if _newclass:
        bcClock = _swig_property(_gpstk.EngEphemeris_bcClock_get, _gpstk.EngEphemeris_bcClock_set)
    __swig_setmethods__["orbit"] = _gpstk.EngEphemeris_orbit_set
    __swig_getmethods__["orbit"] = _gpstk.EngEphemeris_orbit_get
    if _newclass:
        orbit = _swig_property(_gpstk.EngEphemeris_orbit_get, _gpstk.EngEphemeris_orbit_set)

    def __str__(self):
        """__str__(EngEphemeris self) -> std::string"""
        return _gpstk.EngEphemeris___str__(self)

EngEphemeris_swigregister = _gpstk.EngEphemeris_swigregister
EngEphemeris_swigregister(EngEphemeris)

class GalEphemeris(OrbitEph):
    """Proxy of C++ gpstk::GalEphemeris class"""
    __swig_setmethods__ = {}
    for _s in [OrbitEph]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GalEphemeris, name, value)
    __swig_getmethods__ = {}
    for _s in [OrbitEph]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GalEphemeris, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::GalEphemeris self) -> GalEphemeris"""
        this = _gpstk.new_GalEphemeris()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_GalEphemeris
    __del__ = lambda self: None

    def clone(self):
        """clone(GalEphemeris self) -> GalEphemeris"""
        return _gpstk.GalEphemeris_clone(self)


    def isValid(self, ct):
        """isValid(GalEphemeris self, CommonTime ct) -> bool"""
        return _gpstk.GalEphemeris_isValid(self, ct)


    def getName(self):
        """getName(GalEphemeris self) -> std::string"""
        return _gpstk.GalEphemeris_getName(self)


    def isHealthy(self):
        """isHealthy(GalEphemeris self) -> bool"""
        return _gpstk.GalEphemeris_isHealthy(self)


    def getAccuracy(self):
        """getAccuracy(GalEphemeris self) -> double"""
        return _gpstk.GalEphemeris_getAccuracy(self)


    def adjustValidity(self):
        """adjustValidity(GalEphemeris self)"""
        return _gpstk.GalEphemeris_adjustValidity(self)


    def dumpBody(self, *args):
        """
        dumpBody(GalEphemeris self, std::ostream & os)
        dumpBody(GalEphemeris self)
        """
        return _gpstk.GalEphemeris_dumpBody(self, *args)

    __swig_setmethods__["transmitTime"] = _gpstk.GalEphemeris_transmitTime_set
    __swig_getmethods__["transmitTime"] = _gpstk.GalEphemeris_transmitTime_get
    if _newclass:
        transmitTime = _swig_property(_gpstk.GalEphemeris_transmitTime_get, _gpstk.GalEphemeris_transmitTime_set)
    __swig_setmethods__["HOWtime"] = _gpstk.GalEphemeris_HOWtime_set
    __swig_getmethods__["HOWtime"] = _gpstk.GalEphemeris_HOWtime_get
    if _newclass:
        HOWtime = _swig_property(_gpstk.GalEphemeris_HOWtime_get, _gpstk.GalEphemeris_HOWtime_set)
    __swig_setmethods__["IODnav"] = _gpstk.GalEphemeris_IODnav_set
    __swig_getmethods__["IODnav"] = _gpstk.GalEphemeris_IODnav_get
    if _newclass:
        IODnav = _swig_property(_gpstk.GalEphemeris_IODnav_get, _gpstk.GalEphemeris_IODnav_set)
    __swig_setmethods__["health"] = _gpstk.GalEphemeris_health_set
    __swig_getmethods__["health"] = _gpstk.GalEphemeris_health_get
    if _newclass:
        health = _swig_property(_gpstk.GalEphemeris_health_get, _gpstk.GalEphemeris_health_set)
    __swig_setmethods__["accuracy"] = _gpstk.GalEphemeris_accuracy_set
    __swig_getmethods__["accuracy"] = _gpstk.GalEphemeris_accuracy_get
    if _newclass:
        accuracy = _swig_property(_gpstk.GalEphemeris_accuracy_get, _gpstk.GalEphemeris_accuracy_set)
    __swig_setmethods__["Tgda"] = _gpstk.GalEphemeris_Tgda_set
    __swig_getmethods__["Tgda"] = _gpstk.GalEphemeris_Tgda_get
    if _newclass:
        Tgda = _swig_property(_gpstk.GalEphemeris_Tgda_get, _gpstk.GalEphemeris_Tgda_set)
    __swig_setmethods__["Tgdb"] = _gpstk.GalEphemeris_Tgdb_set
    __swig_getmethods__["Tgdb"] = _gpstk.GalEphemeris_Tgdb_get
    if _newclass:
        Tgdb = _swig_property(_gpstk.GalEphemeris_Tgdb_get, _gpstk.GalEphemeris_Tgdb_set)
    __swig_setmethods__["datasources"] = _gpstk.GalEphemeris_datasources_set
    __swig_getmethods__["datasources"] = _gpstk.GalEphemeris_datasources_get
    if _newclass:
        datasources = _swig_property(_gpstk.GalEphemeris_datasources_get, _gpstk.GalEphemeris_datasources_set)
    __swig_setmethods__["fitDuration"] = _gpstk.GalEphemeris_fitDuration_set
    __swig_getmethods__["fitDuration"] = _gpstk.GalEphemeris_fitDuration_get
    if _newclass:
        fitDuration = _swig_property(_gpstk.GalEphemeris_fitDuration_get, _gpstk.GalEphemeris_fitDuration_set)

    def __str__(self, *args):
        """
        __str__(GalEphemeris self) -> std::string
        __str__(GalEphemeris self) -> std::string
        """
        return _gpstk.GalEphemeris___str__(self, *args)

GalEphemeris_swigregister = _gpstk.GalEphemeris_swigregister
GalEphemeris_swigregister(GalEphemeris)

class GloEphemeris(Xvt):
    """Proxy of C++ gpstk::GloEphemeris class"""
    __swig_setmethods__ = {}
    for _s in [Xvt]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GloEphemeris, name, value)
    __swig_getmethods__ = {}
    for _s in [Xvt]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GloEphemeris, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::GloEphemeris self) -> GloEphemeris"""
        this = _gpstk.new_GloEphemeris()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_GloEphemeris
    __del__ = lambda self: None

    def isValid(self, subframe):
        """isValid(GloEphemeris self, short subframe) -> bool"""
        return _gpstk.GloEphemeris_isValid(self, subframe)


    def svXvt(self, epoch):
        """svXvt(GloEphemeris self, CommonTime epoch) -> Xvt"""
        return _gpstk.GloEphemeris_svXvt(self, epoch)


    def getEphemerisEpoch(self):
        """getEphemerisEpoch(GloEphemeris self) -> CommonTime"""
        return _gpstk.GloEphemeris_getEphemerisEpoch(self)


    def getEpochTime(self):
        """getEpochTime(GloEphemeris self) -> CommonTime"""
        return _gpstk.GloEphemeris_getEpochTime(self)


    def getSatSys(self):
        """getSatSys(GloEphemeris self) -> std::string"""
        return _gpstk.GloEphemeris_getSatSys(self)


    def getPRNID(self):
        """getPRNID(GloEphemeris self) -> short"""
        return _gpstk.GloEphemeris_getPRNID(self)


    def svClockBias(self, epoch):
        """svClockBias(GloEphemeris self, CommonTime epoch) -> double"""
        return _gpstk.GloEphemeris_svClockBias(self, epoch)


    def svClockDrift(self, t):
        """svClockDrift(GloEphemeris self, CommonTime t) -> double"""
        return _gpstk.GloEphemeris_svClockDrift(self, t)


    def getIntegrationStep(self):
        """getIntegrationStep(GloEphemeris self) -> double"""
        return _gpstk.GloEphemeris_getIntegrationStep(self)


    def setIntegrationStep(self, rkStep):
        """setIntegrationStep(GloEphemeris self, double rkStep) -> GloEphemeris"""
        return _gpstk.GloEphemeris_setIntegrationStep(self, rkStep)


    def getAcc(self):
        """getAcc(GloEphemeris self) -> Triple"""
        return _gpstk.GloEphemeris_getAcc(self)


    def getTauN(self):
        """getTauN(GloEphemeris self) -> double"""
        return _gpstk.GloEphemeris_getTauN(self)


    def getGammaN(self):
        """getGammaN(GloEphemeris self) -> double"""
        return _gpstk.GloEphemeris_getGammaN(self)


    def getMFtime(self):
        """getMFtime(GloEphemeris self) -> long"""
        return _gpstk.GloEphemeris_getMFtime(self)


    def getHealth(self):
        """getHealth(GloEphemeris self) -> short"""
        return _gpstk.GloEphemeris_getHealth(self)


    def getfreqNum(self):
        """getfreqNum(GloEphemeris self) -> short"""
        return _gpstk.GloEphemeris_getfreqNum(self)


    def getAgeOfInfo(self):
        """getAgeOfInfo(GloEphemeris self) -> double"""
        return _gpstk.GloEphemeris_getAgeOfInfo(self)


    def prettyDump(self, s):
        """prettyDump(GloEphemeris self, std::ostream & s)"""
        return _gpstk.GloEphemeris_prettyDump(self, s)


    def terseDump(self, s):
        """terseDump(GloEphemeris self, std::ostream & s)"""
        return _gpstk.GloEphemeris_terseDump(self, s)


    def terseHeader(self, s):
        """terseHeader(GloEphemeris self, std::ostream & s)"""
        return _gpstk.GloEphemeris_terseHeader(self, s)


    def setRecord(self, svSys, prn, epoch, pos, vel, acc, clkbias, clkdrift, mftime, h, freqnum, ageofinfo, rkStep=1.0):
        """
        setRecord(GloEphemeris self, std::string svSys, short prn, CommonTime epoch, Triple pos, Triple vel, Triple acc, double clkbias, double clkdrift, long mftime, short h, short freqnum, double ageofinfo, double rkStep=1.0) -> GloEphemeris
        setRecord(GloEphemeris self, std::string svSys, short prn, CommonTime epoch, Triple pos, Triple vel, Triple acc, double clkbias, double clkdrift, long mftime, short h, short freqnum, double ageofinfo) -> GloEphemeris
        """
        return _gpstk.GloEphemeris_setRecord(self, svSys, prn, epoch, pos, vel, acc, clkbias, clkdrift, mftime, h, freqnum, ageofinfo, rkStep)


    def __str__(self):
        """__str__(GloEphemeris self) -> std::string"""
        return _gpstk.GloEphemeris___str__(self)

GloEphemeris_swigregister = _gpstk.GloEphemeris_swigregister
GloEphemeris_swigregister(GloEphemeris)

class GPSEphemeris(OrbitEph):
    """Proxy of C++ gpstk::GPSEphemeris class"""
    __swig_setmethods__ = {}
    for _s in [OrbitEph]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPSEphemeris, name, value)
    __swig_getmethods__ = {}
    for _s in [OrbitEph]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GPSEphemeris, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::GPSEphemeris self) -> GPSEphemeris"""
        this = _gpstk.new_GPSEphemeris()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_GPSEphemeris
    __del__ = lambda self: None

    def clone(self):
        """clone(GPSEphemeris self) -> GPSEphemeris"""
        return _gpstk.GPSEphemeris_clone(self)


    def isValid(self, ct):
        """isValid(GPSEphemeris self, CommonTime ct) -> bool"""
        return _gpstk.GPSEphemeris_isValid(self, ct)


    def getName(self):
        """getName(GPSEphemeris self) -> std::string"""
        return _gpstk.GPSEphemeris_getName(self)


    def isHealthy(self):
        """isHealthy(GPSEphemeris self) -> bool"""
        return _gpstk.GPSEphemeris_isHealthy(self)


    def getAccuracy(self):
        """getAccuracy(GPSEphemeris self) -> double"""
        return _gpstk.GPSEphemeris_getAccuracy(self)


    def adjustValidity(self):
        """adjustValidity(GPSEphemeris self)"""
        return _gpstk.GPSEphemeris_adjustValidity(self)


    def dumpHeader(self, *args):
        """
        dumpHeader(GPSEphemeris self, std::ostream & os)
        dumpHeader(GPSEphemeris self)
        """
        return _gpstk.GPSEphemeris_dumpHeader(self, *args)


    def dumpBody(self, *args):
        """
        dumpBody(GPSEphemeris self, std::ostream & os)
        dumpBody(GPSEphemeris self)
        """
        return _gpstk.GPSEphemeris_dumpBody(self, *args)


    def setFitIntervalFlag(self, fitint):
        """setFitIntervalFlag(GPSEphemeris self, short const fitint)"""
        return _gpstk.GPSEphemeris_setFitIntervalFlag(self, fitint)

    __swig_setmethods__["transmitTime"] = _gpstk.GPSEphemeris_transmitTime_set
    __swig_getmethods__["transmitTime"] = _gpstk.GPSEphemeris_transmitTime_get
    if _newclass:
        transmitTime = _swig_property(_gpstk.GPSEphemeris_transmitTime_get, _gpstk.GPSEphemeris_transmitTime_set)
    __swig_setmethods__["HOWtime"] = _gpstk.GPSEphemeris_HOWtime_set
    __swig_getmethods__["HOWtime"] = _gpstk.GPSEphemeris_HOWtime_get
    if _newclass:
        HOWtime = _swig_property(_gpstk.GPSEphemeris_HOWtime_get, _gpstk.GPSEphemeris_HOWtime_set)
    __swig_setmethods__["IODE"] = _gpstk.GPSEphemeris_IODE_set
    __swig_getmethods__["IODE"] = _gpstk.GPSEphemeris_IODE_get
    if _newclass:
        IODE = _swig_property(_gpstk.GPSEphemeris_IODE_get, _gpstk.GPSEphemeris_IODE_set)
    __swig_setmethods__["IODC"] = _gpstk.GPSEphemeris_IODC_set
    __swig_getmethods__["IODC"] = _gpstk.GPSEphemeris_IODC_get
    if _newclass:
        IODC = _swig_property(_gpstk.GPSEphemeris_IODC_get, _gpstk.GPSEphemeris_IODC_set)
    __swig_setmethods__["health"] = _gpstk.GPSEphemeris_health_set
    __swig_getmethods__["health"] = _gpstk.GPSEphemeris_health_get
    if _newclass:
        health = _swig_property(_gpstk.GPSEphemeris_health_get, _gpstk.GPSEphemeris_health_set)
    __swig_setmethods__["accuracyFlag"] = _gpstk.GPSEphemeris_accuracyFlag_set
    __swig_getmethods__["accuracyFlag"] = _gpstk.GPSEphemeris_accuracyFlag_get
    if _newclass:
        accuracyFlag = _swig_property(_gpstk.GPSEphemeris_accuracyFlag_get, _gpstk.GPSEphemeris_accuracyFlag_set)
    __swig_setmethods__["accuracy"] = _gpstk.GPSEphemeris_accuracy_set
    __swig_getmethods__["accuracy"] = _gpstk.GPSEphemeris_accuracy_get
    if _newclass:
        accuracy = _swig_property(_gpstk.GPSEphemeris_accuracy_get, _gpstk.GPSEphemeris_accuracy_set)
    __swig_setmethods__["Tgd"] = _gpstk.GPSEphemeris_Tgd_set
    __swig_getmethods__["Tgd"] = _gpstk.GPSEphemeris_Tgd_get
    if _newclass:
        Tgd = _swig_property(_gpstk.GPSEphemeris_Tgd_get, _gpstk.GPSEphemeris_Tgd_set)
    __swig_setmethods__["codeflags"] = _gpstk.GPSEphemeris_codeflags_set
    __swig_getmethods__["codeflags"] = _gpstk.GPSEphemeris_codeflags_get
    if _newclass:
        codeflags = _swig_property(_gpstk.GPSEphemeris_codeflags_get, _gpstk.GPSEphemeris_codeflags_set)
    __swig_setmethods__["L2Pdata"] = _gpstk.GPSEphemeris_L2Pdata_set
    __swig_getmethods__["L2Pdata"] = _gpstk.GPSEphemeris_L2Pdata_get
    if _newclass:
        L2Pdata = _swig_property(_gpstk.GPSEphemeris_L2Pdata_get, _gpstk.GPSEphemeris_L2Pdata_set)
    __swig_setmethods__["fitDuration"] = _gpstk.GPSEphemeris_fitDuration_set
    __swig_getmethods__["fitDuration"] = _gpstk.GPSEphemeris_fitDuration_get
    if _newclass:
        fitDuration = _swig_property(_gpstk.GPSEphemeris_fitDuration_get, _gpstk.GPSEphemeris_fitDuration_set)
    __swig_setmethods__["fitint"] = _gpstk.GPSEphemeris_fitint_set
    __swig_getmethods__["fitint"] = _gpstk.GPSEphemeris_fitint_get
    if _newclass:
        fitint = _swig_property(_gpstk.GPSEphemeris_fitint_get, _gpstk.GPSEphemeris_fitint_set)

    def __str__(self, *args):
        """
        __str__(GPSEphemeris self) -> std::string
        __str__(GPSEphemeris self) -> std::string
        """
        return _gpstk.GPSEphemeris___str__(self, *args)

GPSEphemeris_swigregister = _gpstk.GPSEphemeris_swigregister
GPSEphemeris_swigregister(GPSEphemeris)

class QZSEphemeris(OrbitEph):
    """Proxy of C++ gpstk::QZSEphemeris class"""
    __swig_setmethods__ = {}
    for _s in [OrbitEph]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QZSEphemeris, name, value)
    __swig_getmethods__ = {}
    for _s in [OrbitEph]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QZSEphemeris, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::QZSEphemeris self) -> QZSEphemeris"""
        this = _gpstk.new_QZSEphemeris()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_QZSEphemeris
    __del__ = lambda self: None

    def clone(self):
        """clone(QZSEphemeris self) -> QZSEphemeris"""
        return _gpstk.QZSEphemeris_clone(self)


    def isValid(self, ct):
        """isValid(QZSEphemeris self, CommonTime ct) -> bool"""
        return _gpstk.QZSEphemeris_isValid(self, ct)


    def getName(self):
        """getName(QZSEphemeris self) -> std::string"""
        return _gpstk.QZSEphemeris_getName(self)


    def isHealthy(self, *args):
        """
        isHealthy(QZSEphemeris self) -> bool
        isHealthy(QZSEphemeris self, int const which) -> bool
        """
        return _gpstk.QZSEphemeris_isHealthy(self, *args)


    def getAccuracy(self):
        """getAccuracy(QZSEphemeris self) -> double"""
        return _gpstk.QZSEphemeris_getAccuracy(self)


    def adjustValidity(self):
        """adjustValidity(QZSEphemeris self)"""
        return _gpstk.QZSEphemeris_adjustValidity(self)


    def dumpBody(self, *args):
        """
        dumpBody(QZSEphemeris self, std::ostream & os)
        dumpBody(QZSEphemeris self)
        """
        return _gpstk.QZSEphemeris_dumpBody(self, *args)


    def setFitIntervalFlag(self, fitint):
        """setFitIntervalFlag(QZSEphemeris self, short const fitint)"""
        return _gpstk.QZSEphemeris_setFitIntervalFlag(self, fitint)

    __swig_setmethods__["transmitTime"] = _gpstk.QZSEphemeris_transmitTime_set
    __swig_getmethods__["transmitTime"] = _gpstk.QZSEphemeris_transmitTime_get
    if _newclass:
        transmitTime = _swig_property(_gpstk.QZSEphemeris_transmitTime_get, _gpstk.QZSEphemeris_transmitTime_set)
    __swig_setmethods__["HOWtime"] = _gpstk.QZSEphemeris_HOWtime_set
    __swig_getmethods__["HOWtime"] = _gpstk.QZSEphemeris_HOWtime_get
    if _newclass:
        HOWtime = _swig_property(_gpstk.QZSEphemeris_HOWtime_get, _gpstk.QZSEphemeris_HOWtime_set)
    __swig_setmethods__["IODE"] = _gpstk.QZSEphemeris_IODE_set
    __swig_getmethods__["IODE"] = _gpstk.QZSEphemeris_IODE_get
    if _newclass:
        IODE = _swig_property(_gpstk.QZSEphemeris_IODE_get, _gpstk.QZSEphemeris_IODE_set)
    __swig_setmethods__["IODC"] = _gpstk.QZSEphemeris_IODC_set
    __swig_getmethods__["IODC"] = _gpstk.QZSEphemeris_IODC_get
    if _newclass:
        IODC = _swig_property(_gpstk.QZSEphemeris_IODC_get, _gpstk.QZSEphemeris_IODC_set)
    __swig_setmethods__["health"] = _gpstk.QZSEphemeris_health_set
    __swig_getmethods__["health"] = _gpstk.QZSEphemeris_health_get
    if _newclass:
        health = _swig_property(_gpstk.QZSEphemeris_health_get, _gpstk.QZSEphemeris_health_set)
    __swig_setmethods__["accuracy"] = _gpstk.QZSEphemeris_accuracy_set
    __swig_getmethods__["accuracy"] = _gpstk.QZSEphemeris_accuracy_get
    if _newclass:
        accuracy = _swig_property(_gpstk.QZSEphemeris_accuracy_get, _gpstk.QZSEphemeris_accuracy_set)
    __swig_setmethods__["Tgd"] = _gpstk.QZSEphemeris_Tgd_set
    __swig_getmethods__["Tgd"] = _gpstk.QZSEphemeris_Tgd_get
    if _newclass:
        Tgd = _swig_property(_gpstk.QZSEphemeris_Tgd_get, _gpstk.QZSEphemeris_Tgd_set)
    __swig_setmethods__["codeflags"] = _gpstk.QZSEphemeris_codeflags_set
    __swig_getmethods__["codeflags"] = _gpstk.QZSEphemeris_codeflags_get
    if _newclass:
        codeflags = _swig_property(_gpstk.QZSEphemeris_codeflags_get, _gpstk.QZSEphemeris_codeflags_set)
    __swig_setmethods__["L2Pdata"] = _gpstk.QZSEphemeris_L2Pdata_set
    __swig_getmethods__["L2Pdata"] = _gpstk.QZSEphemeris_L2Pdata_get
    if _newclass:
        L2Pdata = _swig_property(_gpstk.QZSEphemeris_L2Pdata_get, _gpstk.QZSEphemeris_L2Pdata_set)
    __swig_setmethods__["fitDuration"] = _gpstk.QZSEphemeris_fitDuration_set
    __swig_getmethods__["fitDuration"] = _gpstk.QZSEphemeris_fitDuration_get
    if _newclass:
        fitDuration = _swig_property(_gpstk.QZSEphemeris_fitDuration_get, _gpstk.QZSEphemeris_fitDuration_set)
    __swig_setmethods__["fitint"] = _gpstk.QZSEphemeris_fitint_set
    __swig_getmethods__["fitint"] = _gpstk.QZSEphemeris_fitint_get
    if _newclass:
        fitint = _swig_property(_gpstk.QZSEphemeris_fitint_get, _gpstk.QZSEphemeris_fitint_set)

    def __str__(self):
        """__str__(QZSEphemeris self) -> std::string"""
        return _gpstk.QZSEphemeris___str__(self)

QZSEphemeris_swigregister = _gpstk.QZSEphemeris_swigregister
QZSEphemeris_swigregister(QZSEphemeris)

class RinexClockBase(FFData):
    """Proxy of C++ gpstk::RinexClockBase class"""
    __swig_setmethods__ = {}
    for _s in [FFData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexClockBase, name, value)
    __swig_getmethods__ = {}
    for _s in [FFData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexClockBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_RinexClockBase
    __del__ = lambda self: None
RinexClockBase_swigregister = _gpstk.RinexClockBase_swigregister
RinexClockBase_swigregister(RinexClockBase)

class RinexObsBase(FFData):
    """Proxy of C++ gpstk::RinexObsBase class"""
    __swig_setmethods__ = {}
    for _s in [FFData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexObsBase, name, value)
    __swig_getmethods__ = {}
    for _s in [FFData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexObsBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_RinexObsBase
    __del__ = lambda self: None
RinexObsBase_swigregister = _gpstk.RinexObsBase_swigregister
RinexObsBase_swigregister(RinexObsBase)

class RinexObsType(_object):
    """Proxy of C++ gpstk::RinexObsType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexObsType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RinexObsType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _gpstk.RinexObsType_type_set
    __swig_getmethods__["type"] = _gpstk.RinexObsType_type_get
    if _newclass:
        type = _swig_property(_gpstk.RinexObsType_type_get, _gpstk.RinexObsType_type_set)
    __swig_setmethods__["description"] = _gpstk.RinexObsType_description_set
    __swig_getmethods__["description"] = _gpstk.RinexObsType_description_get
    if _newclass:
        description = _swig_property(_gpstk.RinexObsType_description_get, _gpstk.RinexObsType_description_set)
    __swig_setmethods__["units"] = _gpstk.RinexObsType_units_set
    __swig_getmethods__["units"] = _gpstk.RinexObsType_units_get
    if _newclass:
        units = _swig_property(_gpstk.RinexObsType_units_get, _gpstk.RinexObsType_units_set)
    __swig_setmethods__["depend"] = _gpstk.RinexObsType_depend_set
    __swig_getmethods__["depend"] = _gpstk.RinexObsType_depend_get
    if _newclass:
        depend = _swig_property(_gpstk.RinexObsType_depend_get, _gpstk.RinexObsType_depend_set)

    def __init__(self, *args):
        """
        __init__(gpstk::RinexObsType self) -> RinexObsType
        __init__(gpstk::RinexObsType self, std::string t, std::string d, std::string u, unsigned int dep=0) -> RinexObsType
        __init__(gpstk::RinexObsType self, std::string t, std::string d, std::string u) -> RinexObsType
        """
        this = _gpstk.new_RinexObsType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_RinexObsType
    __del__ = lambda self: None
RinexObsType_swigregister = _gpstk.RinexObsType_swigregister
RinexObsType_swigregister(RinexObsType)
RinexObsType.C1depend = _gpstk.cvar.RinexObsType_C1depend
RinexObsType.L1depend = _gpstk.cvar.RinexObsType_L1depend
RinexObsType.L2depend = _gpstk.cvar.RinexObsType_L2depend
RinexObsType.P1depend = _gpstk.cvar.RinexObsType_P1depend
RinexObsType.P2depend = _gpstk.cvar.RinexObsType_P2depend
RinexObsType.EPdepend = _gpstk.cvar.RinexObsType_EPdepend
RinexObsType.PSdepend = _gpstk.cvar.RinexObsType_PSdepend

class ExtraWaveFact(_object):
    """Proxy of C++ gpstk::ExtraWaveFact class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtraWaveFact, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtraWaveFact, name)
    __repr__ = _swig_repr
    __swig_setmethods__["satList"] = _gpstk.ExtraWaveFact_satList_set
    __swig_getmethods__["satList"] = _gpstk.ExtraWaveFact_satList_get
    if _newclass:
        satList = _swig_property(_gpstk.ExtraWaveFact_satList_get, _gpstk.ExtraWaveFact_satList_set)
    __swig_setmethods__["wavelengthFactor"] = _gpstk.ExtraWaveFact_wavelengthFactor_set
    __swig_getmethods__["wavelengthFactor"] = _gpstk.ExtraWaveFact_wavelengthFactor_get
    if _newclass:
        wavelengthFactor = _swig_property(_gpstk.ExtraWaveFact_wavelengthFactor_get, _gpstk.ExtraWaveFact_wavelengthFactor_set)

    def __init__(self):
        """__init__(gpstk::ExtraWaveFact self) -> ExtraWaveFact"""
        this = _gpstk.new_ExtraWaveFact()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_ExtraWaveFact
    __del__ = lambda self: None
ExtraWaveFact_swigregister = _gpstk.ExtraWaveFact_swigregister
ExtraWaveFact_swigregister(ExtraWaveFact)

class RinexObsHeader(RinexObsBase):
    """Proxy of C++ gpstk::RinexObsHeader class"""
    __swig_setmethods__ = {}
    for _s in [RinexObsBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexObsHeader, name, value)
    __swig_getmethods__ = {}
    for _s in [RinexObsBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexObsHeader, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::RinexObsHeader self) -> RinexObsHeader"""
        this = _gpstk.new_RinexObsHeader()
        try:
            self.this.append(this)
        except:
            self.this = this

    def clear(self):
        """clear(RinexObsHeader self)"""
        return _gpstk.RinexObsHeader_clear(self)

    versionValid = _gpstk.RinexObsHeader_versionValid
    runByValid = _gpstk.RinexObsHeader_runByValid
    commentValid = _gpstk.RinexObsHeader_commentValid
    markerNameValid = _gpstk.RinexObsHeader_markerNameValid
    markerNumberValid = _gpstk.RinexObsHeader_markerNumberValid
    observerValid = _gpstk.RinexObsHeader_observerValid
    receiverValid = _gpstk.RinexObsHeader_receiverValid
    antennaTypeValid = _gpstk.RinexObsHeader_antennaTypeValid
    antennaPositionValid = _gpstk.RinexObsHeader_antennaPositionValid
    antennaOffsetValid = _gpstk.RinexObsHeader_antennaOffsetValid
    waveFactValid = _gpstk.RinexObsHeader_waveFactValid
    obsTypeValid = _gpstk.RinexObsHeader_obsTypeValid
    intervalValid = _gpstk.RinexObsHeader_intervalValid
    firstTimeValid = _gpstk.RinexObsHeader_firstTimeValid
    lastTimeValid = _gpstk.RinexObsHeader_lastTimeValid
    receiverOffsetValid = _gpstk.RinexObsHeader_receiverOffsetValid
    leapSecondsValid = _gpstk.RinexObsHeader_leapSecondsValid
    numSatsValid = _gpstk.RinexObsHeader_numSatsValid
    prnObsValid = _gpstk.RinexObsHeader_prnObsValid
    endValid = _gpstk.RinexObsHeader_endValid
    allValid20 = _gpstk.RinexObsHeader_allValid20
    allValid21 = _gpstk.RinexObsHeader_allValid21
    allValid211 = _gpstk.RinexObsHeader_allValid211
    __swig_setmethods__["RegisteredRinexObsTypes"] = _gpstk.RinexObsHeader_RegisteredRinexObsTypes_set
    __swig_getmethods__["RegisteredRinexObsTypes"] = _gpstk.RinexObsHeader_RegisteredRinexObsTypes_get
    if _newclass:
        RegisteredRinexObsTypes = _swig_property(_gpstk.RinexObsHeader_RegisteredRinexObsTypes_get, _gpstk.RinexObsHeader_RegisteredRinexObsTypes_set)
    __swig_setmethods__["version"] = _gpstk.RinexObsHeader_version_set
    __swig_getmethods__["version"] = _gpstk.RinexObsHeader_version_get
    if _newclass:
        version = _swig_property(_gpstk.RinexObsHeader_version_get, _gpstk.RinexObsHeader_version_set)
    __swig_setmethods__["fileType"] = _gpstk.RinexObsHeader_fileType_set
    __swig_getmethods__["fileType"] = _gpstk.RinexObsHeader_fileType_get
    if _newclass:
        fileType = _swig_property(_gpstk.RinexObsHeader_fileType_get, _gpstk.RinexObsHeader_fileType_set)
    __swig_setmethods__["system"] = _gpstk.RinexObsHeader_system_set
    __swig_getmethods__["system"] = _gpstk.RinexObsHeader_system_get
    if _newclass:
        system = _swig_property(_gpstk.RinexObsHeader_system_get, _gpstk.RinexObsHeader_system_set)
    __swig_setmethods__["fileProgram"] = _gpstk.RinexObsHeader_fileProgram_set
    __swig_getmethods__["fileProgram"] = _gpstk.RinexObsHeader_fileProgram_get
    if _newclass:
        fileProgram = _swig_property(_gpstk.RinexObsHeader_fileProgram_get, _gpstk.RinexObsHeader_fileProgram_set)
    __swig_setmethods__["fileAgency"] = _gpstk.RinexObsHeader_fileAgency_set
    __swig_getmethods__["fileAgency"] = _gpstk.RinexObsHeader_fileAgency_get
    if _newclass:
        fileAgency = _swig_property(_gpstk.RinexObsHeader_fileAgency_get, _gpstk.RinexObsHeader_fileAgency_set)
    __swig_setmethods__["date"] = _gpstk.RinexObsHeader_date_set
    __swig_getmethods__["date"] = _gpstk.RinexObsHeader_date_get
    if _newclass:
        date = _swig_property(_gpstk.RinexObsHeader_date_get, _gpstk.RinexObsHeader_date_set)
    __swig_setmethods__["commentList"] = _gpstk.RinexObsHeader_commentList_set
    __swig_getmethods__["commentList"] = _gpstk.RinexObsHeader_commentList_get
    if _newclass:
        commentList = _swig_property(_gpstk.RinexObsHeader_commentList_get, _gpstk.RinexObsHeader_commentList_set)
    __swig_setmethods__["markerName"] = _gpstk.RinexObsHeader_markerName_set
    __swig_getmethods__["markerName"] = _gpstk.RinexObsHeader_markerName_get
    if _newclass:
        markerName = _swig_property(_gpstk.RinexObsHeader_markerName_get, _gpstk.RinexObsHeader_markerName_set)
    __swig_setmethods__["markerNumber"] = _gpstk.RinexObsHeader_markerNumber_set
    __swig_getmethods__["markerNumber"] = _gpstk.RinexObsHeader_markerNumber_get
    if _newclass:
        markerNumber = _swig_property(_gpstk.RinexObsHeader_markerNumber_get, _gpstk.RinexObsHeader_markerNumber_set)
    __swig_setmethods__["observer"] = _gpstk.RinexObsHeader_observer_set
    __swig_getmethods__["observer"] = _gpstk.RinexObsHeader_observer_get
    if _newclass:
        observer = _swig_property(_gpstk.RinexObsHeader_observer_get, _gpstk.RinexObsHeader_observer_set)
    __swig_setmethods__["agency"] = _gpstk.RinexObsHeader_agency_set
    __swig_getmethods__["agency"] = _gpstk.RinexObsHeader_agency_get
    if _newclass:
        agency = _swig_property(_gpstk.RinexObsHeader_agency_get, _gpstk.RinexObsHeader_agency_set)
    __swig_setmethods__["recNo"] = _gpstk.RinexObsHeader_recNo_set
    __swig_getmethods__["recNo"] = _gpstk.RinexObsHeader_recNo_get
    if _newclass:
        recNo = _swig_property(_gpstk.RinexObsHeader_recNo_get, _gpstk.RinexObsHeader_recNo_set)
    __swig_setmethods__["recType"] = _gpstk.RinexObsHeader_recType_set
    __swig_getmethods__["recType"] = _gpstk.RinexObsHeader_recType_get
    if _newclass:
        recType = _swig_property(_gpstk.RinexObsHeader_recType_get, _gpstk.RinexObsHeader_recType_set)
    __swig_setmethods__["recVers"] = _gpstk.RinexObsHeader_recVers_set
    __swig_getmethods__["recVers"] = _gpstk.RinexObsHeader_recVers_get
    if _newclass:
        recVers = _swig_property(_gpstk.RinexObsHeader_recVers_get, _gpstk.RinexObsHeader_recVers_set)
    __swig_setmethods__["antNo"] = _gpstk.RinexObsHeader_antNo_set
    __swig_getmethods__["antNo"] = _gpstk.RinexObsHeader_antNo_get
    if _newclass:
        antNo = _swig_property(_gpstk.RinexObsHeader_antNo_get, _gpstk.RinexObsHeader_antNo_set)
    __swig_setmethods__["antType"] = _gpstk.RinexObsHeader_antType_set
    __swig_getmethods__["antType"] = _gpstk.RinexObsHeader_antType_get
    if _newclass:
        antType = _swig_property(_gpstk.RinexObsHeader_antType_get, _gpstk.RinexObsHeader_antType_set)
    __swig_setmethods__["antennaPosition"] = _gpstk.RinexObsHeader_antennaPosition_set
    __swig_getmethods__["antennaPosition"] = _gpstk.RinexObsHeader_antennaPosition_get
    if _newclass:
        antennaPosition = _swig_property(_gpstk.RinexObsHeader_antennaPosition_get, _gpstk.RinexObsHeader_antennaPosition_set)
    __swig_setmethods__["antennaOffset"] = _gpstk.RinexObsHeader_antennaOffset_set
    __swig_getmethods__["antennaOffset"] = _gpstk.RinexObsHeader_antennaOffset_get
    if _newclass:
        antennaOffset = _swig_property(_gpstk.RinexObsHeader_antennaOffset_get, _gpstk.RinexObsHeader_antennaOffset_set)
    __swig_setmethods__["wavelengthFactor"] = _gpstk.RinexObsHeader_wavelengthFactor_set
    __swig_getmethods__["wavelengthFactor"] = _gpstk.RinexObsHeader_wavelengthFactor_get
    if _newclass:
        wavelengthFactor = _swig_property(_gpstk.RinexObsHeader_wavelengthFactor_get, _gpstk.RinexObsHeader_wavelengthFactor_set)
    __swig_setmethods__["extraWaveFactList"] = _gpstk.RinexObsHeader_extraWaveFactList_set
    __swig_getmethods__["extraWaveFactList"] = _gpstk.RinexObsHeader_extraWaveFactList_get
    if _newclass:
        extraWaveFactList = _swig_property(_gpstk.RinexObsHeader_extraWaveFactList_get, _gpstk.RinexObsHeader_extraWaveFactList_set)
    __swig_setmethods__["obsTypeList"] = _gpstk.RinexObsHeader_obsTypeList_set
    __swig_getmethods__["obsTypeList"] = _gpstk.RinexObsHeader_obsTypeList_get
    if _newclass:
        obsTypeList = _swig_property(_gpstk.RinexObsHeader_obsTypeList_get, _gpstk.RinexObsHeader_obsTypeList_set)
    __swig_setmethods__["interval"] = _gpstk.RinexObsHeader_interval_set
    __swig_getmethods__["interval"] = _gpstk.RinexObsHeader_interval_get
    if _newclass:
        interval = _swig_property(_gpstk.RinexObsHeader_interval_get, _gpstk.RinexObsHeader_interval_set)
    __swig_setmethods__["firstObs"] = _gpstk.RinexObsHeader_firstObs_set
    __swig_getmethods__["firstObs"] = _gpstk.RinexObsHeader_firstObs_get
    if _newclass:
        firstObs = _swig_property(_gpstk.RinexObsHeader_firstObs_get, _gpstk.RinexObsHeader_firstObs_set)
    __swig_setmethods__["firstSystem"] = _gpstk.RinexObsHeader_firstSystem_set
    __swig_getmethods__["firstSystem"] = _gpstk.RinexObsHeader_firstSystem_get
    if _newclass:
        firstSystem = _swig_property(_gpstk.RinexObsHeader_firstSystem_get, _gpstk.RinexObsHeader_firstSystem_set)
    __swig_setmethods__["lastObs"] = _gpstk.RinexObsHeader_lastObs_set
    __swig_getmethods__["lastObs"] = _gpstk.RinexObsHeader_lastObs_get
    if _newclass:
        lastObs = _swig_property(_gpstk.RinexObsHeader_lastObs_get, _gpstk.RinexObsHeader_lastObs_set)
    __swig_setmethods__["lastSystem"] = _gpstk.RinexObsHeader_lastSystem_set
    __swig_getmethods__["lastSystem"] = _gpstk.RinexObsHeader_lastSystem_get
    if _newclass:
        lastSystem = _swig_property(_gpstk.RinexObsHeader_lastSystem_get, _gpstk.RinexObsHeader_lastSystem_set)
    __swig_setmethods__["receiverOffset"] = _gpstk.RinexObsHeader_receiverOffset_set
    __swig_getmethods__["receiverOffset"] = _gpstk.RinexObsHeader_receiverOffset_get
    if _newclass:
        receiverOffset = _swig_property(_gpstk.RinexObsHeader_receiverOffset_get, _gpstk.RinexObsHeader_receiverOffset_set)
    __swig_setmethods__["leapSeconds"] = _gpstk.RinexObsHeader_leapSeconds_set
    __swig_getmethods__["leapSeconds"] = _gpstk.RinexObsHeader_leapSeconds_get
    if _newclass:
        leapSeconds = _swig_property(_gpstk.RinexObsHeader_leapSeconds_get, _gpstk.RinexObsHeader_leapSeconds_set)
    __swig_setmethods__["numSVs"] = _gpstk.RinexObsHeader_numSVs_set
    __swig_getmethods__["numSVs"] = _gpstk.RinexObsHeader_numSVs_get
    if _newclass:
        numSVs = _swig_property(_gpstk.RinexObsHeader_numSVs_get, _gpstk.RinexObsHeader_numSVs_set)
    __swig_setmethods__["numObsForSat"] = _gpstk.RinexObsHeader_numObsForSat_set
    __swig_getmethods__["numObsForSat"] = _gpstk.RinexObsHeader_numObsForSat_get
    if _newclass:
        numObsForSat = _swig_property(_gpstk.RinexObsHeader_numObsForSat_get, _gpstk.RinexObsHeader_numObsForSat_set)
    __swig_setmethods__["valid"] = _gpstk.RinexObsHeader_valid_set
    __swig_getmethods__["valid"] = _gpstk.RinexObsHeader_valid_get
    if _newclass:
        valid = _swig_property(_gpstk.RinexObsHeader_valid_get, _gpstk.RinexObsHeader_valid_set)
    __swig_setmethods__["numObs"] = _gpstk.RinexObsHeader_numObs_set
    __swig_getmethods__["numObs"] = _gpstk.RinexObsHeader_numObs_get
    if _newclass:
        numObs = _swig_property(_gpstk.RinexObsHeader_numObs_get, _gpstk.RinexObsHeader_numObs_set)
    __swig_setmethods__["lastPRN"] = _gpstk.RinexObsHeader_lastPRN_set
    __swig_getmethods__["lastPRN"] = _gpstk.RinexObsHeader_lastPRN_get
    if _newclass:
        lastPRN = _swig_property(_gpstk.RinexObsHeader_lastPRN_get, _gpstk.RinexObsHeader_lastPRN_set)
    __swig_destroy__ = _gpstk.delete_RinexObsHeader
    __del__ = lambda self: None

    def isHeader(self):
        """isHeader(RinexObsHeader self) -> bool"""
        return _gpstk.RinexObsHeader_isHeader(self)


    def convertObsType(*args):
        """
        convertObsType(std::string const & oneObs) -> RinexObsType
        convertObsType(RinexObsType oneObs) -> std::string
        """
        return _gpstk.RinexObsHeader_convertObsType(*args)

    if _newclass:
        convertObsType = staticmethod(convertObsType)
    __swig_getmethods__["convertObsType"] = lambda x: convertObsType

    def ParseHeaderRecord(self, line):
        """ParseHeaderRecord(RinexObsHeader self, std::string & line)"""
        return _gpstk.RinexObsHeader_ParseHeaderRecord(self, line)


    def NumberHeaderRecordsToBeWritten(self):
        """NumberHeaderRecordsToBeWritten(RinexObsHeader self) -> int"""
        return _gpstk.RinexObsHeader_NumberHeaderRecordsToBeWritten(self)


    def WriteHeaderRecords(self, s):
        """WriteHeaderRecords(RinexObsHeader self, FFStream s)"""
        return _gpstk.RinexObsHeader_WriteHeaderRecords(self, s)


    def isValid(self):
        """isValid(RinexObsHeader self) -> bool"""
        return _gpstk.RinexObsHeader_isValid(self)


    def __str__(self):
        """__str__(RinexObsHeader self) -> std::string"""
        return _gpstk.RinexObsHeader___str__(self)

RinexObsHeader_swigregister = _gpstk.RinexObsHeader_swigregister
RinexObsHeader_swigregister(RinexObsHeader)
RinexObsHeader.versionString = _gpstk.cvar.RinexObsHeader_versionString
RinexObsHeader.runByString = _gpstk.cvar.RinexObsHeader_runByString
RinexObsHeader.commentString = _gpstk.cvar.RinexObsHeader_commentString
RinexObsHeader.markerNameString = _gpstk.cvar.RinexObsHeader_markerNameString
RinexObsHeader.markerNumberString = _gpstk.cvar.RinexObsHeader_markerNumberString
RinexObsHeader.observerString = _gpstk.cvar.RinexObsHeader_observerString
RinexObsHeader.receiverString = _gpstk.cvar.RinexObsHeader_receiverString
RinexObsHeader.antennaTypeString = _gpstk.cvar.RinexObsHeader_antennaTypeString
RinexObsHeader.antennaPositionString = _gpstk.cvar.RinexObsHeader_antennaPositionString
RinexObsHeader.antennaOffsetString = _gpstk.cvar.RinexObsHeader_antennaOffsetString
RinexObsHeader.waveFactString = _gpstk.cvar.RinexObsHeader_waveFactString
RinexObsHeader.numObsString = _gpstk.cvar.RinexObsHeader_numObsString
RinexObsHeader.intervalString = _gpstk.cvar.RinexObsHeader_intervalString
RinexObsHeader.firstTimeString = _gpstk.cvar.RinexObsHeader_firstTimeString
RinexObsHeader.lastTimeString = _gpstk.cvar.RinexObsHeader_lastTimeString
RinexObsHeader.receiverOffsetString = _gpstk.cvar.RinexObsHeader_receiverOffsetString
RinexObsHeader.leapSecondsString = _gpstk.cvar.RinexObsHeader_leapSecondsString
RinexObsHeader.numSatsString = _gpstk.cvar.RinexObsHeader_numSatsString
RinexObsHeader.prnObsString = _gpstk.cvar.RinexObsHeader_prnObsString
RinexObsHeader.endOfHeader = _gpstk.cvar.RinexObsHeader_endOfHeader
RinexObsHeader.UN = _gpstk.cvar.RinexObsHeader_UN
RinexObsHeader.L1 = _gpstk.cvar.RinexObsHeader_L1
RinexObsHeader.L2 = _gpstk.cvar.RinexObsHeader_L2
RinexObsHeader.C1 = _gpstk.cvar.RinexObsHeader_C1
RinexObsHeader.C2 = _gpstk.cvar.RinexObsHeader_C2
RinexObsHeader.P1 = _gpstk.cvar.RinexObsHeader_P1
RinexObsHeader.P2 = _gpstk.cvar.RinexObsHeader_P2
RinexObsHeader.D1 = _gpstk.cvar.RinexObsHeader_D1
RinexObsHeader.D2 = _gpstk.cvar.RinexObsHeader_D2
RinexObsHeader.S1 = _gpstk.cvar.RinexObsHeader_S1
RinexObsHeader.S2 = _gpstk.cvar.RinexObsHeader_S2
RinexObsHeader.T1 = _gpstk.cvar.RinexObsHeader_T1
RinexObsHeader.T2 = _gpstk.cvar.RinexObsHeader_T2
RinexObsHeader.C5 = _gpstk.cvar.RinexObsHeader_C5
RinexObsHeader.L5 = _gpstk.cvar.RinexObsHeader_L5
RinexObsHeader.D5 = _gpstk.cvar.RinexObsHeader_D5
RinexObsHeader.S5 = _gpstk.cvar.RinexObsHeader_S5
RinexObsHeader.C6 = _gpstk.cvar.RinexObsHeader_C6
RinexObsHeader.L6 = _gpstk.cvar.RinexObsHeader_L6
RinexObsHeader.D6 = _gpstk.cvar.RinexObsHeader_D6
RinexObsHeader.S6 = _gpstk.cvar.RinexObsHeader_S6
RinexObsHeader.C7 = _gpstk.cvar.RinexObsHeader_C7
RinexObsHeader.L7 = _gpstk.cvar.RinexObsHeader_L7
RinexObsHeader.D7 = _gpstk.cvar.RinexObsHeader_D7
RinexObsHeader.S7 = _gpstk.cvar.RinexObsHeader_S7
RinexObsHeader.C8 = _gpstk.cvar.RinexObsHeader_C8
RinexObsHeader.L8 = _gpstk.cvar.RinexObsHeader_L8
RinexObsHeader.D8 = _gpstk.cvar.RinexObsHeader_D8
RinexObsHeader.S8 = _gpstk.cvar.RinexObsHeader_S8
RinexObsHeader.StandardRinexObsTypes = _gpstk.cvar.RinexObsHeader_StandardRinexObsTypes

def RinexObsHeader_convertObsType(*args):
    """
    convertObsType(std::string const & oneObs) -> RinexObsType
    RinexObsHeader_convertObsType(RinexObsType oneObs) -> std::string
    """
    return _gpstk.RinexObsHeader_convertObsType(*args)


def __eq__(x, y):
    """__eq__(RinexObsType x, RinexObsType y) -> bool"""
    return _gpstk.__eq__(x, y)

def __lt__(x, y):
    """__lt__(RinexObsType x, RinexObsType y) -> bool"""
    return _gpstk.__lt__(x, y)

def RegisterExtendedRinexObsType(*args):
    """
    RegisterExtendedRinexObsType(std::string t, std::string d, std::string u, unsigned int dep=0) -> int
    RegisterExtendedRinexObsType(std::string t, std::string d, std::string u) -> int
    RegisterExtendedRinexObsType(std::string t, std::string d) -> int
    RegisterExtendedRinexObsType(std::string t) -> int
    """
    return _gpstk.RegisterExtendedRinexObsType(*args)

def DisplayStandardRinexObsTypes(s):
    """DisplayStandardRinexObsTypes(std::ostream & s)"""
    return _gpstk.DisplayStandardRinexObsTypes(s)

def DisplayExtendedRinexObsTypes(s):
    """DisplayExtendedRinexObsTypes(std::ostream & s)"""
    return _gpstk.DisplayExtendedRinexObsTypes(s)
class RinexDatum(_object):
    """Proxy of C++ gpstk::RinexDatum class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexDatum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RinexDatum, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::RinexDatum self) -> RinexDatum"""
        this = _gpstk.new_RinexDatum()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["data"] = _gpstk.RinexDatum_data_set
    __swig_getmethods__["data"] = _gpstk.RinexDatum_data_get
    if _newclass:
        data = _swig_property(_gpstk.RinexDatum_data_get, _gpstk.RinexDatum_data_set)
    __swig_setmethods__["lli"] = _gpstk.RinexDatum_lli_set
    __swig_getmethods__["lli"] = _gpstk.RinexDatum_lli_get
    if _newclass:
        lli = _swig_property(_gpstk.RinexDatum_lli_get, _gpstk.RinexDatum_lli_set)
    __swig_setmethods__["ssi"] = _gpstk.RinexDatum_ssi_set
    __swig_getmethods__["ssi"] = _gpstk.RinexDatum_ssi_get
    if _newclass:
        ssi = _swig_property(_gpstk.RinexDatum_ssi_get, _gpstk.RinexDatum_ssi_set)
    __swig_destroy__ = _gpstk.delete_RinexDatum
    __del__ = lambda self: None
RinexDatum_swigregister = _gpstk.RinexDatum_swigregister
RinexDatum_swigregister(RinexDatum)

class RinexObsData(RinexObsBase):
    """Proxy of C++ gpstk::RinexObsData class"""
    __swig_setmethods__ = {}
    for _s in [RinexObsBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexObsData, name, value)
    __swig_getmethods__ = {}
    for _s in [RinexObsBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexObsData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _gpstk.RinexObsData_time_set
    __swig_getmethods__["time"] = _gpstk.RinexObsData_time_get
    if _newclass:
        time = _swig_property(_gpstk.RinexObsData_time_get, _gpstk.RinexObsData_time_set)
    __swig_setmethods__["epochFlag"] = _gpstk.RinexObsData_epochFlag_set
    __swig_getmethods__["epochFlag"] = _gpstk.RinexObsData_epochFlag_get
    if _newclass:
        epochFlag = _swig_property(_gpstk.RinexObsData_epochFlag_get, _gpstk.RinexObsData_epochFlag_set)
    __swig_setmethods__["numSvs"] = _gpstk.RinexObsData_numSvs_set
    __swig_getmethods__["numSvs"] = _gpstk.RinexObsData_numSvs_get
    if _newclass:
        numSvs = _swig_property(_gpstk.RinexObsData_numSvs_get, _gpstk.RinexObsData_numSvs_set)
    __swig_setmethods__["clockOffset"] = _gpstk.RinexObsData_clockOffset_set
    __swig_getmethods__["clockOffset"] = _gpstk.RinexObsData_clockOffset_get
    if _newclass:
        clockOffset = _swig_property(_gpstk.RinexObsData_clockOffset_get, _gpstk.RinexObsData_clockOffset_set)
    __swig_setmethods__["obs"] = _gpstk.RinexObsData_obs_set
    __swig_getmethods__["obs"] = _gpstk.RinexObsData_obs_get
    if _newclass:
        obs = _swig_property(_gpstk.RinexObsData_obs_get, _gpstk.RinexObsData_obs_set)
    __swig_setmethods__["auxHeader"] = _gpstk.RinexObsData_auxHeader_set
    __swig_getmethods__["auxHeader"] = _gpstk.RinexObsData_auxHeader_get
    if _newclass:
        auxHeader = _swig_property(_gpstk.RinexObsData_auxHeader_get, _gpstk.RinexObsData_auxHeader_set)

    def __init__(self):
        """__init__(gpstk::RinexObsData self) -> RinexObsData"""
        this = _gpstk.new_RinexObsData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_RinexObsData
    __del__ = lambda self: None

    def isData(self):
        """isData(RinexObsData self) -> bool"""
        return _gpstk.RinexObsData_isData(self)


    def __str__(self):
        """__str__(RinexObsData self) -> std::string"""
        return _gpstk.RinexObsData___str__(self)

RinexObsData_swigregister = _gpstk.RinexObsData_swigregister
RinexObsData_swigregister(RinexObsData)


def isValidRinexObsID(*args):
    """
    isValidRinexObsID(std::string const & id) -> bool
    isValidRinexObsID(std::string const & id, char const syschar) -> bool
    """
    return _gpstk.isValidRinexObsID(*args)
class RinexObsID(ObsID):
    """Proxy of C++ gpstk::RinexObsID class"""
    __swig_setmethods__ = {}
    for _s in [ObsID]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexObsID, name, value)
    __swig_getmethods__ = {}
    for _s in [ObsID]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexObsID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::RinexObsID self) -> RinexObsID
        __init__(gpstk::RinexObsID self, gpstk::ObsID::ObservationType ot, gpstk::ObsID::CarrierBand cb, gpstk::ObsID::TrackingCode tc) -> RinexObsID
        __init__(gpstk::RinexObsID self, std::string const & strID) -> RinexObsID
        __init__(gpstk::RinexObsID self, ObsID oid) -> RinexObsID
        __init__(gpstk::RinexObsID self, RinexObsType rot) -> RinexObsID
        """
        this = _gpstk.new_RinexObsID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __str__(self):
        """__str__(RinexObsID self) -> std::string"""
        return _gpstk.RinexObsID___str__(self)


    def dumpCheck(s):
        """dumpCheck(std::ostream & s) -> std::ostream &"""
        return _gpstk.RinexObsID_dumpCheck(s)

    if _newclass:
        dumpCheck = staticmethod(dumpCheck)
    __swig_getmethods__["dumpCheck"] = lambda x: dumpCheck
    __swig_destroy__ = _gpstk.delete_RinexObsID
    __del__ = lambda self: None
RinexObsID_swigregister = _gpstk.RinexObsID_swigregister
RinexObsID_swigregister(RinexObsID)

def RinexObsID_dumpCheck(s):
    """RinexObsID_dumpCheck(std::ostream & s) -> std::ostream &"""
    return _gpstk.RinexObsID_dumpCheck(s)

class RinexObsStream(FFTextStream):
    """Proxy of C++ gpstk::RinexObsStream class"""
    __swig_setmethods__ = {}
    for _s in [FFTextStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexObsStream, name, value)
    __swig_getmethods__ = {}
    for _s in [FFTextStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexObsStream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::RinexObsStream self) -> RinexObsStream
        __init__(gpstk::RinexObsStream self, char const * fn, std::ios::openmode mode) -> RinexObsStream
        __init__(gpstk::RinexObsStream self, char const * fn) -> RinexObsStream
        __init__(gpstk::RinexObsStream self, std::string const fn, std::ios::openmode mode) -> RinexObsStream
        __init__(gpstk::RinexObsStream self, std::string const fn) -> RinexObsStream
        """
        this = _gpstk.new_RinexObsStream(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_RinexObsStream
    __del__ = lambda self: None

    def open(self, *args):
        """
        open(RinexObsStream self, char const * fn, std::ios::openmode mode)
        open(RinexObsStream self, std::string const & fn, std::ios::openmode mode)
        """
        return _gpstk.RinexObsStream_open(self, *args)

    __swig_setmethods__["headerRead"] = _gpstk.RinexObsStream_headerRead_set
    __swig_getmethods__["headerRead"] = _gpstk.RinexObsStream_headerRead_get
    if _newclass:
        headerRead = _swig_property(_gpstk.RinexObsStream_headerRead_get, _gpstk.RinexObsStream_headerRead_set)
    __swig_setmethods__["header"] = _gpstk.RinexObsStream_header_set
    __swig_getmethods__["header"] = _gpstk.RinexObsStream_header_get
    if _newclass:
        header = _swig_property(_gpstk.RinexObsStream_header_get, _gpstk.RinexObsStream_header_set)

    def IsRinexObsStream(i):
        """IsRinexObsStream(std::istream & i) -> bool"""
        return _gpstk.RinexObsStream_IsRinexObsStream(i)

    if _newclass:
        IsRinexObsStream = staticmethod(IsRinexObsStream)
    __swig_getmethods__["IsRinexObsStream"] = lambda x: IsRinexObsStream

    def inRinexObsStream(fileName):
        """inRinexObsStream(std::string const fileName) -> RinexObsStream"""
        return _gpstk.RinexObsStream_inRinexObsStream(fileName)

    if _newclass:
        inRinexObsStream = staticmethod(inRinexObsStream)
    __swig_getmethods__["inRinexObsStream"] = lambda x: inRinexObsStream

    def outRinexObsStream(fileName):
        """outRinexObsStream(std::string const fileName) -> RinexObsStream"""
        return _gpstk.RinexObsStream_outRinexObsStream(fileName)

    if _newclass:
        outRinexObsStream = staticmethod(outRinexObsStream)
    __swig_getmethods__["outRinexObsStream"] = lambda x: outRinexObsStream

    def _remove(ptr):
        """_remove(RinexObsStream ptr)"""
        return _gpstk.RinexObsStream__remove(ptr)

    if _newclass:
        _remove = staticmethod(_remove)
    __swig_getmethods__["_remove"] = lambda x: _remove

    def readHeader(self):
        """readHeader(RinexObsStream self) -> RinexObsHeader"""
        return _gpstk.RinexObsStream_readHeader(self)


    def readData(self):
        """readData(RinexObsStream self) -> RinexObsData"""
        return _gpstk.RinexObsStream_readData(self)


    def writeHeader(self, head):
        """writeHeader(RinexObsStream self, RinexObsHeader head)"""
        return _gpstk.RinexObsStream_writeHeader(self, head)


    def writeData(self, data):
        """writeData(RinexObsStream self, RinexObsData data)"""
        return _gpstk.RinexObsStream_writeData(self, data)

RinexObsStream_swigregister = _gpstk.RinexObsStream_swigregister
RinexObsStream_swigregister(RinexObsStream)

def RinexObsStream_IsRinexObsStream(i):
    """RinexObsStream_IsRinexObsStream(std::istream & i) -> bool"""
    return _gpstk.RinexObsStream_IsRinexObsStream(i)

def RinexObsStream_inRinexObsStream(fileName):
    """RinexObsStream_inRinexObsStream(std::string const fileName) -> RinexObsStream"""
    return _gpstk.RinexObsStream_inRinexObsStream(fileName)

def RinexObsStream_outRinexObsStream(fileName):
    """RinexObsStream_outRinexObsStream(std::string const fileName) -> RinexObsStream"""
    return _gpstk.RinexObsStream_outRinexObsStream(fileName)

def RinexObsStream__remove(ptr):
    """RinexObsStream__remove(RinexObsStream ptr)"""
    return _gpstk.RinexObsStream__remove(ptr)

class RinexClockHeader(RinexClockBase):
    """Proxy of C++ gpstk::RinexClockHeader class"""
    __swig_setmethods__ = {}
    for _s in [RinexClockBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexClockHeader, name, value)
    __swig_getmethods__ = {}
    for _s in [RinexClockBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexClockHeader, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::RinexClockHeader self) -> RinexClockHeader"""
        this = _gpstk.new_RinexClockHeader()
        try:
            self.this.append(this)
        except:
            self.this = this
    versionValid = _gpstk.RinexClockHeader_versionValid
    runByValid = _gpstk.RinexClockHeader_runByValid
    commentValid = _gpstk.RinexClockHeader_commentValid
    sysValid = _gpstk.RinexClockHeader_sysValid
    timeSystemValid = _gpstk.RinexClockHeader_timeSystemValid
    leapSecondsValid = _gpstk.RinexClockHeader_leapSecondsValid
    sysDCBValid = _gpstk.RinexClockHeader_sysDCBValid
    sysPCVValid = _gpstk.RinexClockHeader_sysPCVValid
    numDataValid = _gpstk.RinexClockHeader_numDataValid
    stationNameValid = _gpstk.RinexClockHeader_stationNameValid
    stationClockRefValid = _gpstk.RinexClockHeader_stationClockRefValid
    analysisCenterValid = _gpstk.RinexClockHeader_analysisCenterValid
    numClockRefValid = _gpstk.RinexClockHeader_numClockRefValid
    analysisClkRefrValid = _gpstk.RinexClockHeader_analysisClkRefrValid
    numReceiversValid = _gpstk.RinexClockHeader_numReceiversValid
    solnStateValid = _gpstk.RinexClockHeader_solnStateValid
    numSolnSatsValid = _gpstk.RinexClockHeader_numSolnSatsValid
    prnListValid = _gpstk.RinexClockHeader_prnListValid
    endOfHeaderValid = _gpstk.RinexClockHeader_endOfHeaderValid
    allRequiredValid = _gpstk.RinexClockHeader_allRequiredValid
    allValid = _gpstk.RinexClockHeader_allValid
    __swig_destroy__ = _gpstk.delete_RinexClockHeader
    __del__ = lambda self: None

    def isHeader(self):
        """isHeader(RinexClockHeader self) -> bool"""
        return _gpstk.RinexClockHeader_isHeader(self)


    def dumpValid(self, *args):
        """
        dumpValid(RinexClockHeader self, std::ostream & s)
        dumpValid(RinexClockHeader self)
        """
        return _gpstk.RinexClockHeader_dumpValid(self, *args)

    __swig_setmethods__["version"] = _gpstk.RinexClockHeader_version_set
    __swig_getmethods__["version"] = _gpstk.RinexClockHeader_version_get
    if _newclass:
        version = _swig_property(_gpstk.RinexClockHeader_version_get, _gpstk.RinexClockHeader_version_set)
    __swig_setmethods__["program"] = _gpstk.RinexClockHeader_program_set
    __swig_getmethods__["program"] = _gpstk.RinexClockHeader_program_get
    if _newclass:
        program = _swig_property(_gpstk.RinexClockHeader_program_get, _gpstk.RinexClockHeader_program_set)
    __swig_setmethods__["runby"] = _gpstk.RinexClockHeader_runby_set
    __swig_getmethods__["runby"] = _gpstk.RinexClockHeader_runby_get
    if _newclass:
        runby = _swig_property(_gpstk.RinexClockHeader_runby_get, _gpstk.RinexClockHeader_runby_set)
    __swig_setmethods__["dataTypes"] = _gpstk.RinexClockHeader_dataTypes_set
    __swig_getmethods__["dataTypes"] = _gpstk.RinexClockHeader_dataTypes_get
    if _newclass:
        dataTypes = _swig_property(_gpstk.RinexClockHeader_dataTypes_get, _gpstk.RinexClockHeader_dataTypes_set)
    __swig_setmethods__["leapSeconds"] = _gpstk.RinexClockHeader_leapSeconds_set
    __swig_getmethods__["leapSeconds"] = _gpstk.RinexClockHeader_leapSeconds_get
    if _newclass:
        leapSeconds = _swig_property(_gpstk.RinexClockHeader_leapSeconds_get, _gpstk.RinexClockHeader_leapSeconds_set)
    __swig_setmethods__["timeSystem"] = _gpstk.RinexClockHeader_timeSystem_set
    __swig_getmethods__["timeSystem"] = _gpstk.RinexClockHeader_timeSystem_get
    if _newclass:
        timeSystem = _swig_property(_gpstk.RinexClockHeader_timeSystem_get, _gpstk.RinexClockHeader_timeSystem_set)
    __swig_setmethods__["analCenterDesignator"] = _gpstk.RinexClockHeader_analCenterDesignator_set
    __swig_getmethods__["analCenterDesignator"] = _gpstk.RinexClockHeader_analCenterDesignator_get
    if _newclass:
        analCenterDesignator = _swig_property(_gpstk.RinexClockHeader_analCenterDesignator_get, _gpstk.RinexClockHeader_analCenterDesignator_set)
    __swig_setmethods__["analysisCenter"] = _gpstk.RinexClockHeader_analysisCenter_set
    __swig_getmethods__["analysisCenter"] = _gpstk.RinexClockHeader_analysisCenter_get
    if _newclass:
        analysisCenter = _swig_property(_gpstk.RinexClockHeader_analysisCenter_get, _gpstk.RinexClockHeader_analysisCenter_set)
    __swig_setmethods__["terrRefFrame"] = _gpstk.RinexClockHeader_terrRefFrame_set
    __swig_getmethods__["terrRefFrame"] = _gpstk.RinexClockHeader_terrRefFrame_get
    if _newclass:
        terrRefFrame = _swig_property(_gpstk.RinexClockHeader_terrRefFrame_get, _gpstk.RinexClockHeader_terrRefFrame_set)
    __swig_setmethods__["pcvsSystem"] = _gpstk.RinexClockHeader_pcvsSystem_set
    __swig_getmethods__["pcvsSystem"] = _gpstk.RinexClockHeader_pcvsSystem_get
    if _newclass:
        pcvsSystem = _swig_property(_gpstk.RinexClockHeader_pcvsSystem_get, _gpstk.RinexClockHeader_pcvsSystem_set)
    __swig_setmethods__["pcvsProgram"] = _gpstk.RinexClockHeader_pcvsProgram_set
    __swig_getmethods__["pcvsProgram"] = _gpstk.RinexClockHeader_pcvsProgram_get
    if _newclass:
        pcvsProgram = _swig_property(_gpstk.RinexClockHeader_pcvsProgram_get, _gpstk.RinexClockHeader_pcvsProgram_set)
    __swig_setmethods__["pcvsSource"] = _gpstk.RinexClockHeader_pcvsSource_set
    __swig_getmethods__["pcvsSource"] = _gpstk.RinexClockHeader_pcvsSource_get
    if _newclass:
        pcvsSource = _swig_property(_gpstk.RinexClockHeader_pcvsSource_get, _gpstk.RinexClockHeader_pcvsSource_set)
    __swig_setmethods__["numSolnStations"] = _gpstk.RinexClockHeader_numSolnStations_set
    __swig_getmethods__["numSolnStations"] = _gpstk.RinexClockHeader_numSolnStations_get
    if _newclass:
        numSolnStations = _swig_property(_gpstk.RinexClockHeader_numSolnStations_get, _gpstk.RinexClockHeader_numSolnStations_set)
    __swig_setmethods__["stationID"] = _gpstk.RinexClockHeader_stationID_set
    __swig_getmethods__["stationID"] = _gpstk.RinexClockHeader_stationID_get
    if _newclass:
        stationID = _swig_property(_gpstk.RinexClockHeader_stationID_get, _gpstk.RinexClockHeader_stationID_set)
    __swig_setmethods__["stationX"] = _gpstk.RinexClockHeader_stationX_set
    __swig_getmethods__["stationX"] = _gpstk.RinexClockHeader_stationX_get
    if _newclass:
        stationX = _swig_property(_gpstk.RinexClockHeader_stationX_get, _gpstk.RinexClockHeader_stationX_set)
    __swig_setmethods__["stationY"] = _gpstk.RinexClockHeader_stationY_set
    __swig_getmethods__["stationY"] = _gpstk.RinexClockHeader_stationY_get
    if _newclass:
        stationY = _swig_property(_gpstk.RinexClockHeader_stationY_get, _gpstk.RinexClockHeader_stationY_set)
    __swig_setmethods__["stationZ"] = _gpstk.RinexClockHeader_stationZ_set
    __swig_getmethods__["stationZ"] = _gpstk.RinexClockHeader_stationZ_get
    if _newclass:
        stationZ = _swig_property(_gpstk.RinexClockHeader_stationZ_get, _gpstk.RinexClockHeader_stationZ_set)
    __swig_setmethods__["numSolnSatellites"] = _gpstk.RinexClockHeader_numSolnSatellites_set
    __swig_getmethods__["numSolnSatellites"] = _gpstk.RinexClockHeader_numSolnSatellites_get
    if _newclass:
        numSolnSatellites = _swig_property(_gpstk.RinexClockHeader_numSolnSatellites_get, _gpstk.RinexClockHeader_numSolnSatellites_set)
    __swig_setmethods__["satList"] = _gpstk.RinexClockHeader_satList_set
    __swig_getmethods__["satList"] = _gpstk.RinexClockHeader_satList_get
    if _newclass:
        satList = _swig_property(_gpstk.RinexClockHeader_satList_get, _gpstk.RinexClockHeader_satList_set)
    __swig_setmethods__["commentList"] = _gpstk.RinexClockHeader_commentList_set
    __swig_getmethods__["commentList"] = _gpstk.RinexClockHeader_commentList_get
    if _newclass:
        commentList = _swig_property(_gpstk.RinexClockHeader_commentList_get, _gpstk.RinexClockHeader_commentList_set)
    __swig_setmethods__["valid"] = _gpstk.RinexClockHeader_valid_set
    __swig_getmethods__["valid"] = _gpstk.RinexClockHeader_valid_get
    if _newclass:
        valid = _swig_property(_gpstk.RinexClockHeader_valid_get, _gpstk.RinexClockHeader_valid_set)

    def __str__(self):
        """__str__(RinexClockHeader self) -> std::string"""
        return _gpstk.RinexClockHeader___str__(self)

RinexClockHeader_swigregister = _gpstk.RinexClockHeader_swigregister
RinexClockHeader_swigregister(RinexClockHeader)
RinexClockHeader.versionString = _gpstk.cvar.RinexClockHeader_versionString
RinexClockHeader.runByString = _gpstk.cvar.RinexClockHeader_runByString
RinexClockHeader.commentString = _gpstk.cvar.RinexClockHeader_commentString
RinexClockHeader.sysString = _gpstk.cvar.RinexClockHeader_sysString
RinexClockHeader.timeSystemString = _gpstk.cvar.RinexClockHeader_timeSystemString
RinexClockHeader.leapSecondsString = _gpstk.cvar.RinexClockHeader_leapSecondsString
RinexClockHeader.sysDCBString = _gpstk.cvar.RinexClockHeader_sysDCBString
RinexClockHeader.sysPCVString = _gpstk.cvar.RinexClockHeader_sysPCVString
RinexClockHeader.numDataString = _gpstk.cvar.RinexClockHeader_numDataString
RinexClockHeader.stationNameString = _gpstk.cvar.RinexClockHeader_stationNameString
RinexClockHeader.stationClockRefString = _gpstk.cvar.RinexClockHeader_stationClockRefString
RinexClockHeader.analysisCenterString = _gpstk.cvar.RinexClockHeader_analysisCenterString
RinexClockHeader.numClockRefString = _gpstk.cvar.RinexClockHeader_numClockRefString
RinexClockHeader.analysisClkRefrString = _gpstk.cvar.RinexClockHeader_analysisClkRefrString
RinexClockHeader.numReceiversString = _gpstk.cvar.RinexClockHeader_numReceiversString
RinexClockHeader.solnStateString = _gpstk.cvar.RinexClockHeader_solnStateString
RinexClockHeader.numSolnSatsString = _gpstk.cvar.RinexClockHeader_numSolnSatsString
RinexClockHeader.prnListString = _gpstk.cvar.RinexClockHeader_prnListString
RinexClockHeader.endOfHeaderString = _gpstk.cvar.RinexClockHeader_endOfHeaderString

class RinexClockData(RinexClockBase):
    """Proxy of C++ gpstk::RinexClockData class"""
    __swig_setmethods__ = {}
    for _s in [RinexClockBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexClockData, name, value)
    __swig_getmethods__ = {}
    for _s in [RinexClockBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexClockData, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::RinexClockData self) -> RinexClockData"""
        this = _gpstk.new_RinexClockData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_RinexClockData
    __del__ = lambda self: None

    def isData(self):
        """isData(RinexClockData self) -> bool"""
        return _gpstk.RinexClockData_isData(self)

    __swig_setmethods__["datatype"] = _gpstk.RinexClockData_datatype_set
    __swig_getmethods__["datatype"] = _gpstk.RinexClockData_datatype_get
    if _newclass:
        datatype = _swig_property(_gpstk.RinexClockData_datatype_get, _gpstk.RinexClockData_datatype_set)
    __swig_setmethods__["sat"] = _gpstk.RinexClockData_sat_set
    __swig_getmethods__["sat"] = _gpstk.RinexClockData_sat_get
    if _newclass:
        sat = _swig_property(_gpstk.RinexClockData_sat_get, _gpstk.RinexClockData_sat_set)
    __swig_setmethods__["site"] = _gpstk.RinexClockData_site_set
    __swig_getmethods__["site"] = _gpstk.RinexClockData_site_get
    if _newclass:
        site = _swig_property(_gpstk.RinexClockData_site_get, _gpstk.RinexClockData_site_set)
    __swig_setmethods__["time"] = _gpstk.RinexClockData_time_set
    __swig_getmethods__["time"] = _gpstk.RinexClockData_time_get
    if _newclass:
        time = _swig_property(_gpstk.RinexClockData_time_get, _gpstk.RinexClockData_time_set)
    __swig_setmethods__["bias"] = _gpstk.RinexClockData_bias_set
    __swig_getmethods__["bias"] = _gpstk.RinexClockData_bias_get
    if _newclass:
        bias = _swig_property(_gpstk.RinexClockData_bias_get, _gpstk.RinexClockData_bias_set)
    __swig_setmethods__["sig_bias"] = _gpstk.RinexClockData_sig_bias_set
    __swig_getmethods__["sig_bias"] = _gpstk.RinexClockData_sig_bias_get
    if _newclass:
        sig_bias = _swig_property(_gpstk.RinexClockData_sig_bias_get, _gpstk.RinexClockData_sig_bias_set)
    __swig_setmethods__["drift"] = _gpstk.RinexClockData_drift_set
    __swig_getmethods__["drift"] = _gpstk.RinexClockData_drift_get
    if _newclass:
        drift = _swig_property(_gpstk.RinexClockData_drift_get, _gpstk.RinexClockData_drift_set)
    __swig_setmethods__["sig_drift"] = _gpstk.RinexClockData_sig_drift_set
    __swig_getmethods__["sig_drift"] = _gpstk.RinexClockData_sig_drift_get
    if _newclass:
        sig_drift = _swig_property(_gpstk.RinexClockData_sig_drift_get, _gpstk.RinexClockData_sig_drift_set)
    __swig_setmethods__["accel"] = _gpstk.RinexClockData_accel_set
    __swig_getmethods__["accel"] = _gpstk.RinexClockData_accel_get
    if _newclass:
        accel = _swig_property(_gpstk.RinexClockData_accel_get, _gpstk.RinexClockData_accel_set)
    __swig_setmethods__["sig_accel"] = _gpstk.RinexClockData_sig_accel_set
    __swig_getmethods__["sig_accel"] = _gpstk.RinexClockData_sig_accel_get
    if _newclass:
        sig_accel = _swig_property(_gpstk.RinexClockData_sig_accel_get, _gpstk.RinexClockData_sig_accel_set)

    def __str__(self):
        """__str__(RinexClockData self) -> std::string"""
        return _gpstk.RinexClockData___str__(self)

RinexClockData_swigregister = _gpstk.RinexClockData_swigregister
RinexClockData_swigregister(RinexClockData)

class RinexClockStream(FFTextStream):
    """Proxy of C++ gpstk::RinexClockStream class"""
    __swig_setmethods__ = {}
    for _s in [FFTextStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexClockStream, name, value)
    __swig_getmethods__ = {}
    for _s in [FFTextStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexClockStream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::RinexClockStream self) -> RinexClockStream
        __init__(gpstk::RinexClockStream self, char const * filename, std::ios::openmode mode) -> RinexClockStream
        __init__(gpstk::RinexClockStream self, char const * filename) -> RinexClockStream
        """
        this = _gpstk.new_RinexClockStream(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_RinexClockStream
    __del__ = lambda self: None

    def open(self, filename, mode):
        """open(RinexClockStream self, char const * filename, std::ios::openmode mode)"""
        return _gpstk.RinexClockStream_open(self, filename, mode)

    __swig_setmethods__["headerRead"] = _gpstk.RinexClockStream_headerRead_set
    __swig_getmethods__["headerRead"] = _gpstk.RinexClockStream_headerRead_get
    if _newclass:
        headerRead = _swig_property(_gpstk.RinexClockStream_headerRead_get, _gpstk.RinexClockStream_headerRead_set)

    def inRinexClockStream(fileName):
        """inRinexClockStream(std::string const fileName) -> RinexClockStream"""
        return _gpstk.RinexClockStream_inRinexClockStream(fileName)

    if _newclass:
        inRinexClockStream = staticmethod(inRinexClockStream)
    __swig_getmethods__["inRinexClockStream"] = lambda x: inRinexClockStream

    def outRinexClockStream(fileName):
        """outRinexClockStream(std::string const fileName) -> RinexClockStream"""
        return _gpstk.RinexClockStream_outRinexClockStream(fileName)

    if _newclass:
        outRinexClockStream = staticmethod(outRinexClockStream)
    __swig_getmethods__["outRinexClockStream"] = lambda x: outRinexClockStream

    def _remove(ptr):
        """_remove(RinexClockStream ptr)"""
        return _gpstk.RinexClockStream__remove(ptr)

    if _newclass:
        _remove = staticmethod(_remove)
    __swig_getmethods__["_remove"] = lambda x: _remove

    def readHeader(self):
        """readHeader(RinexClockStream self) -> RinexClockHeader"""
        return _gpstk.RinexClockStream_readHeader(self)


    def readData(self):
        """readData(RinexClockStream self) -> RinexClockData"""
        return _gpstk.RinexClockStream_readData(self)


    def writeHeader(self, head):
        """writeHeader(RinexClockStream self, RinexClockHeader head)"""
        return _gpstk.RinexClockStream_writeHeader(self, head)


    def writeData(self, data):
        """writeData(RinexClockStream self, RinexClockData data)"""
        return _gpstk.RinexClockStream_writeData(self, data)

RinexClockStream_swigregister = _gpstk.RinexClockStream_swigregister
RinexClockStream_swigregister(RinexClockStream)

def RinexClockStream_inRinexClockStream(fileName):
    """RinexClockStream_inRinexClockStream(std::string const fileName) -> RinexClockStream"""
    return _gpstk.RinexClockStream_inRinexClockStream(fileName)

def RinexClockStream_outRinexClockStream(fileName):
    """RinexClockStream_outRinexClockStream(std::string const fileName) -> RinexClockStream"""
    return _gpstk.RinexClockStream_outRinexClockStream(fileName)

def RinexClockStream__remove(ptr):
    """RinexClockStream__remove(RinexClockStream ptr)"""
    return _gpstk.RinexClockStream__remove(ptr)

class RinexNavBase(FFData):
    """Proxy of C++ gpstk::RinexNavBase class"""
    __swig_setmethods__ = {}
    for _s in [FFData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexNavBase, name, value)
    __swig_getmethods__ = {}
    for _s in [FFData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexNavBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_RinexNavBase
    __del__ = lambda self: None
RinexNavBase_swigregister = _gpstk.RinexNavBase_swigregister
RinexNavBase_swigregister(RinexNavBase)

class RinexNavHeader(RinexNavBase):
    """Proxy of C++ gpstk::RinexNavHeader class"""
    __swig_setmethods__ = {}
    for _s in [RinexNavBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexNavHeader, name, value)
    __swig_getmethods__ = {}
    for _s in [RinexNavBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexNavHeader, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::RinexNavHeader self) -> RinexNavHeader"""
        this = _gpstk.new_RinexNavHeader()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_RinexNavHeader
    __del__ = lambda self: None

    def isHeader(self):
        """isHeader(RinexNavHeader self) -> bool"""
        return _gpstk.RinexNavHeader_isHeader(self)

    __swig_setmethods__["valid"] = _gpstk.RinexNavHeader_valid_set
    __swig_getmethods__["valid"] = _gpstk.RinexNavHeader_valid_get
    if _newclass:
        valid = _swig_property(_gpstk.RinexNavHeader_valid_get, _gpstk.RinexNavHeader_valid_set)
    versionValid = _gpstk.RinexNavHeader_versionValid
    runByValid = _gpstk.RinexNavHeader_runByValid
    commentValid = _gpstk.RinexNavHeader_commentValid
    ionAlphaValid = _gpstk.RinexNavHeader_ionAlphaValid
    ionBetaValid = _gpstk.RinexNavHeader_ionBetaValid
    deltaUTCValid = _gpstk.RinexNavHeader_deltaUTCValid
    leapSecondsValid = _gpstk.RinexNavHeader_leapSecondsValid
    endValid = _gpstk.RinexNavHeader_endValid
    allValid20 = _gpstk.RinexNavHeader_allValid20
    allValid21 = _gpstk.RinexNavHeader_allValid21
    allValid211 = _gpstk.RinexNavHeader_allValid211
    __swig_setmethods__["version"] = _gpstk.RinexNavHeader_version_set
    __swig_getmethods__["version"] = _gpstk.RinexNavHeader_version_get
    if _newclass:
        version = _swig_property(_gpstk.RinexNavHeader_version_get, _gpstk.RinexNavHeader_version_set)
    __swig_setmethods__["fileType"] = _gpstk.RinexNavHeader_fileType_set
    __swig_getmethods__["fileType"] = _gpstk.RinexNavHeader_fileType_get
    if _newclass:
        fileType = _swig_property(_gpstk.RinexNavHeader_fileType_get, _gpstk.RinexNavHeader_fileType_set)
    __swig_setmethods__["fileProgram"] = _gpstk.RinexNavHeader_fileProgram_set
    __swig_getmethods__["fileProgram"] = _gpstk.RinexNavHeader_fileProgram_get
    if _newclass:
        fileProgram = _swig_property(_gpstk.RinexNavHeader_fileProgram_get, _gpstk.RinexNavHeader_fileProgram_set)
    __swig_setmethods__["fileAgency"] = _gpstk.RinexNavHeader_fileAgency_set
    __swig_getmethods__["fileAgency"] = _gpstk.RinexNavHeader_fileAgency_get
    if _newclass:
        fileAgency = _swig_property(_gpstk.RinexNavHeader_fileAgency_get, _gpstk.RinexNavHeader_fileAgency_set)
    __swig_setmethods__["date"] = _gpstk.RinexNavHeader_date_set
    __swig_getmethods__["date"] = _gpstk.RinexNavHeader_date_get
    if _newclass:
        date = _swig_property(_gpstk.RinexNavHeader_date_get, _gpstk.RinexNavHeader_date_set)
    __swig_setmethods__["commentList"] = _gpstk.RinexNavHeader_commentList_set
    __swig_getmethods__["commentList"] = _gpstk.RinexNavHeader_commentList_get
    if _newclass:
        commentList = _swig_property(_gpstk.RinexNavHeader_commentList_get, _gpstk.RinexNavHeader_commentList_set)
    __swig_setmethods__["ionAlpha"] = _gpstk.RinexNavHeader_ionAlpha_set
    __swig_getmethods__["ionAlpha"] = _gpstk.RinexNavHeader_ionAlpha_get
    if _newclass:
        ionAlpha = _swig_property(_gpstk.RinexNavHeader_ionAlpha_get, _gpstk.RinexNavHeader_ionAlpha_set)
    __swig_setmethods__["ionBeta"] = _gpstk.RinexNavHeader_ionBeta_set
    __swig_getmethods__["ionBeta"] = _gpstk.RinexNavHeader_ionBeta_get
    if _newclass:
        ionBeta = _swig_property(_gpstk.RinexNavHeader_ionBeta_get, _gpstk.RinexNavHeader_ionBeta_set)
    __swig_setmethods__["A0"] = _gpstk.RinexNavHeader_A0_set
    __swig_getmethods__["A0"] = _gpstk.RinexNavHeader_A0_get
    if _newclass:
        A0 = _swig_property(_gpstk.RinexNavHeader_A0_get, _gpstk.RinexNavHeader_A0_set)
    __swig_setmethods__["A1"] = _gpstk.RinexNavHeader_A1_set
    __swig_getmethods__["A1"] = _gpstk.RinexNavHeader_A1_get
    if _newclass:
        A1 = _swig_property(_gpstk.RinexNavHeader_A1_get, _gpstk.RinexNavHeader_A1_set)
    __swig_setmethods__["UTCRefTime"] = _gpstk.RinexNavHeader_UTCRefTime_set
    __swig_getmethods__["UTCRefTime"] = _gpstk.RinexNavHeader_UTCRefTime_get
    if _newclass:
        UTCRefTime = _swig_property(_gpstk.RinexNavHeader_UTCRefTime_get, _gpstk.RinexNavHeader_UTCRefTime_set)
    __swig_setmethods__["UTCRefWeek"] = _gpstk.RinexNavHeader_UTCRefWeek_set
    __swig_getmethods__["UTCRefWeek"] = _gpstk.RinexNavHeader_UTCRefWeek_get
    if _newclass:
        UTCRefWeek = _swig_property(_gpstk.RinexNavHeader_UTCRefWeek_get, _gpstk.RinexNavHeader_UTCRefWeek_set)
    __swig_setmethods__["leapSeconds"] = _gpstk.RinexNavHeader_leapSeconds_set
    __swig_getmethods__["leapSeconds"] = _gpstk.RinexNavHeader_leapSeconds_get
    if _newclass:
        leapSeconds = _swig_property(_gpstk.RinexNavHeader_leapSeconds_get, _gpstk.RinexNavHeader_leapSeconds_set)

    def __str__(self):
        """__str__(RinexNavHeader self) -> std::string"""
        return _gpstk.RinexNavHeader___str__(self)

RinexNavHeader_swigregister = _gpstk.RinexNavHeader_swigregister
RinexNavHeader_swigregister(RinexNavHeader)
RinexNavHeader.versionString = _gpstk.cvar.RinexNavHeader_versionString
RinexNavHeader.runByString = _gpstk.cvar.RinexNavHeader_runByString
RinexNavHeader.commentString = _gpstk.cvar.RinexNavHeader_commentString
RinexNavHeader.ionAlphaString = _gpstk.cvar.RinexNavHeader_ionAlphaString
RinexNavHeader.ionBetaString = _gpstk.cvar.RinexNavHeader_ionBetaString
RinexNavHeader.deltaUTCString = _gpstk.cvar.RinexNavHeader_deltaUTCString
RinexNavHeader.leapSecondsString = _gpstk.cvar.RinexNavHeader_leapSecondsString
RinexNavHeader.endOfHeader = _gpstk.cvar.RinexNavHeader_endOfHeader

class RinexNavStream(FFTextStream):
    """Proxy of C++ gpstk::RinexNavStream class"""
    __swig_setmethods__ = {}
    for _s in [FFTextStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexNavStream, name, value)
    __swig_getmethods__ = {}
    for _s in [FFTextStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexNavStream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::RinexNavStream self) -> RinexNavStream
        __init__(gpstk::RinexNavStream self, char const * fn, std::ios::openmode mode) -> RinexNavStream
        __init__(gpstk::RinexNavStream self, char const * fn) -> RinexNavStream
        """
        this = _gpstk.new_RinexNavStream(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_RinexNavStream
    __del__ = lambda self: None

    def open(self, fn, mode):
        """open(RinexNavStream self, char const * fn, std::ios::openmode mode)"""
        return _gpstk.RinexNavStream_open(self, fn, mode)

    __swig_setmethods__["header"] = _gpstk.RinexNavStream_header_set
    __swig_getmethods__["header"] = _gpstk.RinexNavStream_header_get
    if _newclass:
        header = _swig_property(_gpstk.RinexNavStream_header_get, _gpstk.RinexNavStream_header_set)
    __swig_setmethods__["headerRead"] = _gpstk.RinexNavStream_headerRead_set
    __swig_getmethods__["headerRead"] = _gpstk.RinexNavStream_headerRead_get
    if _newclass:
        headerRead = _swig_property(_gpstk.RinexNavStream_headerRead_get, _gpstk.RinexNavStream_headerRead_set)

    def inRinexNavStream(fileName):
        """inRinexNavStream(std::string const fileName) -> RinexNavStream"""
        return _gpstk.RinexNavStream_inRinexNavStream(fileName)

    if _newclass:
        inRinexNavStream = staticmethod(inRinexNavStream)
    __swig_getmethods__["inRinexNavStream"] = lambda x: inRinexNavStream

    def outRinexNavStream(fileName):
        """outRinexNavStream(std::string const fileName) -> RinexNavStream"""
        return _gpstk.RinexNavStream_outRinexNavStream(fileName)

    if _newclass:
        outRinexNavStream = staticmethod(outRinexNavStream)
    __swig_getmethods__["outRinexNavStream"] = lambda x: outRinexNavStream

    def _remove(ptr):
        """_remove(RinexNavStream ptr)"""
        return _gpstk.RinexNavStream__remove(ptr)

    if _newclass:
        _remove = staticmethod(_remove)
    __swig_getmethods__["_remove"] = lambda x: _remove

    def readHeader(self):
        """readHeader(RinexNavStream self) -> RinexNavHeader"""
        return _gpstk.RinexNavStream_readHeader(self)


    def readData(self):
        """readData(RinexNavStream self) -> RinexNavData"""
        return _gpstk.RinexNavStream_readData(self)


    def writeHeader(self, head):
        """writeHeader(RinexNavStream self, RinexNavHeader head)"""
        return _gpstk.RinexNavStream_writeHeader(self, head)


    def writeData(self, data):
        """writeData(RinexNavStream self, RinexNavData data)"""
        return _gpstk.RinexNavStream_writeData(self, data)

RinexNavStream_swigregister = _gpstk.RinexNavStream_swigregister
RinexNavStream_swigregister(RinexNavStream)

def RinexNavStream_inRinexNavStream(fileName):
    """RinexNavStream_inRinexNavStream(std::string const fileName) -> RinexNavStream"""
    return _gpstk.RinexNavStream_inRinexNavStream(fileName)

def RinexNavStream_outRinexNavStream(fileName):
    """RinexNavStream_outRinexNavStream(std::string const fileName) -> RinexNavStream"""
    return _gpstk.RinexNavStream_outRinexNavStream(fileName)

def RinexNavStream__remove(ptr):
    """RinexNavStream__remove(RinexNavStream ptr)"""
    return _gpstk.RinexNavStream__remove(ptr)

class RinexNavData(RinexNavBase):
    """Proxy of C++ gpstk::RinexNavData class"""
    __swig_setmethods__ = {}
    for _s in [RinexNavBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexNavData, name, value)
    __swig_getmethods__ = {}
    for _s in [RinexNavBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexNavData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::RinexNavData self) -> RinexNavData
        __init__(gpstk::RinexNavData self, EngEphemeris ee) -> RinexNavData
        """
        this = _gpstk.new_RinexNavData(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_RinexNavData
    __del__ = lambda self: None

    def isData(self):
        """isData(RinexNavData self) -> bool"""
        return _gpstk.RinexNavData_isData(self)


    def toEngEphemeris(self):
        """toEngEphemeris(RinexNavData self) -> EngEphemeris"""
        return _gpstk.RinexNavData_toEngEphemeris(self)


    def toGPSEphemeris(self):
        """toGPSEphemeris(RinexNavData self) -> GPSEphemeris"""
        return _gpstk.RinexNavData_toGPSEphemeris(self)


    def toList(self):
        """toList(RinexNavData self) -> std::list< double,std::allocator< double > >"""
        return _gpstk.RinexNavData_toList(self)

    __swig_setmethods__["time"] = _gpstk.RinexNavData_time_set
    __swig_getmethods__["time"] = _gpstk.RinexNavData_time_get
    if _newclass:
        time = _swig_property(_gpstk.RinexNavData_time_get, _gpstk.RinexNavData_time_set)
    __swig_setmethods__["PRNID"] = _gpstk.RinexNavData_PRNID_set
    __swig_getmethods__["PRNID"] = _gpstk.RinexNavData_PRNID_get
    if _newclass:
        PRNID = _swig_property(_gpstk.RinexNavData_PRNID_get, _gpstk.RinexNavData_PRNID_set)
    __swig_setmethods__["HOWtime"] = _gpstk.RinexNavData_HOWtime_set
    __swig_getmethods__["HOWtime"] = _gpstk.RinexNavData_HOWtime_get
    if _newclass:
        HOWtime = _swig_property(_gpstk.RinexNavData_HOWtime_get, _gpstk.RinexNavData_HOWtime_set)
    __swig_setmethods__["weeknum"] = _gpstk.RinexNavData_weeknum_set
    __swig_getmethods__["weeknum"] = _gpstk.RinexNavData_weeknum_get
    if _newclass:
        weeknum = _swig_property(_gpstk.RinexNavData_weeknum_get, _gpstk.RinexNavData_weeknum_set)
    __swig_setmethods__["codeflgs"] = _gpstk.RinexNavData_codeflgs_set
    __swig_getmethods__["codeflgs"] = _gpstk.RinexNavData_codeflgs_get
    if _newclass:
        codeflgs = _swig_property(_gpstk.RinexNavData_codeflgs_get, _gpstk.RinexNavData_codeflgs_set)
    __swig_setmethods__["accuracy"] = _gpstk.RinexNavData_accuracy_set
    __swig_getmethods__["accuracy"] = _gpstk.RinexNavData_accuracy_get
    if _newclass:
        accuracy = _swig_property(_gpstk.RinexNavData_accuracy_get, _gpstk.RinexNavData_accuracy_set)
    __swig_setmethods__["health"] = _gpstk.RinexNavData_health_set
    __swig_getmethods__["health"] = _gpstk.RinexNavData_health_get
    if _newclass:
        health = _swig_property(_gpstk.RinexNavData_health_get, _gpstk.RinexNavData_health_set)
    __swig_setmethods__["L2Pdata"] = _gpstk.RinexNavData_L2Pdata_set
    __swig_getmethods__["L2Pdata"] = _gpstk.RinexNavData_L2Pdata_get
    if _newclass:
        L2Pdata = _swig_property(_gpstk.RinexNavData_L2Pdata_get, _gpstk.RinexNavData_L2Pdata_set)
    __swig_setmethods__["IODC"] = _gpstk.RinexNavData_IODC_set
    __swig_getmethods__["IODC"] = _gpstk.RinexNavData_IODC_get
    if _newclass:
        IODC = _swig_property(_gpstk.RinexNavData_IODC_get, _gpstk.RinexNavData_IODC_set)
    __swig_setmethods__["IODE"] = _gpstk.RinexNavData_IODE_set
    __swig_getmethods__["IODE"] = _gpstk.RinexNavData_IODE_get
    if _newclass:
        IODE = _swig_property(_gpstk.RinexNavData_IODE_get, _gpstk.RinexNavData_IODE_set)
    __swig_setmethods__["Toc"] = _gpstk.RinexNavData_Toc_set
    __swig_getmethods__["Toc"] = _gpstk.RinexNavData_Toc_get
    if _newclass:
        Toc = _swig_property(_gpstk.RinexNavData_Toc_get, _gpstk.RinexNavData_Toc_set)
    __swig_setmethods__["af0"] = _gpstk.RinexNavData_af0_set
    __swig_getmethods__["af0"] = _gpstk.RinexNavData_af0_get
    if _newclass:
        af0 = _swig_property(_gpstk.RinexNavData_af0_get, _gpstk.RinexNavData_af0_set)
    __swig_setmethods__["af1"] = _gpstk.RinexNavData_af1_set
    __swig_getmethods__["af1"] = _gpstk.RinexNavData_af1_get
    if _newclass:
        af1 = _swig_property(_gpstk.RinexNavData_af1_get, _gpstk.RinexNavData_af1_set)
    __swig_setmethods__["af2"] = _gpstk.RinexNavData_af2_set
    __swig_getmethods__["af2"] = _gpstk.RinexNavData_af2_get
    if _newclass:
        af2 = _swig_property(_gpstk.RinexNavData_af2_get, _gpstk.RinexNavData_af2_set)
    __swig_setmethods__["Tgd"] = _gpstk.RinexNavData_Tgd_set
    __swig_getmethods__["Tgd"] = _gpstk.RinexNavData_Tgd_get
    if _newclass:
        Tgd = _swig_property(_gpstk.RinexNavData_Tgd_get, _gpstk.RinexNavData_Tgd_set)
    __swig_setmethods__["Cuc"] = _gpstk.RinexNavData_Cuc_set
    __swig_getmethods__["Cuc"] = _gpstk.RinexNavData_Cuc_get
    if _newclass:
        Cuc = _swig_property(_gpstk.RinexNavData_Cuc_get, _gpstk.RinexNavData_Cuc_set)
    __swig_setmethods__["Cus"] = _gpstk.RinexNavData_Cus_set
    __swig_getmethods__["Cus"] = _gpstk.RinexNavData_Cus_get
    if _newclass:
        Cus = _swig_property(_gpstk.RinexNavData_Cus_get, _gpstk.RinexNavData_Cus_set)
    __swig_setmethods__["Crc"] = _gpstk.RinexNavData_Crc_set
    __swig_getmethods__["Crc"] = _gpstk.RinexNavData_Crc_get
    if _newclass:
        Crc = _swig_property(_gpstk.RinexNavData_Crc_get, _gpstk.RinexNavData_Crc_set)
    __swig_setmethods__["Crs"] = _gpstk.RinexNavData_Crs_set
    __swig_getmethods__["Crs"] = _gpstk.RinexNavData_Crs_get
    if _newclass:
        Crs = _swig_property(_gpstk.RinexNavData_Crs_get, _gpstk.RinexNavData_Crs_set)
    __swig_setmethods__["Cic"] = _gpstk.RinexNavData_Cic_set
    __swig_getmethods__["Cic"] = _gpstk.RinexNavData_Cic_get
    if _newclass:
        Cic = _swig_property(_gpstk.RinexNavData_Cic_get, _gpstk.RinexNavData_Cic_set)
    __swig_setmethods__["Cis"] = _gpstk.RinexNavData_Cis_set
    __swig_getmethods__["Cis"] = _gpstk.RinexNavData_Cis_get
    if _newclass:
        Cis = _swig_property(_gpstk.RinexNavData_Cis_get, _gpstk.RinexNavData_Cis_set)
    __swig_setmethods__["Toe"] = _gpstk.RinexNavData_Toe_set
    __swig_getmethods__["Toe"] = _gpstk.RinexNavData_Toe_get
    if _newclass:
        Toe = _swig_property(_gpstk.RinexNavData_Toe_get, _gpstk.RinexNavData_Toe_set)
    __swig_setmethods__["M0"] = _gpstk.RinexNavData_M0_set
    __swig_getmethods__["M0"] = _gpstk.RinexNavData_M0_get
    if _newclass:
        M0 = _swig_property(_gpstk.RinexNavData_M0_get, _gpstk.RinexNavData_M0_set)
    __swig_setmethods__["dn"] = _gpstk.RinexNavData_dn_set
    __swig_getmethods__["dn"] = _gpstk.RinexNavData_dn_get
    if _newclass:
        dn = _swig_property(_gpstk.RinexNavData_dn_get, _gpstk.RinexNavData_dn_set)
    __swig_setmethods__["ecc"] = _gpstk.RinexNavData_ecc_set
    __swig_getmethods__["ecc"] = _gpstk.RinexNavData_ecc_get
    if _newclass:
        ecc = _swig_property(_gpstk.RinexNavData_ecc_get, _gpstk.RinexNavData_ecc_set)
    __swig_setmethods__["Ahalf"] = _gpstk.RinexNavData_Ahalf_set
    __swig_getmethods__["Ahalf"] = _gpstk.RinexNavData_Ahalf_get
    if _newclass:
        Ahalf = _swig_property(_gpstk.RinexNavData_Ahalf_get, _gpstk.RinexNavData_Ahalf_set)
    __swig_setmethods__["OMEGA0"] = _gpstk.RinexNavData_OMEGA0_set
    __swig_getmethods__["OMEGA0"] = _gpstk.RinexNavData_OMEGA0_get
    if _newclass:
        OMEGA0 = _swig_property(_gpstk.RinexNavData_OMEGA0_get, _gpstk.RinexNavData_OMEGA0_set)
    __swig_setmethods__["i0"] = _gpstk.RinexNavData_i0_set
    __swig_getmethods__["i0"] = _gpstk.RinexNavData_i0_get
    if _newclass:
        i0 = _swig_property(_gpstk.RinexNavData_i0_get, _gpstk.RinexNavData_i0_set)
    __swig_setmethods__["w"] = _gpstk.RinexNavData_w_set
    __swig_getmethods__["w"] = _gpstk.RinexNavData_w_get
    if _newclass:
        w = _swig_property(_gpstk.RinexNavData_w_get, _gpstk.RinexNavData_w_set)
    __swig_setmethods__["OMEGAdot"] = _gpstk.RinexNavData_OMEGAdot_set
    __swig_getmethods__["OMEGAdot"] = _gpstk.RinexNavData_OMEGAdot_get
    if _newclass:
        OMEGAdot = _swig_property(_gpstk.RinexNavData_OMEGAdot_get, _gpstk.RinexNavData_OMEGAdot_set)
    __swig_setmethods__["idot"] = _gpstk.RinexNavData_idot_set
    __swig_getmethods__["idot"] = _gpstk.RinexNavData_idot_get
    if _newclass:
        idot = _swig_property(_gpstk.RinexNavData_idot_get, _gpstk.RinexNavData_idot_set)
    __swig_setmethods__["fitint"] = _gpstk.RinexNavData_fitint_set
    __swig_getmethods__["fitint"] = _gpstk.RinexNavData_fitint_get
    if _newclass:
        fitint = _swig_property(_gpstk.RinexNavData_fitint_get, _gpstk.RinexNavData_fitint_set)

    def __str__(self):
        """__str__(RinexNavData self) -> std::string"""
        return _gpstk.RinexNavData___str__(self)

RinexNavData_swigregister = _gpstk.RinexNavData_swigregister
RinexNavData_swigregister(RinexNavData)

class RinexMetBase(FFData):
    """Proxy of C++ gpstk::RinexMetBase class"""
    __swig_setmethods__ = {}
    for _s in [FFData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexMetBase, name, value)
    __swig_getmethods__ = {}
    for _s in [FFData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexMetBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_RinexMetBase
    __del__ = lambda self: None
RinexMetBase_swigregister = _gpstk.RinexMetBase_swigregister
RinexMetBase_swigregister(RinexMetBase)

class RinexMetHeader(RinexMetBase):
    """Proxy of C++ gpstk::RinexMetHeader class"""
    __swig_setmethods__ = {}
    for _s in [RinexMetBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexMetHeader, name, value)
    __swig_getmethods__ = {}
    for _s in [RinexMetBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexMetHeader, name)
    __repr__ = _swig_repr
    PR = _gpstk.RinexMetHeader_PR
    TD = _gpstk.RinexMetHeader_TD
    HR = _gpstk.RinexMetHeader_HR
    ZW = _gpstk.RinexMetHeader_ZW
    ZD = _gpstk.RinexMetHeader_ZD
    ZT = _gpstk.RinexMetHeader_ZT
    WD = _gpstk.RinexMetHeader_WD
    WS = _gpstk.RinexMetHeader_WS
    RI = _gpstk.RinexMetHeader_RI
    HI = _gpstk.RinexMetHeader_HI

    def __init__(self):
        """__init__(gpstk::RinexMetHeader self) -> RinexMetHeader"""
        this = _gpstk.new_RinexMetHeader()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_RinexMetHeader
    __del__ = lambda self: None

    def isHeader(self):
        """isHeader(RinexMetHeader self) -> bool"""
        return _gpstk.RinexMetHeader_isHeader(self)


    def convertObsType(*args):
        """
        convertObsType(std::string const & oneObs) -> gpstk::RinexMetHeader::RinexMetType
        convertObsType(gpstk::RinexMetHeader::RinexMetType const & oneObs) -> std::string
        """
        return _gpstk.RinexMetHeader_convertObsType(*args)

    if _newclass:
        convertObsType = staticmethod(convertObsType)
    __swig_getmethods__["convertObsType"] = lambda x: convertObsType
    __swig_setmethods__["valid"] = _gpstk.RinexMetHeader_valid_set
    __swig_getmethods__["valid"] = _gpstk.RinexMetHeader_valid_get
    if _newclass:
        valid = _swig_property(_gpstk.RinexMetHeader_valid_get, _gpstk.RinexMetHeader_valid_set)
    validVersion = _gpstk.RinexMetHeader_validVersion
    validRunBy = _gpstk.RinexMetHeader_validRunBy
    validComment = _gpstk.RinexMetHeader_validComment
    validMarkerName = _gpstk.RinexMetHeader_validMarkerName
    validMarkerNumber = _gpstk.RinexMetHeader_validMarkerNumber
    validObsType = _gpstk.RinexMetHeader_validObsType
    validSensorType = _gpstk.RinexMetHeader_validSensorType
    validSensorPos = _gpstk.RinexMetHeader_validSensorPos
    validEoH = _gpstk.RinexMetHeader_validEoH
    allValid20 = _gpstk.RinexMetHeader_allValid20
    allValid21 = _gpstk.RinexMetHeader_allValid21
    allValid211 = _gpstk.RinexMetHeader_allValid211

    def bitsAsString(b):
        """bitsAsString(gpstk::RinexMetHeader::validBits b) -> std::string"""
        return _gpstk.RinexMetHeader_bitsAsString(b)

    if _newclass:
        bitsAsString = staticmethod(bitsAsString)
    __swig_getmethods__["bitsAsString"] = lambda x: bitsAsString

    def bitString(*args):
        """
        bitString(unsigned long vb, char quote, std::string sep) -> std::string
        bitString(unsigned long vb, char quote) -> std::string
        bitString(unsigned long vb) -> std::string
        """
        return _gpstk.RinexMetHeader_bitString(*args)

    if _newclass:
        bitString = staticmethod(bitString)
    __swig_getmethods__["bitString"] = lambda x: bitString
    __swig_setmethods__["version"] = _gpstk.RinexMetHeader_version_set
    __swig_getmethods__["version"] = _gpstk.RinexMetHeader_version_get
    if _newclass:
        version = _swig_property(_gpstk.RinexMetHeader_version_get, _gpstk.RinexMetHeader_version_set)
    __swig_setmethods__["fileType"] = _gpstk.RinexMetHeader_fileType_set
    __swig_getmethods__["fileType"] = _gpstk.RinexMetHeader_fileType_get
    if _newclass:
        fileType = _swig_property(_gpstk.RinexMetHeader_fileType_get, _gpstk.RinexMetHeader_fileType_set)
    __swig_setmethods__["fileProgram"] = _gpstk.RinexMetHeader_fileProgram_set
    __swig_getmethods__["fileProgram"] = _gpstk.RinexMetHeader_fileProgram_get
    if _newclass:
        fileProgram = _swig_property(_gpstk.RinexMetHeader_fileProgram_get, _gpstk.RinexMetHeader_fileProgram_set)
    __swig_setmethods__["fileAgency"] = _gpstk.RinexMetHeader_fileAgency_set
    __swig_getmethods__["fileAgency"] = _gpstk.RinexMetHeader_fileAgency_get
    if _newclass:
        fileAgency = _swig_property(_gpstk.RinexMetHeader_fileAgency_get, _gpstk.RinexMetHeader_fileAgency_set)
    __swig_setmethods__["date"] = _gpstk.RinexMetHeader_date_set
    __swig_getmethods__["date"] = _gpstk.RinexMetHeader_date_get
    if _newclass:
        date = _swig_property(_gpstk.RinexMetHeader_date_get, _gpstk.RinexMetHeader_date_set)
    __swig_setmethods__["commentList"] = _gpstk.RinexMetHeader_commentList_set
    __swig_getmethods__["commentList"] = _gpstk.RinexMetHeader_commentList_get
    if _newclass:
        commentList = _swig_property(_gpstk.RinexMetHeader_commentList_get, _gpstk.RinexMetHeader_commentList_set)
    __swig_setmethods__["markerName"] = _gpstk.RinexMetHeader_markerName_set
    __swig_getmethods__["markerName"] = _gpstk.RinexMetHeader_markerName_get
    if _newclass:
        markerName = _swig_property(_gpstk.RinexMetHeader_markerName_get, _gpstk.RinexMetHeader_markerName_set)
    __swig_setmethods__["markerNumber"] = _gpstk.RinexMetHeader_markerNumber_set
    __swig_getmethods__["markerNumber"] = _gpstk.RinexMetHeader_markerNumber_get
    if _newclass:
        markerNumber = _swig_property(_gpstk.RinexMetHeader_markerNumber_get, _gpstk.RinexMetHeader_markerNumber_set)
    __swig_setmethods__["obsTypeList"] = _gpstk.RinexMetHeader_obsTypeList_set
    __swig_getmethods__["obsTypeList"] = _gpstk.RinexMetHeader_obsTypeList_get
    if _newclass:
        obsTypeList = _swig_property(_gpstk.RinexMetHeader_obsTypeList_get, _gpstk.RinexMetHeader_obsTypeList_set)
    __swig_setmethods__["sensorTypeList"] = _gpstk.RinexMetHeader_sensorTypeList_set
    __swig_getmethods__["sensorTypeList"] = _gpstk.RinexMetHeader_sensorTypeList_get
    if _newclass:
        sensorTypeList = _swig_property(_gpstk.RinexMetHeader_sensorTypeList_get, _gpstk.RinexMetHeader_sensorTypeList_set)
    __swig_setmethods__["sensorPosList"] = _gpstk.RinexMetHeader_sensorPosList_set
    __swig_getmethods__["sensorPosList"] = _gpstk.RinexMetHeader_sensorPosList_get
    if _newclass:
        sensorPosList = _swig_property(_gpstk.RinexMetHeader_sensorPosList_get, _gpstk.RinexMetHeader_sensorPosList_set)

    def __str__(self):
        """__str__(RinexMetHeader self) -> std::string"""
        return _gpstk.RinexMetHeader___str__(self)

RinexMetHeader_swigregister = _gpstk.RinexMetHeader_swigregister
RinexMetHeader_swigregister(RinexMetHeader)

def RinexMetHeader_convertObsType(*args):
    """
    convertObsType(std::string const & oneObs) -> gpstk::RinexMetHeader::RinexMetType
    RinexMetHeader_convertObsType(gpstk::RinexMetHeader::RinexMetType const & oneObs) -> std::string
    """
    return _gpstk.RinexMetHeader_convertObsType(*args)

def RinexMetHeader_bitsAsString(b):
    """RinexMetHeader_bitsAsString(gpstk::RinexMetHeader::validBits b) -> std::string"""
    return _gpstk.RinexMetHeader_bitsAsString(b)

def RinexMetHeader_bitString(*args):
    """
    bitString(unsigned long vb, char quote, std::string sep) -> std::string
    bitString(unsigned long vb, char quote) -> std::string
    RinexMetHeader_bitString(unsigned long vb) -> std::string
    """
    return _gpstk.RinexMetHeader_bitString(*args)
RinexMetHeader.maxObsPerLine = _gpstk.cvar.RinexMetHeader_maxObsPerLine
RinexMetHeader.stringVersion = _gpstk.cvar.RinexMetHeader_stringVersion
RinexMetHeader.stringRunBy = _gpstk.cvar.RinexMetHeader_stringRunBy
RinexMetHeader.stringComment = _gpstk.cvar.RinexMetHeader_stringComment
RinexMetHeader.stringMarkerName = _gpstk.cvar.RinexMetHeader_stringMarkerName
RinexMetHeader.stringMarkerNumber = _gpstk.cvar.RinexMetHeader_stringMarkerNumber
RinexMetHeader.stringObsType = _gpstk.cvar.RinexMetHeader_stringObsType
RinexMetHeader.stringSensorType = _gpstk.cvar.RinexMetHeader_stringSensorType
RinexMetHeader.stringSensorPos = _gpstk.cvar.RinexMetHeader_stringSensorPos
RinexMetHeader.stringEoH = _gpstk.cvar.RinexMetHeader_stringEoH

class sensorType(_object):
    """Proxy of C++ gpstk::sensorType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sensorType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sensorType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["model"] = _gpstk.sensorType_model_set
    __swig_getmethods__["model"] = _gpstk.sensorType_model_get
    if _newclass:
        model = _swig_property(_gpstk.sensorType_model_get, _gpstk.sensorType_model_set)
    __swig_setmethods__["type"] = _gpstk.sensorType_type_set
    __swig_getmethods__["type"] = _gpstk.sensorType_type_get
    if _newclass:
        type = _swig_property(_gpstk.sensorType_type_get, _gpstk.sensorType_type_set)
    __swig_setmethods__["accuracy"] = _gpstk.sensorType_accuracy_set
    __swig_getmethods__["accuracy"] = _gpstk.sensorType_accuracy_get
    if _newclass:
        accuracy = _swig_property(_gpstk.sensorType_accuracy_get, _gpstk.sensorType_accuracy_set)
    __swig_setmethods__["obsType"] = _gpstk.sensorType_obsType_set
    __swig_getmethods__["obsType"] = _gpstk.sensorType_obsType_get
    if _newclass:
        obsType = _swig_property(_gpstk.sensorType_obsType_get, _gpstk.sensorType_obsType_set)

    def __init__(self):
        """__init__(gpstk::sensorType self) -> sensorType"""
        this = _gpstk.new_sensorType()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_sensorType
    __del__ = lambda self: None
sensorType_swigregister = _gpstk.sensorType_swigregister
sensorType_swigregister(sensorType)

class sensorPosType(_object):
    """Proxy of C++ gpstk::sensorPosType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sensorPosType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sensorPosType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _gpstk.sensorPosType_position_set
    __swig_getmethods__["position"] = _gpstk.sensorPosType_position_get
    if _newclass:
        position = _swig_property(_gpstk.sensorPosType_position_get, _gpstk.sensorPosType_position_set)
    __swig_setmethods__["height"] = _gpstk.sensorPosType_height_set
    __swig_getmethods__["height"] = _gpstk.sensorPosType_height_get
    if _newclass:
        height = _swig_property(_gpstk.sensorPosType_height_get, _gpstk.sensorPosType_height_set)
    __swig_setmethods__["obsType"] = _gpstk.sensorPosType_obsType_set
    __swig_getmethods__["obsType"] = _gpstk.sensorPosType_obsType_get
    if _newclass:
        obsType = _swig_property(_gpstk.sensorPosType_obsType_get, _gpstk.sensorPosType_obsType_set)

    def __init__(self):
        """__init__(gpstk::sensorPosType self) -> sensorPosType"""
        this = _gpstk.new_sensorPosType()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_sensorPosType
    __del__ = lambda self: None
sensorPosType_swigregister = _gpstk.sensorPosType_swigregister
sensorPosType_swigregister(sensorPosType)

class RinexMetStream(FFTextStream):
    """Proxy of C++ gpstk::RinexMetStream class"""
    __swig_setmethods__ = {}
    for _s in [FFTextStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexMetStream, name, value)
    __swig_getmethods__ = {}
    for _s in [FFTextStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexMetStream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::RinexMetStream self) -> RinexMetStream
        __init__(gpstk::RinexMetStream self, char const * fn, std::ios::openmode mode) -> RinexMetStream
        __init__(gpstk::RinexMetStream self, char const * fn) -> RinexMetStream
        """
        this = _gpstk.new_RinexMetStream(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_RinexMetStream
    __del__ = lambda self: None

    def open(self, fn, mode):
        """open(RinexMetStream self, char const * fn, std::ios::openmode mode)"""
        return _gpstk.RinexMetStream_open(self, fn, mode)

    __swig_setmethods__["header"] = _gpstk.RinexMetStream_header_set
    __swig_getmethods__["header"] = _gpstk.RinexMetStream_header_get
    if _newclass:
        header = _swig_property(_gpstk.RinexMetStream_header_get, _gpstk.RinexMetStream_header_set)
    __swig_setmethods__["headerRead"] = _gpstk.RinexMetStream_headerRead_set
    __swig_getmethods__["headerRead"] = _gpstk.RinexMetStream_headerRead_get
    if _newclass:
        headerRead = _swig_property(_gpstk.RinexMetStream_headerRead_get, _gpstk.RinexMetStream_headerRead_set)

    def inRinexMetStream(fileName):
        """inRinexMetStream(std::string const fileName) -> RinexMetStream"""
        return _gpstk.RinexMetStream_inRinexMetStream(fileName)

    if _newclass:
        inRinexMetStream = staticmethod(inRinexMetStream)
    __swig_getmethods__["inRinexMetStream"] = lambda x: inRinexMetStream

    def outRinexMetStream(fileName):
        """outRinexMetStream(std::string const fileName) -> RinexMetStream"""
        return _gpstk.RinexMetStream_outRinexMetStream(fileName)

    if _newclass:
        outRinexMetStream = staticmethod(outRinexMetStream)
    __swig_getmethods__["outRinexMetStream"] = lambda x: outRinexMetStream

    def _remove(ptr):
        """_remove(RinexMetStream ptr)"""
        return _gpstk.RinexMetStream__remove(ptr)

    if _newclass:
        _remove = staticmethod(_remove)
    __swig_getmethods__["_remove"] = lambda x: _remove

    def readHeader(self):
        """readHeader(RinexMetStream self) -> RinexMetHeader"""
        return _gpstk.RinexMetStream_readHeader(self)


    def readData(self):
        """readData(RinexMetStream self) -> RinexMetData"""
        return _gpstk.RinexMetStream_readData(self)


    def writeHeader(self, head):
        """writeHeader(RinexMetStream self, RinexMetHeader head)"""
        return _gpstk.RinexMetStream_writeHeader(self, head)


    def writeData(self, data):
        """writeData(RinexMetStream self, RinexMetData data)"""
        return _gpstk.RinexMetStream_writeData(self, data)

RinexMetStream_swigregister = _gpstk.RinexMetStream_swigregister
RinexMetStream_swigregister(RinexMetStream)

def RinexMetStream_inRinexMetStream(fileName):
    """RinexMetStream_inRinexMetStream(std::string const fileName) -> RinexMetStream"""
    return _gpstk.RinexMetStream_inRinexMetStream(fileName)

def RinexMetStream_outRinexMetStream(fileName):
    """RinexMetStream_outRinexMetStream(std::string const fileName) -> RinexMetStream"""
    return _gpstk.RinexMetStream_outRinexMetStream(fileName)

def RinexMetStream__remove(ptr):
    """RinexMetStream__remove(RinexMetStream ptr)"""
    return _gpstk.RinexMetStream__remove(ptr)

class RinexMetData(RinexMetBase):
    """Proxy of C++ gpstk::RinexMetData class"""
    __swig_setmethods__ = {}
    for _s in [RinexMetBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexMetData, name, value)
    __swig_getmethods__ = {}
    for _s in [RinexMetBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexMetData, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::RinexMetData self) -> RinexMetData"""
        this = _gpstk.new_RinexMetData()
        try:
            self.this.append(this)
        except:
            self.this = this

    def isData(self):
        """isData(RinexMetData self) -> bool"""
        return _gpstk.RinexMetData_isData(self)


    def __lt__(self, right):
        """__lt__(RinexMetData self, RinexMetData right) -> bool"""
        return _gpstk.RinexMetData___lt__(self, right)

    __swig_setmethods__["time"] = _gpstk.RinexMetData_time_set
    __swig_getmethods__["time"] = _gpstk.RinexMetData_time_get
    if _newclass:
        time = _swig_property(_gpstk.RinexMetData_time_get, _gpstk.RinexMetData_time_set)

    def _lookup_data(self, x):
        """_lookup_data(RinexMetData self, int x) -> double"""
        return _gpstk.RinexMetData__lookup_data(self, x)


    def __str__(self):
        """__str__(RinexMetData self) -> std::string"""
        return _gpstk.RinexMetData___str__(self)

    __swig_destroy__ = _gpstk.delete_RinexMetData
    __del__ = lambda self: None
RinexMetData_swigregister = _gpstk.RinexMetData_swigregister
RinexMetData_swigregister(RinexMetData)
RinexMetData.maxObsPerLine = _gpstk.cvar.RinexMetData_maxObsPerLine
RinexMetData.maxObsPerContinuationLine = _gpstk.cvar.RinexMetData_maxObsPerContinuationLine


def _RinexMetData_getData(self):
    """
    Returns a dict of the (int->double) data stored.
    The ints are drawn from an enum defined in RinexMetHeader.
    For example, to get the pressure you would use:
        d = myMetData.getData()
        print d[gpstk.RinexMetHeader.PR]
    """
    data = {}
    for i in xrange(RinexMetHeader.HI + 1):
        data[i] = self._lookup_data(i)
    return data

RinexMetData.getData = _RinexMetData_getData

class Rinex3NavBase(FFData):
    """Proxy of C++ gpstk::Rinex3NavBase class"""
    __swig_setmethods__ = {}
    for _s in [FFData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rinex3NavBase, name, value)
    __swig_getmethods__ = {}
    for _s in [FFData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rinex3NavBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_Rinex3NavBase
    __del__ = lambda self: None
Rinex3NavBase_swigregister = _gpstk.Rinex3NavBase_swigregister
Rinex3NavBase_swigregister(Rinex3NavBase)

class IonoCorr(_object):
    """Proxy of C++ gpstk::IonoCorr class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IonoCorr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IonoCorr, name)
    __repr__ = _swig_repr
    GAL = _gpstk.IonoCorr_GAL
    GPSA = _gpstk.IonoCorr_GPSA
    GPSB = _gpstk.IonoCorr_GPSB
    __swig_setmethods__["type"] = _gpstk.IonoCorr_type_set
    __swig_getmethods__["type"] = _gpstk.IonoCorr_type_get
    if _newclass:
        type = _swig_property(_gpstk.IonoCorr_type_get, _gpstk.IonoCorr_type_set)
    __swig_setmethods__["param"] = _gpstk.IonoCorr_param_set
    __swig_getmethods__["param"] = _gpstk.IonoCorr_param_get
    if _newclass:
        param = _swig_property(_gpstk.IonoCorr_param_get, _gpstk.IonoCorr_param_set)

    def __init__(self, *args):
        """
        __init__(gpstk::IonoCorr self) -> IonoCorr
        __init__(gpstk::IonoCorr self, std::string str) -> IonoCorr
        """
        this = _gpstk.new_IonoCorr(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __str__(self):
        """__str__(IonoCorr self) -> std::string"""
        return _gpstk.IonoCorr___str__(self)


    def fromString(self, str):
        """fromString(IonoCorr self, std::string const str)"""
        return _gpstk.IonoCorr_fromString(self, str)


    def __eq__(self, ic):
        """__eq__(IonoCorr self, IonoCorr ic) -> bool"""
        return _gpstk.IonoCorr___eq__(self, ic)


    def __lt__(self, ic):
        """__lt__(IonoCorr self, IonoCorr ic) -> bool"""
        return _gpstk.IonoCorr___lt__(self, ic)

    __swig_destroy__ = _gpstk.delete_IonoCorr
    __del__ = lambda self: None
IonoCorr_swigregister = _gpstk.IonoCorr_swigregister
IonoCorr_swigregister(IonoCorr)

class Rinex3NavHeader(Rinex3NavBase):
    """Proxy of C++ gpstk::Rinex3NavHeader class"""
    __swig_setmethods__ = {}
    for _s in [Rinex3NavBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rinex3NavHeader, name, value)
    __swig_getmethods__ = {}
    for _s in [Rinex3NavBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rinex3NavHeader, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::Rinex3NavHeader self) -> Rinex3NavHeader"""
        this = _gpstk.new_Rinex3NavHeader()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_Rinex3NavHeader
    __del__ = lambda self: None

    def isHeader(self):
        """isHeader(Rinex3NavHeader self) -> bool"""
        return _gpstk.Rinex3NavHeader_isHeader(self)


    def setFileSystem(self, str):
        """setFileSystem(Rinex3NavHeader self, std::string const & str)"""
        return _gpstk.Rinex3NavHeader_setFileSystem(self, str)

    __swig_setmethods__["valid"] = _gpstk.Rinex3NavHeader_valid_set
    __swig_getmethods__["valid"] = _gpstk.Rinex3NavHeader_valid_get
    if _newclass:
        valid = _swig_property(_gpstk.Rinex3NavHeader_valid_get, _gpstk.Rinex3NavHeader_valid_set)
    validVersion = _gpstk.Rinex3NavHeader_validVersion
    validRunBy = _gpstk.Rinex3NavHeader_validRunBy
    validComment = _gpstk.Rinex3NavHeader_validComment
    validIonoCorrGPS = _gpstk.Rinex3NavHeader_validIonoCorrGPS
    validIonoCorrGal = _gpstk.Rinex3NavHeader_validIonoCorrGal
    validTimeSysCorr = _gpstk.Rinex3NavHeader_validTimeSysCorr
    validLeapSeconds = _gpstk.Rinex3NavHeader_validLeapSeconds
    validEoH = _gpstk.Rinex3NavHeader_validEoH
    allValid3 = _gpstk.Rinex3NavHeader_allValid3
    allValid2 = _gpstk.Rinex3NavHeader_allValid2
    __swig_setmethods__["version"] = _gpstk.Rinex3NavHeader_version_set
    __swig_getmethods__["version"] = _gpstk.Rinex3NavHeader_version_get
    if _newclass:
        version = _swig_property(_gpstk.Rinex3NavHeader_version_get, _gpstk.Rinex3NavHeader_version_set)
    __swig_setmethods__["fileType"] = _gpstk.Rinex3NavHeader_fileType_set
    __swig_getmethods__["fileType"] = _gpstk.Rinex3NavHeader_fileType_get
    if _newclass:
        fileType = _swig_property(_gpstk.Rinex3NavHeader_fileType_get, _gpstk.Rinex3NavHeader_fileType_set)
    __swig_setmethods__["fileSys"] = _gpstk.Rinex3NavHeader_fileSys_set
    __swig_getmethods__["fileSys"] = _gpstk.Rinex3NavHeader_fileSys_get
    if _newclass:
        fileSys = _swig_property(_gpstk.Rinex3NavHeader_fileSys_get, _gpstk.Rinex3NavHeader_fileSys_set)
    __swig_setmethods__["fileSysSat"] = _gpstk.Rinex3NavHeader_fileSysSat_set
    __swig_getmethods__["fileSysSat"] = _gpstk.Rinex3NavHeader_fileSysSat_get
    if _newclass:
        fileSysSat = _swig_property(_gpstk.Rinex3NavHeader_fileSysSat_get, _gpstk.Rinex3NavHeader_fileSysSat_set)
    __swig_setmethods__["fileProgram"] = _gpstk.Rinex3NavHeader_fileProgram_set
    __swig_getmethods__["fileProgram"] = _gpstk.Rinex3NavHeader_fileProgram_get
    if _newclass:
        fileProgram = _swig_property(_gpstk.Rinex3NavHeader_fileProgram_get, _gpstk.Rinex3NavHeader_fileProgram_set)
    __swig_setmethods__["fileAgency"] = _gpstk.Rinex3NavHeader_fileAgency_set
    __swig_getmethods__["fileAgency"] = _gpstk.Rinex3NavHeader_fileAgency_get
    if _newclass:
        fileAgency = _swig_property(_gpstk.Rinex3NavHeader_fileAgency_get, _gpstk.Rinex3NavHeader_fileAgency_set)
    __swig_setmethods__["date"] = _gpstk.Rinex3NavHeader_date_set
    __swig_getmethods__["date"] = _gpstk.Rinex3NavHeader_date_get
    if _newclass:
        date = _swig_property(_gpstk.Rinex3NavHeader_date_get, _gpstk.Rinex3NavHeader_date_set)
    __swig_setmethods__["commentList"] = _gpstk.Rinex3NavHeader_commentList_set
    __swig_getmethods__["commentList"] = _gpstk.Rinex3NavHeader_commentList_get
    if _newclass:
        commentList = _swig_property(_gpstk.Rinex3NavHeader_commentList_get, _gpstk.Rinex3NavHeader_commentList_set)
    __swig_setmethods__["mapTimeCorr"] = _gpstk.Rinex3NavHeader_mapTimeCorr_set
    __swig_getmethods__["mapTimeCorr"] = _gpstk.Rinex3NavHeader_mapTimeCorr_get
    if _newclass:
        mapTimeCorr = _swig_property(_gpstk.Rinex3NavHeader_mapTimeCorr_get, _gpstk.Rinex3NavHeader_mapTimeCorr_set)
    __swig_setmethods__["mapIonoCorr"] = _gpstk.Rinex3NavHeader_mapIonoCorr_set
    __swig_getmethods__["mapIonoCorr"] = _gpstk.Rinex3NavHeader_mapIonoCorr_get
    if _newclass:
        mapIonoCorr = _swig_property(_gpstk.Rinex3NavHeader_mapIonoCorr_get, _gpstk.Rinex3NavHeader_mapIonoCorr_set)
    __swig_setmethods__["leapSeconds"] = _gpstk.Rinex3NavHeader_leapSeconds_set
    __swig_getmethods__["leapSeconds"] = _gpstk.Rinex3NavHeader_leapSeconds_get
    if _newclass:
        leapSeconds = _swig_property(_gpstk.Rinex3NavHeader_leapSeconds_get, _gpstk.Rinex3NavHeader_leapSeconds_set)
    __swig_setmethods__["leapDelta"] = _gpstk.Rinex3NavHeader_leapDelta_set
    __swig_getmethods__["leapDelta"] = _gpstk.Rinex3NavHeader_leapDelta_get
    if _newclass:
        leapDelta = _swig_property(_gpstk.Rinex3NavHeader_leapDelta_get, _gpstk.Rinex3NavHeader_leapDelta_set)
    __swig_setmethods__["leapWeek"] = _gpstk.Rinex3NavHeader_leapWeek_set
    __swig_getmethods__["leapWeek"] = _gpstk.Rinex3NavHeader_leapWeek_get
    if _newclass:
        leapWeek = _swig_property(_gpstk.Rinex3NavHeader_leapWeek_get, _gpstk.Rinex3NavHeader_leapWeek_set)
    __swig_setmethods__["leapDay"] = _gpstk.Rinex3NavHeader_leapDay_set
    __swig_getmethods__["leapDay"] = _gpstk.Rinex3NavHeader_leapDay_get
    if _newclass:
        leapDay = _swig_property(_gpstk.Rinex3NavHeader_leapDay_get, _gpstk.Rinex3NavHeader_leapDay_set)

    def __str__(self):
        """__str__(Rinex3NavHeader self) -> std::string"""
        return _gpstk.Rinex3NavHeader___str__(self)

Rinex3NavHeader_swigregister = _gpstk.Rinex3NavHeader_swigregister
Rinex3NavHeader_swigregister(Rinex3NavHeader)
Rinex3NavHeader.stringVersion = _gpstk.cvar.Rinex3NavHeader_stringVersion
Rinex3NavHeader.stringRunBy = _gpstk.cvar.Rinex3NavHeader_stringRunBy
Rinex3NavHeader.stringComment = _gpstk.cvar.Rinex3NavHeader_stringComment
Rinex3NavHeader.stringIonoCorr = _gpstk.cvar.Rinex3NavHeader_stringIonoCorr
Rinex3NavHeader.stringTimeSysCorr = _gpstk.cvar.Rinex3NavHeader_stringTimeSysCorr
Rinex3NavHeader.stringLeapSeconds = _gpstk.cvar.Rinex3NavHeader_stringLeapSeconds
Rinex3NavHeader.stringDeltaUTC = _gpstk.cvar.Rinex3NavHeader_stringDeltaUTC
Rinex3NavHeader.stringCorrSysTime = _gpstk.cvar.Rinex3NavHeader_stringCorrSysTime
Rinex3NavHeader.stringDUTC = _gpstk.cvar.Rinex3NavHeader_stringDUTC
Rinex3NavHeader.stringIonAlpha = _gpstk.cvar.Rinex3NavHeader_stringIonAlpha
Rinex3NavHeader.stringIonBeta = _gpstk.cvar.Rinex3NavHeader_stringIonBeta
Rinex3NavHeader.stringEoH = _gpstk.cvar.Rinex3NavHeader_stringEoH

class Rinex3NavStream(FFTextStream):
    """Proxy of C++ gpstk::Rinex3NavStream class"""
    __swig_setmethods__ = {}
    for _s in [FFTextStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rinex3NavStream, name, value)
    __swig_getmethods__ = {}
    for _s in [FFTextStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rinex3NavStream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::Rinex3NavStream self) -> Rinex3NavStream
        __init__(gpstk::Rinex3NavStream self, char const * fn, std::ios::openmode mode) -> Rinex3NavStream
        __init__(gpstk::Rinex3NavStream self, char const * fn) -> Rinex3NavStream
        """
        this = _gpstk.new_Rinex3NavStream(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_Rinex3NavStream
    __del__ = lambda self: None

    def open(self, fn, mode):
        """open(Rinex3NavStream self, char const * fn, std::ios::openmode mode)"""
        return _gpstk.Rinex3NavStream_open(self, fn, mode)

    __swig_setmethods__["header"] = _gpstk.Rinex3NavStream_header_set
    __swig_getmethods__["header"] = _gpstk.Rinex3NavStream_header_get
    if _newclass:
        header = _swig_property(_gpstk.Rinex3NavStream_header_get, _gpstk.Rinex3NavStream_header_set)
    __swig_setmethods__["headerRead"] = _gpstk.Rinex3NavStream_headerRead_set
    __swig_getmethods__["headerRead"] = _gpstk.Rinex3NavStream_headerRead_get
    if _newclass:
        headerRead = _swig_property(_gpstk.Rinex3NavStream_headerRead_get, _gpstk.Rinex3NavStream_headerRead_set)

    def inRinex3NavStream(fileName):
        """inRinex3NavStream(std::string const fileName) -> Rinex3NavStream"""
        return _gpstk.Rinex3NavStream_inRinex3NavStream(fileName)

    if _newclass:
        inRinex3NavStream = staticmethod(inRinex3NavStream)
    __swig_getmethods__["inRinex3NavStream"] = lambda x: inRinex3NavStream

    def outRinex3NavStream(fileName):
        """outRinex3NavStream(std::string const fileName) -> Rinex3NavStream"""
        return _gpstk.Rinex3NavStream_outRinex3NavStream(fileName)

    if _newclass:
        outRinex3NavStream = staticmethod(outRinex3NavStream)
    __swig_getmethods__["outRinex3NavStream"] = lambda x: outRinex3NavStream

    def _remove(ptr):
        """_remove(Rinex3NavStream ptr)"""
        return _gpstk.Rinex3NavStream__remove(ptr)

    if _newclass:
        _remove = staticmethod(_remove)
    __swig_getmethods__["_remove"] = lambda x: _remove

    def readHeader(self):
        """readHeader(Rinex3NavStream self) -> Rinex3NavHeader"""
        return _gpstk.Rinex3NavStream_readHeader(self)


    def readData(self):
        """readData(Rinex3NavStream self) -> Rinex3NavData"""
        return _gpstk.Rinex3NavStream_readData(self)


    def writeHeader(self, head):
        """writeHeader(Rinex3NavStream self, Rinex3NavHeader head)"""
        return _gpstk.Rinex3NavStream_writeHeader(self, head)


    def writeData(self, data):
        """writeData(Rinex3NavStream self, Rinex3NavData data)"""
        return _gpstk.Rinex3NavStream_writeData(self, data)

Rinex3NavStream_swigregister = _gpstk.Rinex3NavStream_swigregister
Rinex3NavStream_swigregister(Rinex3NavStream)

def Rinex3NavStream_inRinex3NavStream(fileName):
    """Rinex3NavStream_inRinex3NavStream(std::string const fileName) -> Rinex3NavStream"""
    return _gpstk.Rinex3NavStream_inRinex3NavStream(fileName)

def Rinex3NavStream_outRinex3NavStream(fileName):
    """Rinex3NavStream_outRinex3NavStream(std::string const fileName) -> Rinex3NavStream"""
    return _gpstk.Rinex3NavStream_outRinex3NavStream(fileName)

def Rinex3NavStream__remove(ptr):
    """Rinex3NavStream__remove(Rinex3NavStream ptr)"""
    return _gpstk.Rinex3NavStream__remove(ptr)

class Rinex3NavData(Rinex3NavBase):
    """Proxy of C++ gpstk::Rinex3NavData class"""
    __swig_setmethods__ = {}
    for _s in [Rinex3NavBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rinex3NavData, name, value)
    __swig_getmethods__ = {}
    for _s in [Rinex3NavBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rinex3NavData, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::Rinex3NavData self) -> Rinex3NavData
        __init__(gpstk::Rinex3NavData self, GloEphemeris gloe) -> Rinex3NavData
        __init__(gpstk::Rinex3NavData self, RinexNavData rnd) -> Rinex3NavData
        __init__(gpstk::Rinex3NavData self, EngEphemeris ee) -> Rinex3NavData
        __init__(gpstk::Rinex3NavData self, GPSEphemeris gpseph) -> Rinex3NavData
        __init__(gpstk::Rinex3NavData self, GalEphemeris galeph) -> Rinex3NavData
        __init__(gpstk::Rinex3NavData self, BDSEphemeris bdseph) -> Rinex3NavData
        __init__(gpstk::Rinex3NavData self, QZSEphemeris qzseph) -> Rinex3NavData
        """
        this = _gpstk.new_Rinex3NavData(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_Rinex3NavData
    __del__ = lambda self: None

    def isData(self):
        """isData(Rinex3NavData self) -> bool"""
        return _gpstk.Rinex3NavData_isData(self)


    def dumpString(self):
        """dumpString(Rinex3NavData self) -> std::string"""
        return _gpstk.Rinex3NavData_dumpString(self)


    def toEngEphemeris(self):
        """toEngEphemeris(Rinex3NavData self) -> EngEphemeris"""
        return _gpstk.Rinex3NavData_toEngEphemeris(self)


    def toGPSEphemeris(self):
        """toGPSEphemeris(Rinex3NavData self) -> GPSEphemeris"""
        return _gpstk.Rinex3NavData_toGPSEphemeris(self)


    def toGloEphemeris(self):
        """toGloEphemeris(Rinex3NavData self) -> GloEphemeris"""
        return _gpstk.Rinex3NavData_toGloEphemeris(self)


    def toGalEphemeris(self):
        """toGalEphemeris(Rinex3NavData self) -> GalEphemeris"""
        return _gpstk.Rinex3NavData_toGalEphemeris(self)


    def toList(self):
        """toList(Rinex3NavData self) -> std::list< double,std::allocator< double > >"""
        return _gpstk.Rinex3NavData_toList(self)


    def __lt__(self, right):
        """__lt__(Rinex3NavData self, Rinex3NavData right) -> bool"""
        return _gpstk.Rinex3NavData___lt__(self, right)

    __swig_setmethods__["time"] = _gpstk.Rinex3NavData_time_set
    __swig_getmethods__["time"] = _gpstk.Rinex3NavData_time_get
    if _newclass:
        time = _swig_property(_gpstk.Rinex3NavData_time_get, _gpstk.Rinex3NavData_time_set)
    __swig_setmethods__["satSys"] = _gpstk.Rinex3NavData_satSys_set
    __swig_getmethods__["satSys"] = _gpstk.Rinex3NavData_satSys_get
    if _newclass:
        satSys = _swig_property(_gpstk.Rinex3NavData_satSys_get, _gpstk.Rinex3NavData_satSys_set)
    __swig_setmethods__["PRNID"] = _gpstk.Rinex3NavData_PRNID_set
    __swig_getmethods__["PRNID"] = _gpstk.Rinex3NavData_PRNID_get
    if _newclass:
        PRNID = _swig_property(_gpstk.Rinex3NavData_PRNID_get, _gpstk.Rinex3NavData_PRNID_set)
    __swig_setmethods__["sat"] = _gpstk.Rinex3NavData_sat_set
    __swig_getmethods__["sat"] = _gpstk.Rinex3NavData_sat_get
    if _newclass:
        sat = _swig_property(_gpstk.Rinex3NavData_sat_get, _gpstk.Rinex3NavData_sat_set)
    __swig_setmethods__["HOWtime"] = _gpstk.Rinex3NavData_HOWtime_set
    __swig_getmethods__["HOWtime"] = _gpstk.Rinex3NavData_HOWtime_get
    if _newclass:
        HOWtime = _swig_property(_gpstk.Rinex3NavData_HOWtime_get, _gpstk.Rinex3NavData_HOWtime_set)
    __swig_setmethods__["weeknum"] = _gpstk.Rinex3NavData_weeknum_set
    __swig_getmethods__["weeknum"] = _gpstk.Rinex3NavData_weeknum_get
    if _newclass:
        weeknum = _swig_property(_gpstk.Rinex3NavData_weeknum_get, _gpstk.Rinex3NavData_weeknum_set)
    __swig_setmethods__["accuracy"] = _gpstk.Rinex3NavData_accuracy_set
    __swig_getmethods__["accuracy"] = _gpstk.Rinex3NavData_accuracy_get
    if _newclass:
        accuracy = _swig_property(_gpstk.Rinex3NavData_accuracy_get, _gpstk.Rinex3NavData_accuracy_set)
    __swig_setmethods__["health"] = _gpstk.Rinex3NavData_health_set
    __swig_getmethods__["health"] = _gpstk.Rinex3NavData_health_get
    if _newclass:
        health = _swig_property(_gpstk.Rinex3NavData_health_get, _gpstk.Rinex3NavData_health_set)
    __swig_setmethods__["codeflgs"] = _gpstk.Rinex3NavData_codeflgs_set
    __swig_getmethods__["codeflgs"] = _gpstk.Rinex3NavData_codeflgs_get
    if _newclass:
        codeflgs = _swig_property(_gpstk.Rinex3NavData_codeflgs_get, _gpstk.Rinex3NavData_codeflgs_set)
    __swig_setmethods__["L2Pdata"] = _gpstk.Rinex3NavData_L2Pdata_set
    __swig_getmethods__["L2Pdata"] = _gpstk.Rinex3NavData_L2Pdata_get
    if _newclass:
        L2Pdata = _swig_property(_gpstk.Rinex3NavData_L2Pdata_get, _gpstk.Rinex3NavData_L2Pdata_set)
    __swig_setmethods__["IODC"] = _gpstk.Rinex3NavData_IODC_set
    __swig_getmethods__["IODC"] = _gpstk.Rinex3NavData_IODC_get
    if _newclass:
        IODC = _swig_property(_gpstk.Rinex3NavData_IODC_get, _gpstk.Rinex3NavData_IODC_set)
    __swig_setmethods__["IODE"] = _gpstk.Rinex3NavData_IODE_set
    __swig_getmethods__["IODE"] = _gpstk.Rinex3NavData_IODE_get
    if _newclass:
        IODE = _swig_property(_gpstk.Rinex3NavData_IODE_get, _gpstk.Rinex3NavData_IODE_set)
    __swig_setmethods__["TauN"] = _gpstk.Rinex3NavData_TauN_set
    __swig_getmethods__["TauN"] = _gpstk.Rinex3NavData_TauN_get
    if _newclass:
        TauN = _swig_property(_gpstk.Rinex3NavData_TauN_get, _gpstk.Rinex3NavData_TauN_set)
    __swig_setmethods__["GammaN"] = _gpstk.Rinex3NavData_GammaN_set
    __swig_getmethods__["GammaN"] = _gpstk.Rinex3NavData_GammaN_get
    if _newclass:
        GammaN = _swig_property(_gpstk.Rinex3NavData_GammaN_get, _gpstk.Rinex3NavData_GammaN_set)
    __swig_setmethods__["MFTraw"] = _gpstk.Rinex3NavData_MFTraw_set
    __swig_getmethods__["MFTraw"] = _gpstk.Rinex3NavData_MFTraw_get
    if _newclass:
        MFTraw = _swig_property(_gpstk.Rinex3NavData_MFTraw_get, _gpstk.Rinex3NavData_MFTraw_set)
    __swig_setmethods__["MFtime"] = _gpstk.Rinex3NavData_MFtime_set
    __swig_getmethods__["MFtime"] = _gpstk.Rinex3NavData_MFtime_get
    if _newclass:
        MFtime = _swig_property(_gpstk.Rinex3NavData_MFtime_get, _gpstk.Rinex3NavData_MFtime_set)
    __swig_setmethods__["freqNum"] = _gpstk.Rinex3NavData_freqNum_set
    __swig_getmethods__["freqNum"] = _gpstk.Rinex3NavData_freqNum_get
    if _newclass:
        freqNum = _swig_property(_gpstk.Rinex3NavData_freqNum_get, _gpstk.Rinex3NavData_freqNum_set)
    __swig_setmethods__["ageOfInfo"] = _gpstk.Rinex3NavData_ageOfInfo_set
    __swig_getmethods__["ageOfInfo"] = _gpstk.Rinex3NavData_ageOfInfo_get
    if _newclass:
        ageOfInfo = _swig_property(_gpstk.Rinex3NavData_ageOfInfo_get, _gpstk.Rinex3NavData_ageOfInfo_set)
    __swig_setmethods__["datasources"] = _gpstk.Rinex3NavData_datasources_set
    __swig_getmethods__["datasources"] = _gpstk.Rinex3NavData_datasources_get
    if _newclass:
        datasources = _swig_property(_gpstk.Rinex3NavData_datasources_get, _gpstk.Rinex3NavData_datasources_set)
    __swig_setmethods__["IODnav"] = _gpstk.Rinex3NavData_IODnav_set
    __swig_getmethods__["IODnav"] = _gpstk.Rinex3NavData_IODnav_get
    if _newclass:
        IODnav = _swig_property(_gpstk.Rinex3NavData_IODnav_get, _gpstk.Rinex3NavData_IODnav_set)
    __swig_setmethods__["accCode"] = _gpstk.Rinex3NavData_accCode_set
    __swig_getmethods__["accCode"] = _gpstk.Rinex3NavData_accCode_get
    if _newclass:
        accCode = _swig_property(_gpstk.Rinex3NavData_accCode_get, _gpstk.Rinex3NavData_accCode_set)
    __swig_setmethods__["IODN"] = _gpstk.Rinex3NavData_IODN_set
    __swig_getmethods__["IODN"] = _gpstk.Rinex3NavData_IODN_get
    if _newclass:
        IODN = _swig_property(_gpstk.Rinex3NavData_IODN_get, _gpstk.Rinex3NavData_IODN_set)
    __swig_setmethods__["Toc"] = _gpstk.Rinex3NavData_Toc_set
    __swig_getmethods__["Toc"] = _gpstk.Rinex3NavData_Toc_get
    if _newclass:
        Toc = _swig_property(_gpstk.Rinex3NavData_Toc_get, _gpstk.Rinex3NavData_Toc_set)
    __swig_setmethods__["af0"] = _gpstk.Rinex3NavData_af0_set
    __swig_getmethods__["af0"] = _gpstk.Rinex3NavData_af0_get
    if _newclass:
        af0 = _swig_property(_gpstk.Rinex3NavData_af0_get, _gpstk.Rinex3NavData_af0_set)
    __swig_setmethods__["af1"] = _gpstk.Rinex3NavData_af1_set
    __swig_getmethods__["af1"] = _gpstk.Rinex3NavData_af1_get
    if _newclass:
        af1 = _swig_property(_gpstk.Rinex3NavData_af1_get, _gpstk.Rinex3NavData_af1_set)
    __swig_setmethods__["af2"] = _gpstk.Rinex3NavData_af2_set
    __swig_getmethods__["af2"] = _gpstk.Rinex3NavData_af2_get
    if _newclass:
        af2 = _swig_property(_gpstk.Rinex3NavData_af2_get, _gpstk.Rinex3NavData_af2_set)
    __swig_setmethods__["Tgd"] = _gpstk.Rinex3NavData_Tgd_set
    __swig_getmethods__["Tgd"] = _gpstk.Rinex3NavData_Tgd_get
    if _newclass:
        Tgd = _swig_property(_gpstk.Rinex3NavData_Tgd_get, _gpstk.Rinex3NavData_Tgd_set)
    __swig_setmethods__["Tgd2"] = _gpstk.Rinex3NavData_Tgd2_set
    __swig_getmethods__["Tgd2"] = _gpstk.Rinex3NavData_Tgd2_get
    if _newclass:
        Tgd2 = _swig_property(_gpstk.Rinex3NavData_Tgd2_get, _gpstk.Rinex3NavData_Tgd2_set)
    __swig_setmethods__["Cuc"] = _gpstk.Rinex3NavData_Cuc_set
    __swig_getmethods__["Cuc"] = _gpstk.Rinex3NavData_Cuc_get
    if _newclass:
        Cuc = _swig_property(_gpstk.Rinex3NavData_Cuc_get, _gpstk.Rinex3NavData_Cuc_set)
    __swig_setmethods__["Cus"] = _gpstk.Rinex3NavData_Cus_set
    __swig_getmethods__["Cus"] = _gpstk.Rinex3NavData_Cus_get
    if _newclass:
        Cus = _swig_property(_gpstk.Rinex3NavData_Cus_get, _gpstk.Rinex3NavData_Cus_set)
    __swig_setmethods__["Crc"] = _gpstk.Rinex3NavData_Crc_set
    __swig_getmethods__["Crc"] = _gpstk.Rinex3NavData_Crc_get
    if _newclass:
        Crc = _swig_property(_gpstk.Rinex3NavData_Crc_get, _gpstk.Rinex3NavData_Crc_set)
    __swig_setmethods__["Crs"] = _gpstk.Rinex3NavData_Crs_set
    __swig_getmethods__["Crs"] = _gpstk.Rinex3NavData_Crs_get
    if _newclass:
        Crs = _swig_property(_gpstk.Rinex3NavData_Crs_get, _gpstk.Rinex3NavData_Crs_set)
    __swig_setmethods__["Cic"] = _gpstk.Rinex3NavData_Cic_set
    __swig_getmethods__["Cic"] = _gpstk.Rinex3NavData_Cic_get
    if _newclass:
        Cic = _swig_property(_gpstk.Rinex3NavData_Cic_get, _gpstk.Rinex3NavData_Cic_set)
    __swig_setmethods__["Cis"] = _gpstk.Rinex3NavData_Cis_set
    __swig_getmethods__["Cis"] = _gpstk.Rinex3NavData_Cis_get
    if _newclass:
        Cis = _swig_property(_gpstk.Rinex3NavData_Cis_get, _gpstk.Rinex3NavData_Cis_set)
    __swig_setmethods__["Toe"] = _gpstk.Rinex3NavData_Toe_set
    __swig_getmethods__["Toe"] = _gpstk.Rinex3NavData_Toe_get
    if _newclass:
        Toe = _swig_property(_gpstk.Rinex3NavData_Toe_get, _gpstk.Rinex3NavData_Toe_set)
    __swig_setmethods__["M0"] = _gpstk.Rinex3NavData_M0_set
    __swig_getmethods__["M0"] = _gpstk.Rinex3NavData_M0_get
    if _newclass:
        M0 = _swig_property(_gpstk.Rinex3NavData_M0_get, _gpstk.Rinex3NavData_M0_set)
    __swig_setmethods__["dn"] = _gpstk.Rinex3NavData_dn_set
    __swig_getmethods__["dn"] = _gpstk.Rinex3NavData_dn_get
    if _newclass:
        dn = _swig_property(_gpstk.Rinex3NavData_dn_get, _gpstk.Rinex3NavData_dn_set)
    __swig_setmethods__["ecc"] = _gpstk.Rinex3NavData_ecc_set
    __swig_getmethods__["ecc"] = _gpstk.Rinex3NavData_ecc_get
    if _newclass:
        ecc = _swig_property(_gpstk.Rinex3NavData_ecc_get, _gpstk.Rinex3NavData_ecc_set)
    __swig_setmethods__["Ahalf"] = _gpstk.Rinex3NavData_Ahalf_set
    __swig_getmethods__["Ahalf"] = _gpstk.Rinex3NavData_Ahalf_get
    if _newclass:
        Ahalf = _swig_property(_gpstk.Rinex3NavData_Ahalf_get, _gpstk.Rinex3NavData_Ahalf_set)
    __swig_setmethods__["OMEGA0"] = _gpstk.Rinex3NavData_OMEGA0_set
    __swig_getmethods__["OMEGA0"] = _gpstk.Rinex3NavData_OMEGA0_get
    if _newclass:
        OMEGA0 = _swig_property(_gpstk.Rinex3NavData_OMEGA0_get, _gpstk.Rinex3NavData_OMEGA0_set)
    __swig_setmethods__["i0"] = _gpstk.Rinex3NavData_i0_set
    __swig_getmethods__["i0"] = _gpstk.Rinex3NavData_i0_get
    if _newclass:
        i0 = _swig_property(_gpstk.Rinex3NavData_i0_get, _gpstk.Rinex3NavData_i0_set)
    __swig_setmethods__["w"] = _gpstk.Rinex3NavData_w_set
    __swig_getmethods__["w"] = _gpstk.Rinex3NavData_w_get
    if _newclass:
        w = _swig_property(_gpstk.Rinex3NavData_w_get, _gpstk.Rinex3NavData_w_set)
    __swig_setmethods__["OMEGAdot"] = _gpstk.Rinex3NavData_OMEGAdot_set
    __swig_getmethods__["OMEGAdot"] = _gpstk.Rinex3NavData_OMEGAdot_get
    if _newclass:
        OMEGAdot = _swig_property(_gpstk.Rinex3NavData_OMEGAdot_get, _gpstk.Rinex3NavData_OMEGAdot_set)
    __swig_setmethods__["idot"] = _gpstk.Rinex3NavData_idot_set
    __swig_getmethods__["idot"] = _gpstk.Rinex3NavData_idot_get
    if _newclass:
        idot = _swig_property(_gpstk.Rinex3NavData_idot_get, _gpstk.Rinex3NavData_idot_set)
    __swig_setmethods__["fitint"] = _gpstk.Rinex3NavData_fitint_set
    __swig_getmethods__["fitint"] = _gpstk.Rinex3NavData_fitint_get
    if _newclass:
        fitint = _swig_property(_gpstk.Rinex3NavData_fitint_get, _gpstk.Rinex3NavData_fitint_set)
    __swig_setmethods__["px"] = _gpstk.Rinex3NavData_px_set
    __swig_getmethods__["px"] = _gpstk.Rinex3NavData_px_get
    if _newclass:
        px = _swig_property(_gpstk.Rinex3NavData_px_get, _gpstk.Rinex3NavData_px_set)
    __swig_setmethods__["py"] = _gpstk.Rinex3NavData_py_set
    __swig_getmethods__["py"] = _gpstk.Rinex3NavData_py_get
    if _newclass:
        py = _swig_property(_gpstk.Rinex3NavData_py_get, _gpstk.Rinex3NavData_py_set)
    __swig_setmethods__["pz"] = _gpstk.Rinex3NavData_pz_set
    __swig_getmethods__["pz"] = _gpstk.Rinex3NavData_pz_get
    if _newclass:
        pz = _swig_property(_gpstk.Rinex3NavData_pz_get, _gpstk.Rinex3NavData_pz_set)
    __swig_setmethods__["vx"] = _gpstk.Rinex3NavData_vx_set
    __swig_getmethods__["vx"] = _gpstk.Rinex3NavData_vx_get
    if _newclass:
        vx = _swig_property(_gpstk.Rinex3NavData_vx_get, _gpstk.Rinex3NavData_vx_set)
    __swig_setmethods__["vy"] = _gpstk.Rinex3NavData_vy_set
    __swig_getmethods__["vy"] = _gpstk.Rinex3NavData_vy_get
    if _newclass:
        vy = _swig_property(_gpstk.Rinex3NavData_vy_get, _gpstk.Rinex3NavData_vy_set)
    __swig_setmethods__["vz"] = _gpstk.Rinex3NavData_vz_set
    __swig_getmethods__["vz"] = _gpstk.Rinex3NavData_vz_get
    if _newclass:
        vz = _swig_property(_gpstk.Rinex3NavData_vz_get, _gpstk.Rinex3NavData_vz_set)
    __swig_setmethods__["ax"] = _gpstk.Rinex3NavData_ax_set
    __swig_getmethods__["ax"] = _gpstk.Rinex3NavData_ax_get
    if _newclass:
        ax = _swig_property(_gpstk.Rinex3NavData_ax_get, _gpstk.Rinex3NavData_ax_set)
    __swig_setmethods__["ay"] = _gpstk.Rinex3NavData_ay_set
    __swig_getmethods__["ay"] = _gpstk.Rinex3NavData_ay_get
    if _newclass:
        ay = _swig_property(_gpstk.Rinex3NavData_ay_get, _gpstk.Rinex3NavData_ay_set)
    __swig_setmethods__["az"] = _gpstk.Rinex3NavData_az_set
    __swig_getmethods__["az"] = _gpstk.Rinex3NavData_az_get
    if _newclass:
        az = _swig_property(_gpstk.Rinex3NavData_az_get, _gpstk.Rinex3NavData_az_set)

    def __str__(self):
        """__str__(Rinex3NavData self) -> std::string"""
        return _gpstk.Rinex3NavData___str__(self)

Rinex3NavData_swigregister = _gpstk.Rinex3NavData_swigregister
Rinex3NavData_swigregister(Rinex3NavData)

class OrbElemRinex(OrbElem):
    """Proxy of C++ gpstk::OrbElemRinex class"""
    __swig_setmethods__ = {}
    for _s in [OrbElem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrbElemRinex, name, value)
    __swig_getmethods__ = {}
    for _s in [OrbElem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrbElemRinex, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::OrbElemRinex self) -> OrbElemRinex
        __init__(gpstk::OrbElemRinex self, Rinex3NavData rinNav) -> OrbElemRinex
        __init__(gpstk::OrbElemRinex self, RinexNavData rinNav) -> OrbElemRinex
        """
        this = _gpstk.new_OrbElemRinex(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_OrbElemRinex
    __del__ = lambda self: None

    def clone(self):
        """clone(OrbElemRinex self) -> OrbElemRinex"""
        return _gpstk.OrbElemRinex_clone(self)


    def loadData(self, *args):
        """
        loadData(OrbElemRinex self, RinexNavData rinNav)
        loadData(OrbElemRinex self, Rinex3NavData rinNav)
        """
        return _gpstk.OrbElemRinex_loadData(self, *args)


    def getName(self):
        """getName(OrbElemRinex self) -> std::string"""
        return _gpstk.OrbElemRinex_getName(self)


    def getNameLong(self):
        """getNameLong(OrbElemRinex self) -> std::string"""
        return _gpstk.OrbElemRinex_getNameLong(self)


    def getAccuracy(self):
        """getAccuracy(OrbElemRinex self) -> double"""
        return _gpstk.OrbElemRinex_getAccuracy(self)


    def adjustBeginningValidity(self):
        """adjustBeginningValidity(OrbElemRinex self)"""
        return _gpstk.OrbElemRinex_adjustBeginningValidity(self)


    def dumpHeader(self, *args):
        """
        dumpHeader(OrbElemRinex self, std::ostream & s)
        dumpHeader(OrbElemRinex self)
        """
        return _gpstk.OrbElemRinex_dumpHeader(self, *args)


    def dumpTerse(self, *args):
        """
        dumpTerse(OrbElemRinex self, std::ostream & s)
        dumpTerse(OrbElemRinex self)
        """
        return _gpstk.OrbElemRinex_dumpTerse(self, *args)

    __swig_setmethods__["transmitTime"] = _gpstk.OrbElemRinex_transmitTime_set
    __swig_getmethods__["transmitTime"] = _gpstk.OrbElemRinex_transmitTime_get
    if _newclass:
        transmitTime = _swig_property(_gpstk.OrbElemRinex_transmitTime_get, _gpstk.OrbElemRinex_transmitTime_set)
    __swig_setmethods__["codeflags"] = _gpstk.OrbElemRinex_codeflags_set
    __swig_getmethods__["codeflags"] = _gpstk.OrbElemRinex_codeflags_get
    if _newclass:
        codeflags = _swig_property(_gpstk.OrbElemRinex_codeflags_get, _gpstk.OrbElemRinex_codeflags_set)
    __swig_setmethods__["accuracyValue"] = _gpstk.OrbElemRinex_accuracyValue_set
    __swig_getmethods__["accuracyValue"] = _gpstk.OrbElemRinex_accuracyValue_get
    if _newclass:
        accuracyValue = _swig_property(_gpstk.OrbElemRinex_accuracyValue_get, _gpstk.OrbElemRinex_accuracyValue_set)
    __swig_setmethods__["health"] = _gpstk.OrbElemRinex_health_set
    __swig_getmethods__["health"] = _gpstk.OrbElemRinex_health_get
    if _newclass:
        health = _swig_property(_gpstk.OrbElemRinex_health_get, _gpstk.OrbElemRinex_health_set)
    __swig_setmethods__["L2Pdata"] = _gpstk.OrbElemRinex_L2Pdata_set
    __swig_getmethods__["L2Pdata"] = _gpstk.OrbElemRinex_L2Pdata_get
    if _newclass:
        L2Pdata = _swig_property(_gpstk.OrbElemRinex_L2Pdata_get, _gpstk.OrbElemRinex_L2Pdata_set)
    __swig_setmethods__["IODC"] = _gpstk.OrbElemRinex_IODC_set
    __swig_getmethods__["IODC"] = _gpstk.OrbElemRinex_IODC_get
    if _newclass:
        IODC = _swig_property(_gpstk.OrbElemRinex_IODC_get, _gpstk.OrbElemRinex_IODC_set)
    __swig_setmethods__["fitDuration"] = _gpstk.OrbElemRinex_fitDuration_set
    __swig_getmethods__["fitDuration"] = _gpstk.OrbElemRinex_fitDuration_get
    if _newclass:
        fitDuration = _swig_property(_gpstk.OrbElemRinex_fitDuration_get, _gpstk.OrbElemRinex_fitDuration_set)
    __swig_setmethods__["Tgd"] = _gpstk.OrbElemRinex_Tgd_set
    __swig_getmethods__["Tgd"] = _gpstk.OrbElemRinex_Tgd_get
    if _newclass:
        Tgd = _swig_property(_gpstk.OrbElemRinex_Tgd_get, _gpstk.OrbElemRinex_Tgd_set)
    __swig_setmethods__["HOWtime"] = _gpstk.OrbElemRinex_HOWtime_set
    __swig_getmethods__["HOWtime"] = _gpstk.OrbElemRinex_HOWtime_get
    if _newclass:
        HOWtime = _swig_property(_gpstk.OrbElemRinex_HOWtime_get, _gpstk.OrbElemRinex_HOWtime_set)
OrbElemRinex_swigregister = _gpstk.OrbElemRinex_swigregister
OrbElemRinex_swigregister(OrbElemRinex)

class Rinex3ClockBase(FFData):
    """Proxy of C++ gpstk::Rinex3ClockBase class"""
    __swig_setmethods__ = {}
    for _s in [FFData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rinex3ClockBase, name, value)
    __swig_getmethods__ = {}
    for _s in [FFData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rinex3ClockBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_Rinex3ClockBase
    __del__ = lambda self: None
Rinex3ClockBase_swigregister = _gpstk.Rinex3ClockBase_swigregister
Rinex3ClockBase_swigregister(Rinex3ClockBase)

class Rinex3ObsBase(FFData):
    """Proxy of C++ gpstk::Rinex3ObsBase class"""
    __swig_setmethods__ = {}
    for _s in [FFData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rinex3ObsBase, name, value)
    __swig_getmethods__ = {}
    for _s in [FFData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rinex3ObsBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_Rinex3ObsBase
    __del__ = lambda self: None
Rinex3ObsBase_swigregister = _gpstk.Rinex3ObsBase_swigregister
Rinex3ObsBase_swigregister(Rinex3ObsBase)

class Rinex3ObsHeader(Rinex3ObsBase):
    """Proxy of C++ gpstk::Rinex3ObsHeader class"""
    __swig_setmethods__ = {}
    for _s in [Rinex3ObsBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rinex3ObsHeader, name, value)
    __swig_getmethods__ = {}
    for _s in [Rinex3ObsBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rinex3ObsHeader, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::Rinex3ObsHeader self) -> Rinex3ObsHeader"""
        this = _gpstk.new_Rinex3ObsHeader()
        try:
            self.this.append(this)
        except:
            self.this = this

    def clear(self):
        """clear(Rinex3ObsHeader self)"""
        return _gpstk.Rinex3ObsHeader_clear(self)

    validVersion = _gpstk.Rinex3ObsHeader_validVersion
    validRunBy = _gpstk.Rinex3ObsHeader_validRunBy
    validComment = _gpstk.Rinex3ObsHeader_validComment
    validMarkerName = _gpstk.Rinex3ObsHeader_validMarkerName
    validMarkerNumber = _gpstk.Rinex3ObsHeader_validMarkerNumber
    validMarkerType = _gpstk.Rinex3ObsHeader_validMarkerType
    validObserver = _gpstk.Rinex3ObsHeader_validObserver
    validReceiver = _gpstk.Rinex3ObsHeader_validReceiver
    validAntennaType = _gpstk.Rinex3ObsHeader_validAntennaType
    validAntennaPosition = _gpstk.Rinex3ObsHeader_validAntennaPosition
    validAntennaDeltaHEN = _gpstk.Rinex3ObsHeader_validAntennaDeltaHEN
    validAntennaDeltaXYZ = _gpstk.Rinex3ObsHeader_validAntennaDeltaXYZ
    validAntennaPhaseCtr = _gpstk.Rinex3ObsHeader_validAntennaPhaseCtr
    validAntennaBsightXYZ = _gpstk.Rinex3ObsHeader_validAntennaBsightXYZ
    validAntennaZeroDirAzi = _gpstk.Rinex3ObsHeader_validAntennaZeroDirAzi
    validAntennaZeroDirXYZ = _gpstk.Rinex3ObsHeader_validAntennaZeroDirXYZ
    validCenterOfMass = _gpstk.Rinex3ObsHeader_validCenterOfMass
    validNumObs = _gpstk.Rinex3ObsHeader_validNumObs
    validSystemObsType = _gpstk.Rinex3ObsHeader_validSystemObsType
    validWaveFact = _gpstk.Rinex3ObsHeader_validWaveFact
    validSigStrengthUnit = _gpstk.Rinex3ObsHeader_validSigStrengthUnit
    validInterval = _gpstk.Rinex3ObsHeader_validInterval
    validFirstTime = _gpstk.Rinex3ObsHeader_validFirstTime
    validLastTime = _gpstk.Rinex3ObsHeader_validLastTime
    validReceiverOffset = _gpstk.Rinex3ObsHeader_validReceiverOffset
    validSystemDCBSapplied = _gpstk.Rinex3ObsHeader_validSystemDCBSapplied
    validSystemPCVSapplied = _gpstk.Rinex3ObsHeader_validSystemPCVSapplied
    validSystemScaleFac = _gpstk.Rinex3ObsHeader_validSystemScaleFac
    validSystemPhaseShift = _gpstk.Rinex3ObsHeader_validSystemPhaseShift
    validGlonassFreqNo = _gpstk.Rinex3ObsHeader_validGlonassFreqNo
    validGlonassCodPhsBias = _gpstk.Rinex3ObsHeader_validGlonassCodPhsBias
    validLeapSeconds = _gpstk.Rinex3ObsHeader_validLeapSeconds
    validNumSats = _gpstk.Rinex3ObsHeader_validNumSats
    validPrnObs = _gpstk.Rinex3ObsHeader_validPrnObs
    allValid2 = _gpstk.Rinex3ObsHeader_allValid2
    allValid30 = _gpstk.Rinex3ObsHeader_allValid30
    allValid301 = _gpstk.Rinex3ObsHeader_allValid301
    allValid302 = _gpstk.Rinex3ObsHeader_allValid302
    __swig_setmethods__["R2ObsTypes"] = _gpstk.Rinex3ObsHeader_R2ObsTypes_set
    __swig_getmethods__["R2ObsTypes"] = _gpstk.Rinex3ObsHeader_R2ObsTypes_get
    if _newclass:
        R2ObsTypes = _swig_property(_gpstk.Rinex3ObsHeader_R2ObsTypes_get, _gpstk.Rinex3ObsHeader_R2ObsTypes_set)
    __swig_setmethods__["mapSysR2toR3ObsID"] = _gpstk.Rinex3ObsHeader_mapSysR2toR3ObsID_set
    __swig_getmethods__["mapSysR2toR3ObsID"] = _gpstk.Rinex3ObsHeader_mapSysR2toR3ObsID_get
    if _newclass:
        mapSysR2toR3ObsID = _swig_property(_gpstk.Rinex3ObsHeader_mapSysR2toR3ObsID_get, _gpstk.Rinex3ObsHeader_mapSysR2toR3ObsID_set)
    __swig_setmethods__["sysSfacMap"] = _gpstk.Rinex3ObsHeader_sysSfacMap_set
    __swig_getmethods__["sysSfacMap"] = _gpstk.Rinex3ObsHeader_sysSfacMap_get
    if _newclass:
        sysSfacMap = _swig_property(_gpstk.Rinex3ObsHeader_sysSfacMap_get, _gpstk.Rinex3ObsHeader_sysSfacMap_set)
    __swig_setmethods__["version"] = _gpstk.Rinex3ObsHeader_version_set
    __swig_getmethods__["version"] = _gpstk.Rinex3ObsHeader_version_get
    if _newclass:
        version = _swig_property(_gpstk.Rinex3ObsHeader_version_get, _gpstk.Rinex3ObsHeader_version_set)
    __swig_setmethods__["fileType"] = _gpstk.Rinex3ObsHeader_fileType_set
    __swig_getmethods__["fileType"] = _gpstk.Rinex3ObsHeader_fileType_get
    if _newclass:
        fileType = _swig_property(_gpstk.Rinex3ObsHeader_fileType_get, _gpstk.Rinex3ObsHeader_fileType_set)
    __swig_setmethods__["fileSys"] = _gpstk.Rinex3ObsHeader_fileSys_set
    __swig_getmethods__["fileSys"] = _gpstk.Rinex3ObsHeader_fileSys_get
    if _newclass:
        fileSys = _swig_property(_gpstk.Rinex3ObsHeader_fileSys_get, _gpstk.Rinex3ObsHeader_fileSys_set)
    __swig_setmethods__["fileSysSat"] = _gpstk.Rinex3ObsHeader_fileSysSat_set
    __swig_getmethods__["fileSysSat"] = _gpstk.Rinex3ObsHeader_fileSysSat_get
    if _newclass:
        fileSysSat = _swig_property(_gpstk.Rinex3ObsHeader_fileSysSat_get, _gpstk.Rinex3ObsHeader_fileSysSat_set)
    __swig_setmethods__["fileProgram"] = _gpstk.Rinex3ObsHeader_fileProgram_set
    __swig_getmethods__["fileProgram"] = _gpstk.Rinex3ObsHeader_fileProgram_get
    if _newclass:
        fileProgram = _swig_property(_gpstk.Rinex3ObsHeader_fileProgram_get, _gpstk.Rinex3ObsHeader_fileProgram_set)
    __swig_setmethods__["fileAgency"] = _gpstk.Rinex3ObsHeader_fileAgency_set
    __swig_getmethods__["fileAgency"] = _gpstk.Rinex3ObsHeader_fileAgency_get
    if _newclass:
        fileAgency = _swig_property(_gpstk.Rinex3ObsHeader_fileAgency_get, _gpstk.Rinex3ObsHeader_fileAgency_set)
    __swig_setmethods__["date"] = _gpstk.Rinex3ObsHeader_date_set
    __swig_getmethods__["date"] = _gpstk.Rinex3ObsHeader_date_get
    if _newclass:
        date = _swig_property(_gpstk.Rinex3ObsHeader_date_get, _gpstk.Rinex3ObsHeader_date_set)
    __swig_setmethods__["commentList"] = _gpstk.Rinex3ObsHeader_commentList_set
    __swig_getmethods__["commentList"] = _gpstk.Rinex3ObsHeader_commentList_get
    if _newclass:
        commentList = _swig_property(_gpstk.Rinex3ObsHeader_commentList_get, _gpstk.Rinex3ObsHeader_commentList_set)
    __swig_setmethods__["markerName"] = _gpstk.Rinex3ObsHeader_markerName_set
    __swig_getmethods__["markerName"] = _gpstk.Rinex3ObsHeader_markerName_get
    if _newclass:
        markerName = _swig_property(_gpstk.Rinex3ObsHeader_markerName_get, _gpstk.Rinex3ObsHeader_markerName_set)
    __swig_setmethods__["markerNumber"] = _gpstk.Rinex3ObsHeader_markerNumber_set
    __swig_getmethods__["markerNumber"] = _gpstk.Rinex3ObsHeader_markerNumber_get
    if _newclass:
        markerNumber = _swig_property(_gpstk.Rinex3ObsHeader_markerNumber_get, _gpstk.Rinex3ObsHeader_markerNumber_set)
    __swig_setmethods__["markerType"] = _gpstk.Rinex3ObsHeader_markerType_set
    __swig_getmethods__["markerType"] = _gpstk.Rinex3ObsHeader_markerType_get
    if _newclass:
        markerType = _swig_property(_gpstk.Rinex3ObsHeader_markerType_get, _gpstk.Rinex3ObsHeader_markerType_set)
    __swig_setmethods__["observer"] = _gpstk.Rinex3ObsHeader_observer_set
    __swig_getmethods__["observer"] = _gpstk.Rinex3ObsHeader_observer_get
    if _newclass:
        observer = _swig_property(_gpstk.Rinex3ObsHeader_observer_get, _gpstk.Rinex3ObsHeader_observer_set)
    __swig_setmethods__["agency"] = _gpstk.Rinex3ObsHeader_agency_set
    __swig_getmethods__["agency"] = _gpstk.Rinex3ObsHeader_agency_get
    if _newclass:
        agency = _swig_property(_gpstk.Rinex3ObsHeader_agency_get, _gpstk.Rinex3ObsHeader_agency_set)
    __swig_setmethods__["recNo"] = _gpstk.Rinex3ObsHeader_recNo_set
    __swig_getmethods__["recNo"] = _gpstk.Rinex3ObsHeader_recNo_get
    if _newclass:
        recNo = _swig_property(_gpstk.Rinex3ObsHeader_recNo_get, _gpstk.Rinex3ObsHeader_recNo_set)
    __swig_setmethods__["recType"] = _gpstk.Rinex3ObsHeader_recType_set
    __swig_getmethods__["recType"] = _gpstk.Rinex3ObsHeader_recType_get
    if _newclass:
        recType = _swig_property(_gpstk.Rinex3ObsHeader_recType_get, _gpstk.Rinex3ObsHeader_recType_set)
    __swig_setmethods__["recVers"] = _gpstk.Rinex3ObsHeader_recVers_set
    __swig_getmethods__["recVers"] = _gpstk.Rinex3ObsHeader_recVers_get
    if _newclass:
        recVers = _swig_property(_gpstk.Rinex3ObsHeader_recVers_get, _gpstk.Rinex3ObsHeader_recVers_set)
    __swig_setmethods__["antNo"] = _gpstk.Rinex3ObsHeader_antNo_set
    __swig_getmethods__["antNo"] = _gpstk.Rinex3ObsHeader_antNo_get
    if _newclass:
        antNo = _swig_property(_gpstk.Rinex3ObsHeader_antNo_get, _gpstk.Rinex3ObsHeader_antNo_set)
    __swig_setmethods__["antType"] = _gpstk.Rinex3ObsHeader_antType_set
    __swig_getmethods__["antType"] = _gpstk.Rinex3ObsHeader_antType_get
    if _newclass:
        antType = _swig_property(_gpstk.Rinex3ObsHeader_antType_get, _gpstk.Rinex3ObsHeader_antType_set)
    __swig_setmethods__["antennaPosition"] = _gpstk.Rinex3ObsHeader_antennaPosition_set
    __swig_getmethods__["antennaPosition"] = _gpstk.Rinex3ObsHeader_antennaPosition_get
    if _newclass:
        antennaPosition = _swig_property(_gpstk.Rinex3ObsHeader_antennaPosition_get, _gpstk.Rinex3ObsHeader_antennaPosition_set)
    __swig_setmethods__["antennaDeltaHEN"] = _gpstk.Rinex3ObsHeader_antennaDeltaHEN_set
    __swig_getmethods__["antennaDeltaHEN"] = _gpstk.Rinex3ObsHeader_antennaDeltaHEN_get
    if _newclass:
        antennaDeltaHEN = _swig_property(_gpstk.Rinex3ObsHeader_antennaDeltaHEN_get, _gpstk.Rinex3ObsHeader_antennaDeltaHEN_set)
    __swig_setmethods__["antennaDeltaXYZ"] = _gpstk.Rinex3ObsHeader_antennaDeltaXYZ_set
    __swig_getmethods__["antennaDeltaXYZ"] = _gpstk.Rinex3ObsHeader_antennaDeltaXYZ_get
    if _newclass:
        antennaDeltaXYZ = _swig_property(_gpstk.Rinex3ObsHeader_antennaDeltaXYZ_get, _gpstk.Rinex3ObsHeader_antennaDeltaXYZ_set)
    __swig_setmethods__["antennaSatSys"] = _gpstk.Rinex3ObsHeader_antennaSatSys_set
    __swig_getmethods__["antennaSatSys"] = _gpstk.Rinex3ObsHeader_antennaSatSys_get
    if _newclass:
        antennaSatSys = _swig_property(_gpstk.Rinex3ObsHeader_antennaSatSys_get, _gpstk.Rinex3ObsHeader_antennaSatSys_set)
    __swig_setmethods__["antennaObsCode"] = _gpstk.Rinex3ObsHeader_antennaObsCode_set
    __swig_getmethods__["antennaObsCode"] = _gpstk.Rinex3ObsHeader_antennaObsCode_get
    if _newclass:
        antennaObsCode = _swig_property(_gpstk.Rinex3ObsHeader_antennaObsCode_get, _gpstk.Rinex3ObsHeader_antennaObsCode_set)
    __swig_setmethods__["antennaPhaseCtr"] = _gpstk.Rinex3ObsHeader_antennaPhaseCtr_set
    __swig_getmethods__["antennaPhaseCtr"] = _gpstk.Rinex3ObsHeader_antennaPhaseCtr_get
    if _newclass:
        antennaPhaseCtr = _swig_property(_gpstk.Rinex3ObsHeader_antennaPhaseCtr_get, _gpstk.Rinex3ObsHeader_antennaPhaseCtr_set)
    __swig_setmethods__["antennaBsightXYZ"] = _gpstk.Rinex3ObsHeader_antennaBsightXYZ_set
    __swig_getmethods__["antennaBsightXYZ"] = _gpstk.Rinex3ObsHeader_antennaBsightXYZ_get
    if _newclass:
        antennaBsightXYZ = _swig_property(_gpstk.Rinex3ObsHeader_antennaBsightXYZ_get, _gpstk.Rinex3ObsHeader_antennaBsightXYZ_set)
    __swig_setmethods__["antennaZeroDirAzi"] = _gpstk.Rinex3ObsHeader_antennaZeroDirAzi_set
    __swig_getmethods__["antennaZeroDirAzi"] = _gpstk.Rinex3ObsHeader_antennaZeroDirAzi_get
    if _newclass:
        antennaZeroDirAzi = _swig_property(_gpstk.Rinex3ObsHeader_antennaZeroDirAzi_get, _gpstk.Rinex3ObsHeader_antennaZeroDirAzi_set)
    __swig_setmethods__["antennaZeroDirXYZ"] = _gpstk.Rinex3ObsHeader_antennaZeroDirXYZ_set
    __swig_getmethods__["antennaZeroDirXYZ"] = _gpstk.Rinex3ObsHeader_antennaZeroDirXYZ_get
    if _newclass:
        antennaZeroDirXYZ = _swig_property(_gpstk.Rinex3ObsHeader_antennaZeroDirXYZ_get, _gpstk.Rinex3ObsHeader_antennaZeroDirXYZ_set)
    __swig_setmethods__["wavelengthFactor"] = _gpstk.Rinex3ObsHeader_wavelengthFactor_set
    __swig_getmethods__["wavelengthFactor"] = _gpstk.Rinex3ObsHeader_wavelengthFactor_get
    if _newclass:
        wavelengthFactor = _swig_property(_gpstk.Rinex3ObsHeader_wavelengthFactor_get, _gpstk.Rinex3ObsHeader_wavelengthFactor_set)
    __swig_setmethods__["extraWaveFactList"] = _gpstk.Rinex3ObsHeader_extraWaveFactList_set
    __swig_getmethods__["extraWaveFactList"] = _gpstk.Rinex3ObsHeader_extraWaveFactList_get
    if _newclass:
        extraWaveFactList = _swig_property(_gpstk.Rinex3ObsHeader_extraWaveFactList_get, _gpstk.Rinex3ObsHeader_extraWaveFactList_set)
    __swig_setmethods__["centerOfMass"] = _gpstk.Rinex3ObsHeader_centerOfMass_set
    __swig_getmethods__["centerOfMass"] = _gpstk.Rinex3ObsHeader_centerOfMass_get
    if _newclass:
        centerOfMass = _swig_property(_gpstk.Rinex3ObsHeader_centerOfMass_get, _gpstk.Rinex3ObsHeader_centerOfMass_set)
    __swig_setmethods__["obsTypeList"] = _gpstk.Rinex3ObsHeader_obsTypeList_set
    __swig_getmethods__["obsTypeList"] = _gpstk.Rinex3ObsHeader_obsTypeList_get
    if _newclass:
        obsTypeList = _swig_property(_gpstk.Rinex3ObsHeader_obsTypeList_get, _gpstk.Rinex3ObsHeader_obsTypeList_set)
    __swig_setmethods__["mapObsTypes"] = _gpstk.Rinex3ObsHeader_mapObsTypes_set
    __swig_getmethods__["mapObsTypes"] = _gpstk.Rinex3ObsHeader_mapObsTypes_get
    if _newclass:
        mapObsTypes = _swig_property(_gpstk.Rinex3ObsHeader_mapObsTypes_get, _gpstk.Rinex3ObsHeader_mapObsTypes_set)
    __swig_setmethods__["sigStrengthUnit"] = _gpstk.Rinex3ObsHeader_sigStrengthUnit_set
    __swig_getmethods__["sigStrengthUnit"] = _gpstk.Rinex3ObsHeader_sigStrengthUnit_get
    if _newclass:
        sigStrengthUnit = _swig_property(_gpstk.Rinex3ObsHeader_sigStrengthUnit_get, _gpstk.Rinex3ObsHeader_sigStrengthUnit_set)
    __swig_setmethods__["interval"] = _gpstk.Rinex3ObsHeader_interval_set
    __swig_getmethods__["interval"] = _gpstk.Rinex3ObsHeader_interval_get
    if _newclass:
        interval = _swig_property(_gpstk.Rinex3ObsHeader_interval_get, _gpstk.Rinex3ObsHeader_interval_set)
    __swig_setmethods__["firstObs"] = _gpstk.Rinex3ObsHeader_firstObs_set
    __swig_getmethods__["firstObs"] = _gpstk.Rinex3ObsHeader_firstObs_get
    if _newclass:
        firstObs = _swig_property(_gpstk.Rinex3ObsHeader_firstObs_get, _gpstk.Rinex3ObsHeader_firstObs_set)
    __swig_setmethods__["lastObs"] = _gpstk.Rinex3ObsHeader_lastObs_set
    __swig_getmethods__["lastObs"] = _gpstk.Rinex3ObsHeader_lastObs_get
    if _newclass:
        lastObs = _swig_property(_gpstk.Rinex3ObsHeader_lastObs_get, _gpstk.Rinex3ObsHeader_lastObs_set)
    __swig_setmethods__["receiverOffset"] = _gpstk.Rinex3ObsHeader_receiverOffset_set
    __swig_getmethods__["receiverOffset"] = _gpstk.Rinex3ObsHeader_receiverOffset_get
    if _newclass:
        receiverOffset = _swig_property(_gpstk.Rinex3ObsHeader_receiverOffset_get, _gpstk.Rinex3ObsHeader_receiverOffset_set)
    __swig_setmethods__["infoDCBS"] = _gpstk.Rinex3ObsHeader_infoDCBS_set
    __swig_getmethods__["infoDCBS"] = _gpstk.Rinex3ObsHeader_infoDCBS_get
    if _newclass:
        infoDCBS = _swig_property(_gpstk.Rinex3ObsHeader_infoDCBS_get, _gpstk.Rinex3ObsHeader_infoDCBS_set)
    __swig_setmethods__["infoPCVS"] = _gpstk.Rinex3ObsHeader_infoPCVS_set
    __swig_getmethods__["infoPCVS"] = _gpstk.Rinex3ObsHeader_infoPCVS_get
    if _newclass:
        infoPCVS = _swig_property(_gpstk.Rinex3ObsHeader_infoPCVS_get, _gpstk.Rinex3ObsHeader_infoPCVS_set)
    __swig_setmethods__["factor"] = _gpstk.Rinex3ObsHeader_factor_set
    __swig_getmethods__["factor"] = _gpstk.Rinex3ObsHeader_factor_get
    if _newclass:
        factor = _swig_property(_gpstk.Rinex3ObsHeader_factor_get, _gpstk.Rinex3ObsHeader_factor_set)
    __swig_setmethods__["factorPrev"] = _gpstk.Rinex3ObsHeader_factorPrev_set
    __swig_getmethods__["factorPrev"] = _gpstk.Rinex3ObsHeader_factorPrev_get
    if _newclass:
        factorPrev = _swig_property(_gpstk.Rinex3ObsHeader_factorPrev_get, _gpstk.Rinex3ObsHeader_factorPrev_set)
    __swig_setmethods__["sysPhaseShiftObsID"] = _gpstk.Rinex3ObsHeader_sysPhaseShiftObsID_set
    __swig_getmethods__["sysPhaseShiftObsID"] = _gpstk.Rinex3ObsHeader_sysPhaseShiftObsID_get
    if _newclass:
        sysPhaseShiftObsID = _swig_property(_gpstk.Rinex3ObsHeader_sysPhaseShiftObsID_get, _gpstk.Rinex3ObsHeader_sysPhaseShiftObsID_set)
    __swig_setmethods__["sysPhaseShift"] = _gpstk.Rinex3ObsHeader_sysPhaseShift_set
    __swig_getmethods__["sysPhaseShift"] = _gpstk.Rinex3ObsHeader_sysPhaseShift_get
    if _newclass:
        sysPhaseShift = _swig_property(_gpstk.Rinex3ObsHeader_sysPhaseShift_get, _gpstk.Rinex3ObsHeader_sysPhaseShift_set)
    __swig_setmethods__["GlonassFreqNo"] = _gpstk.Rinex3ObsHeader_GlonassFreqNo_set
    __swig_getmethods__["GlonassFreqNo"] = _gpstk.Rinex3ObsHeader_GlonassFreqNo_get
    if _newclass:
        GlonassFreqNo = _swig_property(_gpstk.Rinex3ObsHeader_GlonassFreqNo_get, _gpstk.Rinex3ObsHeader_GlonassFreqNo_set)
    __swig_setmethods__["GlonassCodePhaseBias"] = _gpstk.Rinex3ObsHeader_GlonassCodePhaseBias_set
    __swig_getmethods__["GlonassCodePhaseBias"] = _gpstk.Rinex3ObsHeader_GlonassCodePhaseBias_get
    if _newclass:
        GlonassCodePhaseBias = _swig_property(_gpstk.Rinex3ObsHeader_GlonassCodePhaseBias_get, _gpstk.Rinex3ObsHeader_GlonassCodePhaseBias_set)
    __swig_setmethods__["leapSeconds"] = _gpstk.Rinex3ObsHeader_leapSeconds_set
    __swig_getmethods__["leapSeconds"] = _gpstk.Rinex3ObsHeader_leapSeconds_get
    if _newclass:
        leapSeconds = _swig_property(_gpstk.Rinex3ObsHeader_leapSeconds_get, _gpstk.Rinex3ObsHeader_leapSeconds_set)
    __swig_setmethods__["numSVs"] = _gpstk.Rinex3ObsHeader_numSVs_set
    __swig_getmethods__["numSVs"] = _gpstk.Rinex3ObsHeader_numSVs_get
    if _newclass:
        numSVs = _swig_property(_gpstk.Rinex3ObsHeader_numSVs_get, _gpstk.Rinex3ObsHeader_numSVs_set)
    __swig_setmethods__["numObsForSat"] = _gpstk.Rinex3ObsHeader_numObsForSat_set
    __swig_getmethods__["numObsForSat"] = _gpstk.Rinex3ObsHeader_numObsForSat_get
    if _newclass:
        numObsForSat = _swig_property(_gpstk.Rinex3ObsHeader_numObsForSat_get, _gpstk.Rinex3ObsHeader_numObsForSat_set)
    __swig_setmethods__["valid"] = _gpstk.Rinex3ObsHeader_valid_set
    __swig_getmethods__["valid"] = _gpstk.Rinex3ObsHeader_valid_get
    if _newclass:
        valid = _swig_property(_gpstk.Rinex3ObsHeader_valid_get, _gpstk.Rinex3ObsHeader_valid_set)
    __swig_setmethods__["validEoH"] = _gpstk.Rinex3ObsHeader_validEoH_set
    __swig_getmethods__["validEoH"] = _gpstk.Rinex3ObsHeader_validEoH_get
    if _newclass:
        validEoH = _swig_property(_gpstk.Rinex3ObsHeader_validEoH_get, _gpstk.Rinex3ObsHeader_validEoH_set)
    __swig_setmethods__["satSysTemp"] = _gpstk.Rinex3ObsHeader_satSysTemp_set
    __swig_getmethods__["satSysTemp"] = _gpstk.Rinex3ObsHeader_satSysTemp_get
    if _newclass:
        satSysTemp = _swig_property(_gpstk.Rinex3ObsHeader_satSysTemp_get, _gpstk.Rinex3ObsHeader_satSysTemp_set)
    __swig_setmethods__["satSysPrev"] = _gpstk.Rinex3ObsHeader_satSysPrev_set
    __swig_getmethods__["satSysPrev"] = _gpstk.Rinex3ObsHeader_satSysPrev_get
    if _newclass:
        satSysPrev = _swig_property(_gpstk.Rinex3ObsHeader_satSysPrev_get, _gpstk.Rinex3ObsHeader_satSysPrev_set)
    __swig_setmethods__["numObs"] = _gpstk.Rinex3ObsHeader_numObs_set
    __swig_getmethods__["numObs"] = _gpstk.Rinex3ObsHeader_numObs_get
    if _newclass:
        numObs = _swig_property(_gpstk.Rinex3ObsHeader_numObs_get, _gpstk.Rinex3ObsHeader_numObs_set)
    __swig_setmethods__["numObsPrev"] = _gpstk.Rinex3ObsHeader_numObsPrev_set
    __swig_getmethods__["numObsPrev"] = _gpstk.Rinex3ObsHeader_numObsPrev_get
    if _newclass:
        numObsPrev = _swig_property(_gpstk.Rinex3ObsHeader_numObsPrev_get, _gpstk.Rinex3ObsHeader_numObsPrev_set)
    __swig_setmethods__["lastPRN"] = _gpstk.Rinex3ObsHeader_lastPRN_set
    __swig_getmethods__["lastPRN"] = _gpstk.Rinex3ObsHeader_lastPRN_get
    if _newclass:
        lastPRN = _swig_property(_gpstk.Rinex3ObsHeader_lastPRN_get, _gpstk.Rinex3ObsHeader_lastPRN_set)
    __swig_destroy__ = _gpstk.delete_Rinex3ObsHeader
    __del__ = lambda self: None

    def isHeader(self):
        """isHeader(Rinex3ObsHeader self) -> bool"""
        return _gpstk.Rinex3ObsHeader_isHeader(self)


    def getObsIndex(self, type):
        """getObsIndex(Rinex3ObsHeader self, std::string type) -> int"""
        return _gpstk.Rinex3ObsHeader_getObsIndex(self, type)


    def ParseHeaderRecord(self, line):
        """ParseHeaderRecord(Rinex3ObsHeader self, std::string & line)"""
        return _gpstk.Rinex3ObsHeader_ParseHeaderRecord(self, line)


    def NumberHeaderRecordsToBeWritten(self):
        """NumberHeaderRecordsToBeWritten(Rinex3ObsHeader self) -> int"""
        return _gpstk.Rinex3ObsHeader_NumberHeaderRecordsToBeWritten(self)


    def WriteHeaderRecords(self, s):
        """WriteHeaderRecords(Rinex3ObsHeader self, FFStream s)"""
        return _gpstk.Rinex3ObsHeader_WriteHeaderRecords(self, s)


    def isValid(self):
        """isValid(Rinex3ObsHeader self) -> bool"""
        return _gpstk.Rinex3ObsHeader_isValid(self)


    def PrepareVer2Write(self):
        """PrepareVer2Write(Rinex3ObsHeader self)"""
        return _gpstk.Rinex3ObsHeader_PrepareVer2Write(self)


    def __str__(self):
        """__str__(Rinex3ObsHeader self) -> std::string"""
        return _gpstk.Rinex3ObsHeader___str__(self)

Rinex3ObsHeader_swigregister = _gpstk.Rinex3ObsHeader_swigregister
Rinex3ObsHeader_swigregister(Rinex3ObsHeader)
Rinex3ObsHeader.stringVersion = _gpstk.cvar.Rinex3ObsHeader_stringVersion
Rinex3ObsHeader.stringRunBy = _gpstk.cvar.Rinex3ObsHeader_stringRunBy
Rinex3ObsHeader.stringComment = _gpstk.cvar.Rinex3ObsHeader_stringComment
Rinex3ObsHeader.stringMarkerName = _gpstk.cvar.Rinex3ObsHeader_stringMarkerName
Rinex3ObsHeader.stringMarkerNumber = _gpstk.cvar.Rinex3ObsHeader_stringMarkerNumber
Rinex3ObsHeader.stringMarkerType = _gpstk.cvar.Rinex3ObsHeader_stringMarkerType
Rinex3ObsHeader.stringObserver = _gpstk.cvar.Rinex3ObsHeader_stringObserver
Rinex3ObsHeader.stringReceiver = _gpstk.cvar.Rinex3ObsHeader_stringReceiver
Rinex3ObsHeader.stringAntennaType = _gpstk.cvar.Rinex3ObsHeader_stringAntennaType
Rinex3ObsHeader.stringAntennaPosition = _gpstk.cvar.Rinex3ObsHeader_stringAntennaPosition
Rinex3ObsHeader.stringAntennaDeltaHEN = _gpstk.cvar.Rinex3ObsHeader_stringAntennaDeltaHEN
Rinex3ObsHeader.stringAntennaDeltaXYZ = _gpstk.cvar.Rinex3ObsHeader_stringAntennaDeltaXYZ
Rinex3ObsHeader.stringAntennaPhaseCtr = _gpstk.cvar.Rinex3ObsHeader_stringAntennaPhaseCtr
Rinex3ObsHeader.stringAntennaBsightXYZ = _gpstk.cvar.Rinex3ObsHeader_stringAntennaBsightXYZ
Rinex3ObsHeader.stringAntennaZeroDirAzi = _gpstk.cvar.Rinex3ObsHeader_stringAntennaZeroDirAzi
Rinex3ObsHeader.stringAntennaZeroDirXYZ = _gpstk.cvar.Rinex3ObsHeader_stringAntennaZeroDirXYZ
Rinex3ObsHeader.stringCenterOfMass = _gpstk.cvar.Rinex3ObsHeader_stringCenterOfMass
Rinex3ObsHeader.stringNumObs = _gpstk.cvar.Rinex3ObsHeader_stringNumObs
Rinex3ObsHeader.stringSystemNumObs = _gpstk.cvar.Rinex3ObsHeader_stringSystemNumObs
Rinex3ObsHeader.stringWaveFact = _gpstk.cvar.Rinex3ObsHeader_stringWaveFact
Rinex3ObsHeader.stringSigStrengthUnit = _gpstk.cvar.Rinex3ObsHeader_stringSigStrengthUnit
Rinex3ObsHeader.stringInterval = _gpstk.cvar.Rinex3ObsHeader_stringInterval
Rinex3ObsHeader.stringFirstTime = _gpstk.cvar.Rinex3ObsHeader_stringFirstTime
Rinex3ObsHeader.stringLastTime = _gpstk.cvar.Rinex3ObsHeader_stringLastTime
Rinex3ObsHeader.stringReceiverOffset = _gpstk.cvar.Rinex3ObsHeader_stringReceiverOffset
Rinex3ObsHeader.stringSystemDCBSapplied = _gpstk.cvar.Rinex3ObsHeader_stringSystemDCBSapplied
Rinex3ObsHeader.stringSystemPCVSapplied = _gpstk.cvar.Rinex3ObsHeader_stringSystemPCVSapplied
Rinex3ObsHeader.stringSystemScaleFac = _gpstk.cvar.Rinex3ObsHeader_stringSystemScaleFac
Rinex3ObsHeader.stringSystemPhaseShift = _gpstk.cvar.Rinex3ObsHeader_stringSystemPhaseShift
Rinex3ObsHeader.stringGlonassSlotFreqNo = _gpstk.cvar.Rinex3ObsHeader_stringGlonassSlotFreqNo
Rinex3ObsHeader.stringGlonassCodPhsBias = _gpstk.cvar.Rinex3ObsHeader_stringGlonassCodPhsBias
Rinex3ObsHeader.stringLeapSeconds = _gpstk.cvar.Rinex3ObsHeader_stringLeapSeconds
Rinex3ObsHeader.stringNumSats = _gpstk.cvar.Rinex3ObsHeader_stringNumSats
Rinex3ObsHeader.stringPrnObs = _gpstk.cvar.Rinex3ObsHeader_stringPrnObs
Rinex3ObsHeader.stringEoH = _gpstk.cvar.Rinex3ObsHeader_stringEoH

class Rinex3ObsData(Rinex3ObsBase):
    """Proxy of C++ gpstk::Rinex3ObsData class"""
    __swig_setmethods__ = {}
    for _s in [Rinex3ObsBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rinex3ObsData, name, value)
    __swig_getmethods__ = {}
    for _s in [Rinex3ObsBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rinex3ObsData, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::Rinex3ObsData self) -> Rinex3ObsData"""
        this = _gpstk.new_Rinex3ObsData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_Rinex3ObsData
    __del__ = lambda self: None
    __swig_setmethods__["time"] = _gpstk.Rinex3ObsData_time_set
    __swig_getmethods__["time"] = _gpstk.Rinex3ObsData_time_get
    if _newclass:
        time = _swig_property(_gpstk.Rinex3ObsData_time_get, _gpstk.Rinex3ObsData_time_set)
    __swig_setmethods__["epochFlag"] = _gpstk.Rinex3ObsData_epochFlag_set
    __swig_getmethods__["epochFlag"] = _gpstk.Rinex3ObsData_epochFlag_get
    if _newclass:
        epochFlag = _swig_property(_gpstk.Rinex3ObsData_epochFlag_get, _gpstk.Rinex3ObsData_epochFlag_set)
    __swig_setmethods__["numSVs"] = _gpstk.Rinex3ObsData_numSVs_set
    __swig_getmethods__["numSVs"] = _gpstk.Rinex3ObsData_numSVs_get
    if _newclass:
        numSVs = _swig_property(_gpstk.Rinex3ObsData_numSVs_get, _gpstk.Rinex3ObsData_numSVs_set)
    __swig_setmethods__["clockOffset"] = _gpstk.Rinex3ObsData_clockOffset_set
    __swig_getmethods__["clockOffset"] = _gpstk.Rinex3ObsData_clockOffset_get
    if _newclass:
        clockOffset = _swig_property(_gpstk.Rinex3ObsData_clockOffset_get, _gpstk.Rinex3ObsData_clockOffset_set)
    __swig_setmethods__["obs"] = _gpstk.Rinex3ObsData_obs_set
    __swig_getmethods__["obs"] = _gpstk.Rinex3ObsData_obs_get
    if _newclass:
        obs = _swig_property(_gpstk.Rinex3ObsData_obs_get, _gpstk.Rinex3ObsData_obs_set)
    __swig_setmethods__["auxHeader"] = _gpstk.Rinex3ObsData_auxHeader_set
    __swig_getmethods__["auxHeader"] = _gpstk.Rinex3ObsData_auxHeader_get
    if _newclass:
        auxHeader = _swig_property(_gpstk.Rinex3ObsData_auxHeader_get, _gpstk.Rinex3ObsData_auxHeader_set)

    def getObs(self, *args):
        """
        getObs(Rinex3ObsData self, SatID sat, int index) -> RinexDatum
        getObs(Rinex3ObsData self, SatID sat, std::string type, Rinex3ObsHeader hdr) -> RinexDatum
        """
        return _gpstk.Rinex3ObsData_getObs(self, *args)


    def __str__(self):
        """__str__(Rinex3ObsData self) -> std::string"""
        return _gpstk.Rinex3ObsData___str__(self)

Rinex3ObsData_swigregister = _gpstk.Rinex3ObsData_swigregister
Rinex3ObsData_swigregister(Rinex3ObsData)

class Rinex3ObsStream(FFTextStream):
    """Proxy of C++ gpstk::Rinex3ObsStream class"""
    __swig_setmethods__ = {}
    for _s in [FFTextStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rinex3ObsStream, name, value)
    __swig_getmethods__ = {}
    for _s in [FFTextStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rinex3ObsStream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::Rinex3ObsStream self) -> Rinex3ObsStream
        __init__(gpstk::Rinex3ObsStream self, char const * fn, std::ios::openmode mode) -> Rinex3ObsStream
        __init__(gpstk::Rinex3ObsStream self, char const * fn) -> Rinex3ObsStream
        __init__(gpstk::Rinex3ObsStream self, std::string const fn, std::ios::openmode mode) -> Rinex3ObsStream
        __init__(gpstk::Rinex3ObsStream self, std::string const fn) -> Rinex3ObsStream
        """
        this = _gpstk.new_Rinex3ObsStream(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_Rinex3ObsStream
    __del__ = lambda self: None

    def open(self, *args):
        """
        open(Rinex3ObsStream self, char const * fn, std::ios::openmode mode)
        open(Rinex3ObsStream self, std::string const & fn, std::ios::openmode mode)
        """
        return _gpstk.Rinex3ObsStream_open(self, *args)

    __swig_setmethods__["headerRead"] = _gpstk.Rinex3ObsStream_headerRead_set
    __swig_getmethods__["headerRead"] = _gpstk.Rinex3ObsStream_headerRead_get
    if _newclass:
        headerRead = _swig_property(_gpstk.Rinex3ObsStream_headerRead_get, _gpstk.Rinex3ObsStream_headerRead_set)
    __swig_setmethods__["header"] = _gpstk.Rinex3ObsStream_header_set
    __swig_getmethods__["header"] = _gpstk.Rinex3ObsStream_header_get
    if _newclass:
        header = _swig_property(_gpstk.Rinex3ObsStream_header_get, _gpstk.Rinex3ObsStream_header_set)
    __swig_setmethods__["timesystem"] = _gpstk.Rinex3ObsStream_timesystem_set
    __swig_getmethods__["timesystem"] = _gpstk.Rinex3ObsStream_timesystem_get
    if _newclass:
        timesystem = _swig_property(_gpstk.Rinex3ObsStream_timesystem_get, _gpstk.Rinex3ObsStream_timesystem_set)

    def IsRinex3ObsStream(i):
        """IsRinex3ObsStream(std::istream & i) -> bool"""
        return _gpstk.Rinex3ObsStream_IsRinex3ObsStream(i)

    if _newclass:
        IsRinex3ObsStream = staticmethod(IsRinex3ObsStream)
    __swig_getmethods__["IsRinex3ObsStream"] = lambda x: IsRinex3ObsStream

    def inRinex3ObsStream(fileName):
        """inRinex3ObsStream(std::string const fileName) -> Rinex3ObsStream"""
        return _gpstk.Rinex3ObsStream_inRinex3ObsStream(fileName)

    if _newclass:
        inRinex3ObsStream = staticmethod(inRinex3ObsStream)
    __swig_getmethods__["inRinex3ObsStream"] = lambda x: inRinex3ObsStream

    def outRinex3ObsStream(fileName):
        """outRinex3ObsStream(std::string const fileName) -> Rinex3ObsStream"""
        return _gpstk.Rinex3ObsStream_outRinex3ObsStream(fileName)

    if _newclass:
        outRinex3ObsStream = staticmethod(outRinex3ObsStream)
    __swig_getmethods__["outRinex3ObsStream"] = lambda x: outRinex3ObsStream

    def _remove(ptr):
        """_remove(Rinex3ObsStream ptr)"""
        return _gpstk.Rinex3ObsStream__remove(ptr)

    if _newclass:
        _remove = staticmethod(_remove)
    __swig_getmethods__["_remove"] = lambda x: _remove

    def readHeader(self):
        """readHeader(Rinex3ObsStream self) -> Rinex3ObsHeader"""
        return _gpstk.Rinex3ObsStream_readHeader(self)


    def readData(self):
        """readData(Rinex3ObsStream self) -> Rinex3ObsData"""
        return _gpstk.Rinex3ObsStream_readData(self)


    def writeHeader(self, head):
        """writeHeader(Rinex3ObsStream self, Rinex3ObsHeader head)"""
        return _gpstk.Rinex3ObsStream_writeHeader(self, head)


    def writeData(self, data):
        """writeData(Rinex3ObsStream self, Rinex3ObsData data)"""
        return _gpstk.Rinex3ObsStream_writeData(self, data)

Rinex3ObsStream_swigregister = _gpstk.Rinex3ObsStream_swigregister
Rinex3ObsStream_swigregister(Rinex3ObsStream)

def Rinex3ObsStream_IsRinex3ObsStream(i):
    """Rinex3ObsStream_IsRinex3ObsStream(std::istream & i) -> bool"""
    return _gpstk.Rinex3ObsStream_IsRinex3ObsStream(i)

def Rinex3ObsStream_inRinex3ObsStream(fileName):
    """Rinex3ObsStream_inRinex3ObsStream(std::string const fileName) -> Rinex3ObsStream"""
    return _gpstk.Rinex3ObsStream_inRinex3ObsStream(fileName)

def Rinex3ObsStream_outRinex3ObsStream(fileName):
    """Rinex3ObsStream_outRinex3ObsStream(std::string const fileName) -> Rinex3ObsStream"""
    return _gpstk.Rinex3ObsStream_outRinex3ObsStream(fileName)

def Rinex3ObsStream__remove(ptr):
    """Rinex3ObsStream__remove(Rinex3ObsStream ptr)"""
    return _gpstk.Rinex3ObsStream__remove(ptr)

class RefClk(_object):
    """Proxy of C++ gpstk::RefClk class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefClk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefClk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _gpstk.RefClk_name_set
    __swig_getmethods__["name"] = _gpstk.RefClk_name_get
    if _newclass:
        name = _swig_property(_gpstk.RefClk_name_get, _gpstk.RefClk_name_set)
    __swig_setmethods__["sigma"] = _gpstk.RefClk_sigma_set
    __swig_getmethods__["sigma"] = _gpstk.RefClk_sigma_get
    if _newclass:
        sigma = _swig_property(_gpstk.RefClk_sigma_get, _gpstk.RefClk_sigma_set)

    def __init__(self):
        """__init__(gpstk::RefClk self) -> RefClk"""
        this = _gpstk.new_RefClk()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_RefClk
    __del__ = lambda self: None
RefClk_swigregister = _gpstk.RefClk_swigregister
RefClk_swigregister(RefClk)

class RefClkRecord(_object):
    """Proxy of C++ gpstk::RefClkRecord class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RefClkRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RefClkRecord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nRef"] = _gpstk.RefClkRecord_nRef_set
    __swig_getmethods__["nRef"] = _gpstk.RefClkRecord_nRef_get
    if _newclass:
        nRef = _swig_property(_gpstk.RefClkRecord_nRef_get, _gpstk.RefClkRecord_nRef_set)
    __swig_setmethods__["clk"] = _gpstk.RefClkRecord_clk_set
    __swig_getmethods__["clk"] = _gpstk.RefClkRecord_clk_get
    if _newclass:
        clk = _swig_property(_gpstk.RefClkRecord_clk_get, _gpstk.RefClkRecord_clk_set)
    __swig_setmethods__["refWin"] = _gpstk.RefClkRecord_refWin_set
    __swig_getmethods__["refWin"] = _gpstk.RefClkRecord_refWin_get
    if _newclass:
        refWin = _swig_property(_gpstk.RefClkRecord_refWin_get, _gpstk.RefClkRecord_refWin_set)

    def __init__(self):
        """__init__(gpstk::RefClkRecord self) -> RefClkRecord"""
        this = _gpstk.new_RefClkRecord()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_RefClkRecord
    __del__ = lambda self: None
RefClkRecord_swigregister = _gpstk.RefClkRecord_swigregister
RefClkRecord_swigregister(RefClkRecord)

class RinexClkType(_object):
    """Proxy of C++ gpstk::RinexClkType class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexClkType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RinexClkType, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _gpstk.RinexClkType_type_set
    __swig_getmethods__["type"] = _gpstk.RinexClkType_type_get
    if _newclass:
        type = _swig_property(_gpstk.RinexClkType_type_get, _gpstk.RinexClkType_type_set)
    __swig_setmethods__["description"] = _gpstk.RinexClkType_description_set
    __swig_getmethods__["description"] = _gpstk.RinexClkType_description_get
    if _newclass:
        description = _swig_property(_gpstk.RinexClkType_description_get, _gpstk.RinexClkType_description_set)

    def __init__(self, *args):
        """
        __init__(gpstk::RinexClkType self) -> RinexClkType
        __init__(gpstk::RinexClkType self, std::string t, std::string d) -> RinexClkType
        """
        this = _gpstk.new_RinexClkType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_RinexClkType
    __del__ = lambda self: None
RinexClkType_swigregister = _gpstk.RinexClkType_swigregister
RinexClkType_swigregister(RinexClkType)

class Rinex3ClockHeader(Rinex3ClockBase):
    """Proxy of C++ gpstk::Rinex3ClockHeader class"""
    __swig_setmethods__ = {}
    for _s in [Rinex3ClockBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rinex3ClockHeader, name, value)
    __swig_getmethods__ = {}
    for _s in [Rinex3ClockBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rinex3ClockHeader, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::Rinex3ClockHeader self) -> Rinex3ClockHeader"""
        this = _gpstk.new_Rinex3ClockHeader()
        try:
            self.this.append(this)
        except:
            self.this = this

    def clear(self):
        """clear(Rinex3ClockHeader self)"""
        return _gpstk.Rinex3ClockHeader_clear(self)

    versionValid = _gpstk.Rinex3ClockHeader_versionValid
    runByValid = _gpstk.Rinex3ClockHeader_runByValid
    commentValid = _gpstk.Rinex3ClockHeader_commentValid
    numObsValid = _gpstk.Rinex3ClockHeader_numObsValid
    timeSystemValid = _gpstk.Rinex3ClockHeader_timeSystemValid
    leapSecondsValid = _gpstk.Rinex3ClockHeader_leapSecondsValid
    sysDCBsValid = _gpstk.Rinex3ClockHeader_sysDCBsValid
    sysPCVsValid = _gpstk.Rinex3ClockHeader_sysPCVsValid
    dataTypesValid = _gpstk.Rinex3ClockHeader_dataTypesValid
    stationNameValid = _gpstk.Rinex3ClockHeader_stationNameValid
    calibrationClkValid = _gpstk.Rinex3ClockHeader_calibrationClkValid
    acNameValid = _gpstk.Rinex3ClockHeader_acNameValid
    numRefClkValid = _gpstk.Rinex3ClockHeader_numRefClkValid
    analysisClkRefValid = _gpstk.Rinex3ClockHeader_analysisClkRefValid
    numStationsValid = _gpstk.Rinex3ClockHeader_numStationsValid
    solnStaNameValid = _gpstk.Rinex3ClockHeader_solnStaNameValid
    numSatsValid = _gpstk.Rinex3ClockHeader_numSatsValid
    prnListValid = _gpstk.Rinex3ClockHeader_prnListValid
    endValid = _gpstk.Rinex3ClockHeader_endValid
    allValid = _gpstk.Rinex3ClockHeader_allValid
    __swig_setmethods__["version"] = _gpstk.Rinex3ClockHeader_version_set
    __swig_getmethods__["version"] = _gpstk.Rinex3ClockHeader_version_get
    if _newclass:
        version = _swig_property(_gpstk.Rinex3ClockHeader_version_get, _gpstk.Rinex3ClockHeader_version_set)
    __swig_setmethods__["fileType"] = _gpstk.Rinex3ClockHeader_fileType_set
    __swig_getmethods__["fileType"] = _gpstk.Rinex3ClockHeader_fileType_get
    if _newclass:
        fileType = _swig_property(_gpstk.Rinex3ClockHeader_fileType_get, _gpstk.Rinex3ClockHeader_fileType_set)
    __swig_setmethods__["system"] = _gpstk.Rinex3ClockHeader_system_set
    __swig_getmethods__["system"] = _gpstk.Rinex3ClockHeader_system_get
    if _newclass:
        system = _swig_property(_gpstk.Rinex3ClockHeader_system_get, _gpstk.Rinex3ClockHeader_system_set)
    __swig_setmethods__["fileProgram"] = _gpstk.Rinex3ClockHeader_fileProgram_set
    __swig_getmethods__["fileProgram"] = _gpstk.Rinex3ClockHeader_fileProgram_get
    if _newclass:
        fileProgram = _swig_property(_gpstk.Rinex3ClockHeader_fileProgram_get, _gpstk.Rinex3ClockHeader_fileProgram_set)
    __swig_setmethods__["fileAgency"] = _gpstk.Rinex3ClockHeader_fileAgency_set
    __swig_getmethods__["fileAgency"] = _gpstk.Rinex3ClockHeader_fileAgency_get
    if _newclass:
        fileAgency = _swig_property(_gpstk.Rinex3ClockHeader_fileAgency_get, _gpstk.Rinex3ClockHeader_fileAgency_set)
    __swig_setmethods__["date"] = _gpstk.Rinex3ClockHeader_date_set
    __swig_getmethods__["date"] = _gpstk.Rinex3ClockHeader_date_get
    if _newclass:
        date = _swig_property(_gpstk.Rinex3ClockHeader_date_get, _gpstk.Rinex3ClockHeader_date_set)
    __swig_setmethods__["commentList"] = _gpstk.Rinex3ClockHeader_commentList_set
    __swig_getmethods__["commentList"] = _gpstk.Rinex3ClockHeader_commentList_get
    if _newclass:
        commentList = _swig_property(_gpstk.Rinex3ClockHeader_commentList_get, _gpstk.Rinex3ClockHeader_commentList_set)
    __swig_setmethods__["numObsTyp"] = _gpstk.Rinex3ClockHeader_numObsTyp_set
    __swig_getmethods__["numObsTyp"] = _gpstk.Rinex3ClockHeader_numObsTyp_get
    if _newclass:
        numObsTyp = _swig_property(_gpstk.Rinex3ClockHeader_numObsTyp_get, _gpstk.Rinex3ClockHeader_numObsTyp_set)
    __swig_setmethods__["obsTypeList"] = _gpstk.Rinex3ClockHeader_obsTypeList_set
    __swig_getmethods__["obsTypeList"] = _gpstk.Rinex3ClockHeader_obsTypeList_get
    if _newclass:
        obsTypeList = _swig_property(_gpstk.Rinex3ClockHeader_obsTypeList_get, _gpstk.Rinex3ClockHeader_obsTypeList_set)
    __swig_setmethods__["timeSystem"] = _gpstk.Rinex3ClockHeader_timeSystem_set
    __swig_getmethods__["timeSystem"] = _gpstk.Rinex3ClockHeader_timeSystem_get
    if _newclass:
        timeSystem = _swig_property(_gpstk.Rinex3ClockHeader_timeSystem_get, _gpstk.Rinex3ClockHeader_timeSystem_set)
    __swig_setmethods__["leapSeconds"] = _gpstk.Rinex3ClockHeader_leapSeconds_set
    __swig_getmethods__["leapSeconds"] = _gpstk.Rinex3ClockHeader_leapSeconds_get
    if _newclass:
        leapSeconds = _swig_property(_gpstk.Rinex3ClockHeader_leapSeconds_get, _gpstk.Rinex3ClockHeader_leapSeconds_set)
    __swig_setmethods__["numTyp"] = _gpstk.Rinex3ClockHeader_numTyp_set
    __swig_getmethods__["numTyp"] = _gpstk.Rinex3ClockHeader_numTyp_get
    if _newclass:
        numTyp = _swig_property(_gpstk.Rinex3ClockHeader_numTyp_get, _gpstk.Rinex3ClockHeader_numTyp_set)
    __swig_setmethods__["dataTypeList"] = _gpstk.Rinex3ClockHeader_dataTypeList_set
    __swig_getmethods__["dataTypeList"] = _gpstk.Rinex3ClockHeader_dataTypeList_get
    if _newclass:
        dataTypeList = _swig_property(_gpstk.Rinex3ClockHeader_dataTypeList_get, _gpstk.Rinex3ClockHeader_dataTypeList_set)
    __swig_setmethods__["clk0Name"] = _gpstk.Rinex3ClockHeader_clk0Name_set
    __swig_getmethods__["clk0Name"] = _gpstk.Rinex3ClockHeader_clk0Name_get
    if _newclass:
        clk0Name = _swig_property(_gpstk.Rinex3ClockHeader_clk0Name_get, _gpstk.Rinex3ClockHeader_clk0Name_set)
    __swig_setmethods__["calName"] = _gpstk.Rinex3ClockHeader_calName_set
    __swig_getmethods__["calName"] = _gpstk.Rinex3ClockHeader_calName_get
    if _newclass:
        calName = _swig_property(_gpstk.Rinex3ClockHeader_calName_get, _gpstk.Rinex3ClockHeader_calName_set)
    __swig_setmethods__["ac"] = _gpstk.Rinex3ClockHeader_ac_set
    __swig_getmethods__["ac"] = _gpstk.Rinex3ClockHeader_ac_get
    if _newclass:
        ac = _swig_property(_gpstk.Rinex3ClockHeader_ac_get, _gpstk.Rinex3ClockHeader_ac_set)
    __swig_setmethods__["acName"] = _gpstk.Rinex3ClockHeader_acName_set
    __swig_getmethods__["acName"] = _gpstk.Rinex3ClockHeader_acName_get
    if _newclass:
        acName = _swig_property(_gpstk.Rinex3ClockHeader_acName_get, _gpstk.Rinex3ClockHeader_acName_set)
    __swig_setmethods__["timeFirst"] = _gpstk.Rinex3ClockHeader_timeFirst_set
    __swig_getmethods__["timeFirst"] = _gpstk.Rinex3ClockHeader_timeFirst_get
    if _newclass:
        timeFirst = _swig_property(_gpstk.Rinex3ClockHeader_timeFirst_get, _gpstk.Rinex3ClockHeader_timeFirst_set)
    __swig_setmethods__["refClkList"] = _gpstk.Rinex3ClockHeader_refClkList_set
    __swig_getmethods__["refClkList"] = _gpstk.Rinex3ClockHeader_refClkList_get
    if _newclass:
        refClkList = _swig_property(_gpstk.Rinex3ClockHeader_refClkList_get, _gpstk.Rinex3ClockHeader_refClkList_set)
    __swig_setmethods__["trfName"] = _gpstk.Rinex3ClockHeader_trfName_set
    __swig_getmethods__["trfName"] = _gpstk.Rinex3ClockHeader_trfName_get
    if _newclass:
        trfName = _swig_property(_gpstk.Rinex3ClockHeader_trfName_get, _gpstk.Rinex3ClockHeader_trfName_set)
    __swig_setmethods__["numSta"] = _gpstk.Rinex3ClockHeader_numSta_set
    __swig_getmethods__["numSta"] = _gpstk.Rinex3ClockHeader_numSta_get
    if _newclass:
        numSta = _swig_property(_gpstk.Rinex3ClockHeader_numSta_get, _gpstk.Rinex3ClockHeader_numSta_set)
    __swig_setmethods__["numSVs"] = _gpstk.Rinex3ClockHeader_numSVs_set
    __swig_getmethods__["numSVs"] = _gpstk.Rinex3ClockHeader_numSVs_get
    if _newclass:
        numSVs = _swig_property(_gpstk.Rinex3ClockHeader_numSVs_get, _gpstk.Rinex3ClockHeader_numSVs_set)
    __swig_setmethods__["clkNameList"] = _gpstk.Rinex3ClockHeader_clkNameList_set
    __swig_getmethods__["clkNameList"] = _gpstk.Rinex3ClockHeader_clkNameList_get
    if _newclass:
        clkNameList = _swig_property(_gpstk.Rinex3ClockHeader_clkNameList_get, _gpstk.Rinex3ClockHeader_clkNameList_set)
    __swig_setmethods__["staCoordList"] = _gpstk.Rinex3ClockHeader_staCoordList_set
    __swig_getmethods__["staCoordList"] = _gpstk.Rinex3ClockHeader_staCoordList_get
    if _newclass:
        staCoordList = _swig_property(_gpstk.Rinex3ClockHeader_staCoordList_get, _gpstk.Rinex3ClockHeader_staCoordList_set)
    __swig_setmethods__["valid"] = _gpstk.Rinex3ClockHeader_valid_set
    __swig_getmethods__["valid"] = _gpstk.Rinex3ClockHeader_valid_get
    if _newclass:
        valid = _swig_property(_gpstk.Rinex3ClockHeader_valid_get, _gpstk.Rinex3ClockHeader_valid_set)
    __swig_setmethods__["isPGM"] = _gpstk.Rinex3ClockHeader_isPGM_set
    __swig_getmethods__["isPGM"] = _gpstk.Rinex3ClockHeader_isPGM_get
    if _newclass:
        isPGM = _swig_property(_gpstk.Rinex3ClockHeader_isPGM_get, _gpstk.Rinex3ClockHeader_isPGM_set)
    __swig_setmethods__["isAC"] = _gpstk.Rinex3ClockHeader_isAC_set
    __swig_getmethods__["isAC"] = _gpstk.Rinex3ClockHeader_isAC_get
    if _newclass:
        isAC = _swig_property(_gpstk.Rinex3ClockHeader_isAC_get, _gpstk.Rinex3ClockHeader_isAC_set)
    __swig_destroy__ = _gpstk.delete_Rinex3ClockHeader
    __del__ = lambda self: None

    def isHeader(self):
        """isHeader(Rinex3ClockHeader self) -> bool"""
        return _gpstk.Rinex3ClockHeader_isHeader(self)


    def ParseHeaderRecord(self, line):
        """ParseHeaderRecord(Rinex3ClockHeader self, std::string & line)"""
        return _gpstk.Rinex3ClockHeader_ParseHeaderRecord(self, line)


    def isValid(self):
        """isValid(Rinex3ClockHeader self) -> bool"""
        return _gpstk.Rinex3ClockHeader_isValid(self)


    def __str__(self):
        """__str__(Rinex3ClockHeader self) -> std::string"""
        return _gpstk.Rinex3ClockHeader___str__(self)

Rinex3ClockHeader_swigregister = _gpstk.Rinex3ClockHeader_swigregister
Rinex3ClockHeader_swigregister(Rinex3ClockHeader)
Rinex3ClockHeader.versionString = _gpstk.cvar.Rinex3ClockHeader_versionString
Rinex3ClockHeader.runByString = _gpstk.cvar.Rinex3ClockHeader_runByString
Rinex3ClockHeader.commentString = _gpstk.cvar.Rinex3ClockHeader_commentString
Rinex3ClockHeader.numObsString = _gpstk.cvar.Rinex3ClockHeader_numObsString
Rinex3ClockHeader.timeSystemString = _gpstk.cvar.Rinex3ClockHeader_timeSystemString
Rinex3ClockHeader.leapSecondsString = _gpstk.cvar.Rinex3ClockHeader_leapSecondsString
Rinex3ClockHeader.sysDCBString = _gpstk.cvar.Rinex3ClockHeader_sysDCBString
Rinex3ClockHeader.sysPCVString = _gpstk.cvar.Rinex3ClockHeader_sysPCVString
Rinex3ClockHeader.dataTypesString = _gpstk.cvar.Rinex3ClockHeader_dataTypesString
Rinex3ClockHeader.stationNameString = _gpstk.cvar.Rinex3ClockHeader_stationNameString
Rinex3ClockHeader.calibrationClkString = _gpstk.cvar.Rinex3ClockHeader_calibrationClkString
Rinex3ClockHeader.acNameString = _gpstk.cvar.Rinex3ClockHeader_acNameString
Rinex3ClockHeader.numRefClkString = _gpstk.cvar.Rinex3ClockHeader_numRefClkString
Rinex3ClockHeader.analysisClkRefString = _gpstk.cvar.Rinex3ClockHeader_analysisClkRefString
Rinex3ClockHeader.numStationsString = _gpstk.cvar.Rinex3ClockHeader_numStationsString
Rinex3ClockHeader.solnStaNameString = _gpstk.cvar.Rinex3ClockHeader_solnStaNameString
Rinex3ClockHeader.numSatsString = _gpstk.cvar.Rinex3ClockHeader_numSatsString
Rinex3ClockHeader.prnListString = _gpstk.cvar.Rinex3ClockHeader_prnListString
Rinex3ClockHeader.endOfHeader = _gpstk.cvar.Rinex3ClockHeader_endOfHeader
Rinex3ClockHeader.UN = _gpstk.cvar.Rinex3ClockHeader_UN
Rinex3ClockHeader.AR = _gpstk.cvar.Rinex3ClockHeader_AR
Rinex3ClockHeader.AS = _gpstk.cvar.Rinex3ClockHeader_AS
Rinex3ClockHeader.CR = _gpstk.cvar.Rinex3ClockHeader_CR
Rinex3ClockHeader.DR = _gpstk.cvar.Rinex3ClockHeader_DR
Rinex3ClockHeader.MS = _gpstk.cvar.Rinex3ClockHeader_MS

class Rinex3ClockData(Rinex3ClockBase):
    """Proxy of C++ gpstk::Rinex3ClockData class"""
    __swig_setmethods__ = {}
    for _s in [Rinex3ClockBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rinex3ClockData, name, value)
    __swig_getmethods__ = {}
    for _s in [Rinex3ClockBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rinex3ClockData, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::Rinex3ClockData self) -> Rinex3ClockData"""
        this = _gpstk.new_Rinex3ClockData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_Rinex3ClockData
    __del__ = lambda self: None
    __swig_setmethods__["type"] = _gpstk.Rinex3ClockData_type_set
    __swig_getmethods__["type"] = _gpstk.Rinex3ClockData_type_get
    if _newclass:
        type = _swig_property(_gpstk.Rinex3ClockData_type_get, _gpstk.Rinex3ClockData_type_set)
    __swig_setmethods__["name"] = _gpstk.Rinex3ClockData_name_set
    __swig_getmethods__["name"] = _gpstk.Rinex3ClockData_name_get
    if _newclass:
        name = _swig_property(_gpstk.Rinex3ClockData_name_get, _gpstk.Rinex3ClockData_name_set)
    __swig_setmethods__["time"] = _gpstk.Rinex3ClockData_time_set
    __swig_getmethods__["time"] = _gpstk.Rinex3ClockData_time_get
    if _newclass:
        time = _swig_property(_gpstk.Rinex3ClockData_time_get, _gpstk.Rinex3ClockData_time_set)
    __swig_setmethods__["numVal"] = _gpstk.Rinex3ClockData_numVal_set
    __swig_getmethods__["numVal"] = _gpstk.Rinex3ClockData_numVal_get
    if _newclass:
        numVal = _swig_property(_gpstk.Rinex3ClockData_numVal_get, _gpstk.Rinex3ClockData_numVal_set)
    __swig_setmethods__["data"] = _gpstk.Rinex3ClockData_data_set
    __swig_getmethods__["data"] = _gpstk.Rinex3ClockData_data_get
    if _newclass:
        data = _swig_property(_gpstk.Rinex3ClockData_data_get, _gpstk.Rinex3ClockData_data_set)

    def isData(self):
        """isData(Rinex3ClockData self) -> bool"""
        return _gpstk.Rinex3ClockData_isData(self)


    def __str__(self):
        """__str__(Rinex3ClockData self) -> std::string"""
        return _gpstk.Rinex3ClockData___str__(self)

Rinex3ClockData_swigregister = _gpstk.Rinex3ClockData_swigregister
Rinex3ClockData_swigregister(Rinex3ClockData)

class Rinex3ClockStream(FFTextStream):
    """Proxy of C++ gpstk::Rinex3ClockStream class"""
    __swig_setmethods__ = {}
    for _s in [FFTextStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rinex3ClockStream, name, value)
    __swig_getmethods__ = {}
    for _s in [FFTextStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rinex3ClockStream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::Rinex3ClockStream self) -> Rinex3ClockStream
        __init__(gpstk::Rinex3ClockStream self, char const * fn, std::ios::openmode mode) -> Rinex3ClockStream
        __init__(gpstk::Rinex3ClockStream self, char const * fn) -> Rinex3ClockStream
        __init__(gpstk::Rinex3ClockStream self, std::string const fn, std::ios::openmode mode) -> Rinex3ClockStream
        __init__(gpstk::Rinex3ClockStream self, std::string const fn) -> Rinex3ClockStream
        """
        this = _gpstk.new_Rinex3ClockStream(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_Rinex3ClockStream
    __del__ = lambda self: None

    def open(self, *args):
        """
        open(Rinex3ClockStream self, char const * fn, std::ios::openmode mode)
        open(Rinex3ClockStream self, std::string const & fn, std::ios::openmode mode)
        """
        return _gpstk.Rinex3ClockStream_open(self, *args)

    __swig_setmethods__["headerRead"] = _gpstk.Rinex3ClockStream_headerRead_set
    __swig_getmethods__["headerRead"] = _gpstk.Rinex3ClockStream_headerRead_get
    if _newclass:
        headerRead = _swig_property(_gpstk.Rinex3ClockStream_headerRead_get, _gpstk.Rinex3ClockStream_headerRead_set)
    __swig_setmethods__["header"] = _gpstk.Rinex3ClockStream_header_set
    __swig_getmethods__["header"] = _gpstk.Rinex3ClockStream_header_get
    if _newclass:
        header = _swig_property(_gpstk.Rinex3ClockStream_header_get, _gpstk.Rinex3ClockStream_header_set)

    def inRinex3ClockStream(fileName):
        """inRinex3ClockStream(std::string const fileName) -> Rinex3ClockStream"""
        return _gpstk.Rinex3ClockStream_inRinex3ClockStream(fileName)

    if _newclass:
        inRinex3ClockStream = staticmethod(inRinex3ClockStream)
    __swig_getmethods__["inRinex3ClockStream"] = lambda x: inRinex3ClockStream

    def outRinex3ClockStream(fileName):
        """outRinex3ClockStream(std::string const fileName) -> Rinex3ClockStream"""
        return _gpstk.Rinex3ClockStream_outRinex3ClockStream(fileName)

    if _newclass:
        outRinex3ClockStream = staticmethod(outRinex3ClockStream)
    __swig_getmethods__["outRinex3ClockStream"] = lambda x: outRinex3ClockStream

    def _remove(ptr):
        """_remove(Rinex3ClockStream ptr)"""
        return _gpstk.Rinex3ClockStream__remove(ptr)

    if _newclass:
        _remove = staticmethod(_remove)
    __swig_getmethods__["_remove"] = lambda x: _remove

    def readHeader(self):
        """readHeader(Rinex3ClockStream self) -> Rinex3ClockHeader"""
        return _gpstk.Rinex3ClockStream_readHeader(self)


    def readData(self):
        """readData(Rinex3ClockStream self) -> Rinex3ClockData"""
        return _gpstk.Rinex3ClockStream_readData(self)


    def writeHeader(self, head):
        """writeHeader(Rinex3ClockStream self, Rinex3ClockHeader head)"""
        return _gpstk.Rinex3ClockStream_writeHeader(self, head)


    def writeData(self, data):
        """writeData(Rinex3ClockStream self, Rinex3ClockData data)"""
        return _gpstk.Rinex3ClockStream_writeData(self, data)

Rinex3ClockStream_swigregister = _gpstk.Rinex3ClockStream_swigregister
Rinex3ClockStream_swigregister(Rinex3ClockStream)

def Rinex3ClockStream_inRinex3ClockStream(fileName):
    """Rinex3ClockStream_inRinex3ClockStream(std::string const fileName) -> Rinex3ClockStream"""
    return _gpstk.Rinex3ClockStream_inRinex3ClockStream(fileName)

def Rinex3ClockStream_outRinex3ClockStream(fileName):
    """Rinex3ClockStream_outRinex3ClockStream(std::string const fileName) -> Rinex3ClockStream"""
    return _gpstk.Rinex3ClockStream_outRinex3ClockStream(fileName)

def Rinex3ClockStream__remove(ptr):
    """Rinex3ClockStream__remove(Rinex3ClockStream ptr)"""
    return _gpstk.Rinex3ClockStream__remove(ptr)

class Rinex3EphemerisStore(XvtStore_SatID):
    """Proxy of C++ gpstk::Rinex3EphemerisStore class"""
    __swig_setmethods__ = {}
    for _s in [XvtStore_SatID]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rinex3EphemerisStore, name, value)
    __swig_getmethods__ = {}
    for _s in [XvtStore_SatID]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Rinex3EphemerisStore, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Rhead"] = _gpstk.Rinex3EphemerisStore_Rhead_set
    __swig_getmethods__["Rhead"] = _gpstk.Rinex3EphemerisStore_Rhead_get
    if _newclass:
        Rhead = _swig_property(_gpstk.Rinex3EphemerisStore_Rhead_get, _gpstk.Rinex3EphemerisStore_Rhead_set)
    __swig_setmethods__["Rdata"] = _gpstk.Rinex3EphemerisStore_Rdata_set
    __swig_getmethods__["Rdata"] = _gpstk.Rinex3EphemerisStore_Rdata_get
    if _newclass:
        Rdata = _swig_property(_gpstk.Rinex3EphemerisStore_Rdata_get, _gpstk.Rinex3EphemerisStore_Rdata_set)
    __swig_setmethods__["mapTimeCorr"] = _gpstk.Rinex3EphemerisStore_mapTimeCorr_set
    __swig_getmethods__["mapTimeCorr"] = _gpstk.Rinex3EphemerisStore_mapTimeCorr_get
    if _newclass:
        mapTimeCorr = _swig_property(_gpstk.Rinex3EphemerisStore_mapTimeCorr_get, _gpstk.Rinex3EphemerisStore_mapTimeCorr_set)
    __swig_setmethods__["what"] = _gpstk.Rinex3EphemerisStore_what_set
    __swig_getmethods__["what"] = _gpstk.Rinex3EphemerisStore_what_get
    if _newclass:
        what = _swig_property(_gpstk.Rinex3EphemerisStore_what_get, _gpstk.Rinex3EphemerisStore_what_set)

    def __init__(self):
        """__init__(gpstk::Rinex3EphemerisStore self) -> Rinex3EphemerisStore"""
        this = _gpstk.new_Rinex3EphemerisStore()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_Rinex3EphemerisStore
    __del__ = lambda self: None

    def getXvt(self, sat, ttag):
        """getXvt(Rinex3EphemerisStore self, SatID sat, CommonTime ttag) -> Xvt"""
        return _gpstk.Rinex3EphemerisStore_getXvt(self, sat, ttag)


    def edit(self, *args):
        """
        edit(Rinex3EphemerisStore self, CommonTime tmin, CommonTime tmax)
        edit(Rinex3EphemerisStore self, CommonTime tmin)
        """
        return _gpstk.Rinex3EphemerisStore_edit(self, *args)


    def clear(self):
        """clear(Rinex3EphemerisStore self)"""
        return _gpstk.Rinex3EphemerisStore_clear(self)


    def getTimeSystem(self):
        """getTimeSystem(Rinex3EphemerisStore self) -> TimeSystem"""
        return _gpstk.Rinex3EphemerisStore_getTimeSystem(self)


    def isPresent(self, sat):
        """isPresent(Rinex3EphemerisStore self, SatID sat) -> bool"""
        return _gpstk.Rinex3EphemerisStore_isPresent(self, sat)


    def hasVelocity(self):
        """hasVelocity(Rinex3EphemerisStore self) -> bool"""
        return _gpstk.Rinex3EphemerisStore_hasVelocity(self)


    def getInitialTime(self, *args):
        """
        getInitialTime(Rinex3EphemerisStore self) -> CommonTime
        getInitialTime(Rinex3EphemerisStore self, SatID sat) -> CommonTime
        """
        return _gpstk.Rinex3EphemerisStore_getInitialTime(self, *args)


    def getFinalTime(self, *args):
        """
        getFinalTime(Rinex3EphemerisStore self) -> CommonTime
        getFinalTime(Rinex3EphemerisStore self, SatID sat) -> CommonTime
        """
        return _gpstk.Rinex3EphemerisStore_getFinalTime(self, *args)


    def addEphemeris(self, Rdata):
        """addEphemeris(Rinex3EphemerisStore self, Rinex3NavData Rdata) -> bool"""
        return _gpstk.Rinex3EphemerisStore_addEphemeris(self, Rdata)


    def addFile(self, filename, head):
        """addFile(Rinex3EphemerisStore self, std::string const & filename, Rinex3NavHeader head)"""
        return _gpstk.Rinex3EphemerisStore_addFile(self, filename, head)


    def loadFile(self, *args):
        """
        loadFile(Rinex3EphemerisStore self, std::string const & filename, bool dump=False, std::ostream & s) -> int
        loadFile(Rinex3EphemerisStore self, std::string const & filename, bool dump=False) -> int
        loadFile(Rinex3EphemerisStore self, std::string const & filename) -> int
        """
        return _gpstk.Rinex3EphemerisStore_loadFile(self, *args)


    def addToList(self, *args):
        """
        addToList(Rinex3EphemerisStore self, std::list< gpstk::Rinex3NavData,std::allocator< gpstk::Rinex3NavData > > & theList, SatID sat) -> int
        addToList(Rinex3EphemerisStore self, std::list< gpstk::Rinex3NavData,std::allocator< gpstk::Rinex3NavData > > & theList) -> int
        """
        return _gpstk.Rinex3EphemerisStore_addToList(self, *args)


    def size(self, *args):
        """
        size(Rinex3EphemerisStore self, SatID sat) -> int
        size(Rinex3EphemerisStore self, gpstk::SatID::SatelliteSystem const sys) -> int
        size(Rinex3EphemerisStore self) -> int
        """
        return _gpstk.Rinex3EphemerisStore_size(self, *args)


    def addTimeCorr(self, tsc):
        """addTimeCorr(Rinex3EphemerisStore self, TimeSystemCorrection tsc) -> bool"""
        return _gpstk.Rinex3EphemerisStore_addTimeCorr(self, tsc)


    def delTimeCorr(self, typestr):
        """delTimeCorr(Rinex3EphemerisStore self, std::string const & typestr) -> bool"""
        return _gpstk.Rinex3EphemerisStore_delTimeCorr(self, typestr)


    def expandTimeCorrMap(self):
        """expandTimeCorrMap(Rinex3EphemerisStore self) -> int"""
        return _gpstk.Rinex3EphemerisStore_expandTimeCorrMap(self)


    def correctTimeSystem(self, ttag, targetSys):
        """correctTimeSystem(Rinex3EphemerisStore self, CommonTime ttag, TimeSystem targetSys) -> CommonTime"""
        return _gpstk.Rinex3EphemerisStore_correctTimeSystem(self, ttag, targetSys)


    def dumpTimeSystemCorrection(self, fromSys, toSys):
        """dumpTimeSystemCorrection(Rinex3EphemerisStore self, TimeSystem fromSys, TimeSystem toSys) -> std::string"""
        return _gpstk.Rinex3EphemerisStore_dumpTimeSystemCorrection(self, fromSys, toSys)


    def getGLOStep(self):
        """getGLOStep(Rinex3EphemerisStore self) -> double"""
        return _gpstk.Rinex3EphemerisStore_getGLOStep(self)


    def setGLOStep(self, step):
        """setGLOStep(Rinex3EphemerisStore self, double step)"""
        return _gpstk.Rinex3EphemerisStore_setGLOStep(self, step)


    def getOnlyHealthyFlag(self):
        """getOnlyHealthyFlag(Rinex3EphemerisStore self) -> bool"""
        return _gpstk.Rinex3EphemerisStore_getOnlyHealthyFlag(self)


    def setOnlyHealthyFlag(self, flag):
        """setOnlyHealthyFlag(Rinex3EphemerisStore self, bool flag)"""
        return _gpstk.Rinex3EphemerisStore_setOnlyHealthyFlag(self, flag)


    def SearchNear(self):
        """SearchNear(Rinex3EphemerisStore self)"""
        return _gpstk.Rinex3EphemerisStore_SearchNear(self)


    def SearchUser(self):
        """SearchUser(Rinex3EphemerisStore self)"""
        return _gpstk.Rinex3EphemerisStore_SearchUser(self)


    def __str__(self):
        """__str__(Rinex3EphemerisStore self) -> std::string"""
        return _gpstk.Rinex3EphemerisStore___str__(self)

Rinex3EphemerisStore_swigregister = _gpstk.Rinex3EphemerisStore_swigregister
Rinex3EphemerisStore_swigregister(Rinex3EphemerisStore)

class OrbitEphStore(XvtStore_SatID):
    """Proxy of C++ gpstk::OrbitEphStore class"""
    __swig_setmethods__ = {}
    for _s in [XvtStore_SatID]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OrbitEphStore, name, value)
    __swig_getmethods__ = {}
    for _s in [XvtStore_SatID]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OrbitEphStore, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::OrbitEphStore self) -> OrbitEphStore"""
        this = _gpstk.new_OrbitEphStore()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_OrbitEphStore
    __del__ = lambda self: None

    def getName(self):
        """getName(OrbitEphStore self) -> std::string"""
        return _gpstk.OrbitEphStore_getName(self)


    def getXvt(self, id, t):
        """getXvt(OrbitEphStore self, SatID id, CommonTime t) -> Xvt"""
        return _gpstk.OrbitEphStore_getXvt(self, id, t)


    def edit(self, *args):
        """
        edit(OrbitEphStore self, CommonTime tmin, CommonTime tmax)
        edit(OrbitEphStore self, CommonTime tmin)
        """
        return _gpstk.OrbitEphStore_edit(self, *args)


    def clear(self):
        """clear(OrbitEphStore self)"""
        return _gpstk.OrbitEphStore_clear(self)


    def getInitialTime(self, *args):
        """
        getInitialTime(OrbitEphStore self) -> CommonTime
        getInitialTime(OrbitEphStore self, SatID sat) -> CommonTime
        """
        return _gpstk.OrbitEphStore_getInitialTime(self, *args)


    def getFinalTime(self, *args):
        """
        getFinalTime(OrbitEphStore self) -> CommonTime
        getFinalTime(OrbitEphStore self, SatID sat) -> CommonTime
        """
        return _gpstk.OrbitEphStore_getFinalTime(self, *args)


    def hasVelocity(self):
        """hasVelocity(OrbitEphStore self) -> bool"""
        return _gpstk.OrbitEphStore_hasVelocity(self)


    def velocityIsPresent(self):
        """velocityIsPresent(OrbitEphStore self) -> bool"""
        return _gpstk.OrbitEphStore_velocityIsPresent(self)


    def getTimeSystem(self):
        """getTimeSystem(OrbitEphStore self) -> TimeSystem"""
        return _gpstk.OrbitEphStore_getTimeSystem(self)


    def size(self, *args):
        """
        size(OrbitEphStore self) -> unsigned int
        size(OrbitEphStore self, SatID sat) -> unsigned int
        """
        return _gpstk.OrbitEphStore_size(self, *args)


    def addEphemeris(self, eph):
        """addEphemeris(OrbitEphStore self, OrbitEph eph) -> OrbitEph"""
        return _gpstk.OrbitEphStore_addEphemeris(self, eph)


    def isPresent(self, *args):
        """
        isPresent(OrbitEphStore self, SatID sat) -> bool
        isPresent(OrbitEphStore self, SatID sat, CommonTime t) -> bool
        """
        return _gpstk.OrbitEphStore_isPresent(self, *args)


    def findUserOrbitEph(self, sat, t):
        """findUserOrbitEph(OrbitEphStore self, SatID sat, CommonTime t) -> OrbitEph"""
        return _gpstk.OrbitEphStore_findUserOrbitEph(self, sat, t)


    def findNearOrbitEph(self, sat, t):
        """findNearOrbitEph(OrbitEphStore self, SatID sat, CommonTime t) -> OrbitEph"""
        return _gpstk.OrbitEphStore_findNearOrbitEph(self, sat, t)


    def findOrbitEph(self, sat, t):
        """findOrbitEph(OrbitEphStore self, SatID sat, CommonTime t) -> OrbitEph"""
        return _gpstk.OrbitEphStore_findOrbitEph(self, sat, t)


    def addToList(self, *args):
        """
        addToList(OrbitEphStore self, std::list< gpstk::OrbitEph *,std::allocator< gpstk::OrbitEph * > > & v, SatID sat) -> int
        addToList(OrbitEphStore self, std::list< gpstk::OrbitEph *,std::allocator< gpstk::OrbitEph * > > & v) -> int
        """
        return _gpstk.OrbitEphStore_addToList(self, *args)


    def SearchNear(self):
        """SearchNear(OrbitEphStore self)"""
        return _gpstk.OrbitEphStore_SearchNear(self)


    def SearchUser(self):
        """SearchUser(OrbitEphStore self)"""
        return _gpstk.OrbitEphStore_SearchUser(self)


    def getOnlyHealthyFlag(self):
        """getOnlyHealthyFlag(OrbitEphStore self) -> bool"""
        return _gpstk.OrbitEphStore_getOnlyHealthyFlag(self)


    def setOnlyHealthyFlag(self, flag):
        """setOnlyHealthyFlag(OrbitEphStore self, bool flag)"""
        return _gpstk.OrbitEphStore_setOnlyHealthyFlag(self, flag)


    def getSatHealth(self, sat, t):
        """getSatHealth(OrbitEphStore self, SatID sat, CommonTime t) -> bool"""
        return _gpstk.OrbitEphStore_getSatHealth(self, sat, t)


    def getTimeOrbitEphMap(self, sat):
        """getTimeOrbitEphMap(OrbitEphStore self, SatID sat) -> gpstk::OrbitEphStore::TimeOrbitEphTable const &"""
        return _gpstk.OrbitEphStore_getTimeOrbitEphMap(self, sat)

    __swig_setmethods__["message"] = _gpstk.OrbitEphStore_message_set
    __swig_getmethods__["message"] = _gpstk.OrbitEphStore_message_get
    if _newclass:
        message = _swig_property(_gpstk.OrbitEphStore_message_get, _gpstk.OrbitEphStore_message_set)
OrbitEphStore_swigregister = _gpstk.OrbitEphStore_swigregister
OrbitEphStore_swigregister(OrbitEphStore)
OrbitEphStore.fmt = _gpstk.cvar.OrbitEphStore_fmt

class BDSEphemerisStore(OrbitEphStore):
    """Proxy of C++ gpstk::BDSEphemerisStore class"""
    __swig_setmethods__ = {}
    for _s in [OrbitEphStore]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BDSEphemerisStore, name, value)
    __swig_getmethods__ = {}
    for _s in [OrbitEphStore]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BDSEphemerisStore, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::BDSEphemerisStore self) -> BDSEphemerisStore"""
        this = _gpstk.new_BDSEphemerisStore()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_BDSEphemerisStore
    __del__ = lambda self: None

    def getName(self):
        """getName(BDSEphemerisStore self) -> std::string"""
        return _gpstk.BDSEphemerisStore_getName(self)


    def rationalize(self):
        """rationalize(BDSEphemerisStore self)"""
        return _gpstk.BDSEphemerisStore_rationalize(self)


    def addEphemeris(self, gpseph):
        """addEphemeris(BDSEphemerisStore self, BDSEphemeris gpseph) -> BDSEphemeris"""
        return _gpstk.BDSEphemerisStore_addEphemeris(self, gpseph)


    def findEphemeris(self, sat, t):
        """findEphemeris(BDSEphemerisStore self, SatID sat, CommonTime t) -> BDSEphemeris"""
        return _gpstk.BDSEphemerisStore_findEphemeris(self, sat, t)


    def addToList(self, *args):
        """
        addToList(BDSEphemerisStore self, std::list< gpstk::BDSEphemeris,std::allocator< gpstk::BDSEphemeris > > & bdslist, SatID sat) -> int
        addToList(BDSEphemerisStore self, std::list< gpstk::BDSEphemeris,std::allocator< gpstk::BDSEphemeris > > & bdslist) -> int
        """
        return _gpstk.BDSEphemerisStore_addToList(self, *args)

BDSEphemerisStore_swigregister = _gpstk.BDSEphemerisStore_swigregister
BDSEphemerisStore_swigregister(BDSEphemerisStore)

class GalEphemerisStore(OrbitEphStore):
    """Proxy of C++ gpstk::GalEphemerisStore class"""
    __swig_setmethods__ = {}
    for _s in [OrbitEphStore]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GalEphemerisStore, name, value)
    __swig_getmethods__ = {}
    for _s in [OrbitEphStore]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GalEphemerisStore, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::GalEphemerisStore self) -> GalEphemerisStore"""
        this = _gpstk.new_GalEphemerisStore()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_GalEphemerisStore
    __del__ = lambda self: None

    def getName(self):
        """getName(GalEphemerisStore self) -> std::string"""
        return _gpstk.GalEphemerisStore_getName(self)


    def rationalize(self):
        """rationalize(GalEphemerisStore self)"""
        return _gpstk.GalEphemerisStore_rationalize(self)


    def addEphemeris(self, galeph):
        """addEphemeris(GalEphemerisStore self, GalEphemeris galeph) -> GalEphemeris"""
        return _gpstk.GalEphemerisStore_addEphemeris(self, galeph)


    def findEphemeris(self, sat, t):
        """findEphemeris(GalEphemerisStore self, SatID sat, CommonTime t) -> GalEphemeris"""
        return _gpstk.GalEphemerisStore_findEphemeris(self, sat, t)


    def addToList(self, *args):
        """
        addToList(GalEphemerisStore self, std::list< gpstk::GalEphemeris,std::allocator< gpstk::GalEphemeris > > & gallist, SatID sat) -> int
        addToList(GalEphemerisStore self, std::list< gpstk::GalEphemeris,std::allocator< gpstk::GalEphemeris > > & gallist) -> int
        """
        return _gpstk.GalEphemerisStore_addToList(self, *args)


    def __str__(self):
        """__str__(GalEphemerisStore self) -> std::string"""
        return _gpstk.GalEphemerisStore___str__(self)

GalEphemerisStore_swigregister = _gpstk.GalEphemerisStore_swigregister
GalEphemerisStore_swigregister(GalEphemerisStore)

class GloEphemerisStore(XvtStore_SatID):
    """Proxy of C++ gpstk::GloEphemerisStore class"""
    __swig_setmethods__ = {}
    for _s in [XvtStore_SatID]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GloEphemerisStore, name, value)
    __swig_getmethods__ = {}
    for _s in [XvtStore_SatID]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GloEphemerisStore, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::GloEphemerisStore self) -> GloEphemerisStore
        __init__(gpstk::GloEphemerisStore self, double rkStep, double checkHealth) -> GloEphemerisStore
        """
        this = _gpstk.new_GloEphemerisStore(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_GloEphemerisStore
    __del__ = lambda self: None

    def addEphemeris(self, data):
        """addEphemeris(GloEphemerisStore self, Rinex3NavData data) -> bool"""
        return _gpstk.GloEphemerisStore_addEphemeris(self, data)


    def getXvt(self, sat, epoch):
        """getXvt(GloEphemerisStore self, SatID sat, CommonTime epoch) -> Xvt"""
        return _gpstk.GloEphemerisStore_getXvt(self, sat, epoch)


    def getIntegrationStep(self):
        """getIntegrationStep(GloEphemerisStore self) -> double"""
        return _gpstk.GloEphemerisStore_getIntegrationStep(self)


    def setIntegrationStep(self, rkStep):
        """setIntegrationStep(GloEphemerisStore self, double rkStep) -> GloEphemerisStore"""
        return _gpstk.GloEphemerisStore_setIntegrationStep(self, rkStep)


    def getCheckHealthFlag(self):
        """getCheckHealthFlag(GloEphemerisStore self) -> bool"""
        return _gpstk.GloEphemerisStore_getCheckHealthFlag(self)


    def setCheckHealthFlag(self, checkHealth):
        """setCheckHealthFlag(GloEphemerisStore self, bool checkHealth) -> GloEphemerisStore"""
        return _gpstk.GloEphemerisStore_setCheckHealthFlag(self, checkHealth)


    def edit(self, *args):
        """
        edit(GloEphemerisStore self, CommonTime tmin, CommonTime tmax)
        edit(GloEphemerisStore self, CommonTime tmin)
        """
        return _gpstk.GloEphemerisStore_edit(self, *args)


    def clear(self):
        """clear(GloEphemerisStore self)"""
        return _gpstk.GloEphemerisStore_clear(self)


    def getTimeSystem(self):
        """getTimeSystem(GloEphemerisStore self) -> TimeSystem"""
        return _gpstk.GloEphemerisStore_getTimeSystem(self)


    def getInitialTime(self, *args):
        """
        getInitialTime(GloEphemerisStore self) -> CommonTime
        getInitialTime(GloEphemerisStore self, SatID sat) -> CommonTime
        """
        return _gpstk.GloEphemerisStore_getInitialTime(self, *args)


    def getFinalTime(self, *args):
        """
        getFinalTime(GloEphemerisStore self) -> CommonTime
        getFinalTime(GloEphemerisStore self, SatID sat) -> CommonTime
        """
        return _gpstk.GloEphemerisStore_getFinalTime(self, *args)


    def hasVelocity(self):
        """hasVelocity(GloEphemerisStore self) -> bool"""
        return _gpstk.GloEphemerisStore_hasVelocity(self)


    def isPresent(self, id):
        """isPresent(GloEphemerisStore self, SatID id) -> bool"""
        return _gpstk.GloEphemerisStore_isPresent(self, id)


    def size(self):
        """size(GloEphemerisStore self) -> int"""
        return _gpstk.GloEphemerisStore_size(self)


    def findEphemeris(self, sat, epoch):
        """findEphemeris(GloEphemerisStore self, SatID sat, CommonTime epoch) -> GloEphemeris"""
        return _gpstk.GloEphemerisStore_findEphemeris(self, sat, epoch)


    def findUserEphemeris(self, sat, t):
        """findUserEphemeris(GloEphemerisStore self, SatID sat, CommonTime t) -> GloEphemeris"""
        return _gpstk.GloEphemerisStore_findUserEphemeris(self, sat, t)


    def findNearEphemeris(self, sat, t):
        """findNearEphemeris(GloEphemerisStore self, SatID sat, CommonTime t) -> GloEphemeris"""
        return _gpstk.GloEphemerisStore_findNearEphemeris(self, sat, t)


    def addToList(self, v):
        """addToList(GloEphemerisStore self, std::list< gpstk::GloEphemeris,std::allocator< gpstk::GloEphemeris > > & v) -> int"""
        return _gpstk.GloEphemerisStore_addToList(self, v)


    def __str__(self):
        """__str__(GloEphemerisStore self) -> std::string"""
        return _gpstk.GloEphemerisStore___str__(self)

GloEphemerisStore_swigregister = _gpstk.GloEphemerisStore_swigregister
GloEphemerisStore_swigregister(GloEphemerisStore)

class GPSEphemerisStore(OrbitEphStore):
    """Proxy of C++ gpstk::GPSEphemerisStore class"""
    __swig_setmethods__ = {}
    for _s in [OrbitEphStore]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GPSEphemerisStore, name, value)
    __swig_getmethods__ = {}
    for _s in [OrbitEphStore]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GPSEphemerisStore, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::GPSEphemerisStore self) -> GPSEphemerisStore"""
        this = _gpstk.new_GPSEphemerisStore()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_GPSEphemerisStore
    __del__ = lambda self: None

    def getName(self):
        """getName(GPSEphemerisStore self) -> std::string"""
        return _gpstk.GPSEphemerisStore_getName(self)


    def rationalize(self):
        """rationalize(GPSEphemerisStore self)"""
        return _gpstk.GPSEphemerisStore_rationalize(self)


    def addEphemeris(self, gpseph):
        """addEphemeris(GPSEphemerisStore self, GPSEphemeris gpseph) -> GPSEphemeris"""
        return _gpstk.GPSEphemerisStore_addEphemeris(self, gpseph)


    def findEphemeris(self, sat, t):
        """findEphemeris(GPSEphemerisStore self, SatID sat, CommonTime t) -> GPSEphemeris"""
        return _gpstk.GPSEphemerisStore_findEphemeris(self, sat, t)


    def addToList(self, *args):
        """
        addToList(GPSEphemerisStore self, std::list< gpstk::GPSEphemeris,std::allocator< gpstk::GPSEphemeris > > & gpslist, SatID sat) -> int
        addToList(GPSEphemerisStore self, std::list< gpstk::GPSEphemeris,std::allocator< gpstk::GPSEphemeris > > & gpslist) -> int
        """
        return _gpstk.GPSEphemerisStore_addToList(self, *args)


    def __str__(self):
        """__str__(GPSEphemerisStore self) -> std::string"""
        return _gpstk.GPSEphemerisStore___str__(self)

GPSEphemerisStore_swigregister = _gpstk.GPSEphemerisStore_swigregister
GPSEphemerisStore_swigregister(GPSEphemerisStore)

class QZSEphemerisStore(OrbitEphStore):
    """Proxy of C++ gpstk::QZSEphemerisStore class"""
    __swig_setmethods__ = {}
    for _s in [OrbitEphStore]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QZSEphemerisStore, name, value)
    __swig_getmethods__ = {}
    for _s in [OrbitEphStore]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, QZSEphemerisStore, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::QZSEphemerisStore self) -> QZSEphemerisStore"""
        this = _gpstk.new_QZSEphemerisStore()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_QZSEphemerisStore
    __del__ = lambda self: None

    def getName(self):
        """getName(QZSEphemerisStore self) -> std::string"""
        return _gpstk.QZSEphemerisStore_getName(self)


    def rationalize(self):
        """rationalize(QZSEphemerisStore self)"""
        return _gpstk.QZSEphemerisStore_rationalize(self)


    def addEphemeris(self, gpseph):
        """addEphemeris(QZSEphemerisStore self, QZSEphemeris gpseph) -> QZSEphemeris"""
        return _gpstk.QZSEphemerisStore_addEphemeris(self, gpseph)


    def findEphemeris(self, sat, t):
        """findEphemeris(QZSEphemerisStore self, SatID sat, CommonTime t) -> QZSEphemeris"""
        return _gpstk.QZSEphemerisStore_findEphemeris(self, sat, t)


    def addToList(self, *args):
        """
        addToList(QZSEphemerisStore self, std::list< gpstk::QZSEphemeris,std::allocator< gpstk::QZSEphemeris > > & qzslist, SatID sat) -> int
        addToList(QZSEphemerisStore self, std::list< gpstk::QZSEphemeris,std::allocator< gpstk::QZSEphemeris > > & qzslist) -> int
        """
        return _gpstk.QZSEphemerisStore_addToList(self, *args)

QZSEphemerisStore_swigregister = _gpstk.QZSEphemerisStore_swigregister
QZSEphemerisStore_swigregister(QZSEphemerisStore)

class FileStore_RinexNavHeader(_object):
    """Proxy of C++ gpstk::FileStore<(gpstk::RinexNavHeader)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileStore_RinexNavHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileStore_RinexNavHeader, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::FileStore<(gpstk::RinexNavHeader)> self) -> FileStore_RinexNavHeader"""
        this = _gpstk.new_FileStore_RinexNavHeader()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_FileStore_RinexNavHeader
    __del__ = lambda self: None

    def getFileNames(self):
        """getFileNames(FileStore_RinexNavHeader self) -> vector_string"""
        return _gpstk.FileStore_RinexNavHeader_getFileNames(self)


    def addFile(self, fn, header):
        """addFile(FileStore_RinexNavHeader self, std::string const & fn, RinexNavHeader header)"""
        return _gpstk.FileStore_RinexNavHeader_addFile(self, fn, header)


    def getHeader(self, fn):
        """getHeader(FileStore_RinexNavHeader self, std::string const & fn) -> RinexNavHeader"""
        return _gpstk.FileStore_RinexNavHeader_getHeader(self, fn)


    def clear(self):
        """clear(FileStore_RinexNavHeader self)"""
        return _gpstk.FileStore_RinexNavHeader_clear(self)


    def size(self):
        """size(FileStore_RinexNavHeader self) -> unsigned int"""
        return _gpstk.FileStore_RinexNavHeader_size(self)


    def nfiles(self):
        """nfiles(FileStore_RinexNavHeader self) -> unsigned int"""
        return _gpstk.FileStore_RinexNavHeader_nfiles(self)

FileStore_RinexNavHeader_swigregister = _gpstk.FileStore_RinexNavHeader_swigregister
FileStore_RinexNavHeader_swigregister(FileStore_RinexNavHeader)

class RinexEphemerisStore(GPSEphemerisStore, FileStore_RinexNavHeader):
    """Proxy of C++ gpstk::RinexEphemerisStore class"""
    __swig_setmethods__ = {}
    for _s in [GPSEphemerisStore, FileStore_RinexNavHeader]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RinexEphemerisStore, name, value)
    __swig_getmethods__ = {}
    for _s in [GPSEphemerisStore, FileStore_RinexNavHeader]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RinexEphemerisStore, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::RinexEphemerisStore self) -> RinexEphemerisStore"""
        this = _gpstk.new_RinexEphemerisStore()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_RinexEphemerisStore
    __del__ = lambda self: None

    def loadFile(self, filename):
        """loadFile(RinexEphemerisStore self, std::string const & filename)"""
        return _gpstk.RinexEphemerisStore_loadFile(self, filename)

RinexEphemerisStore_swigregister = _gpstk.RinexEphemerisStore_swigregister
RinexEphemerisStore_swigregister(RinexEphemerisStore)

class ClockRecord(_object):
    """Proxy of C++ gpstk::ClockDataRecord class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClockRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClockRecord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bias"] = _gpstk.ClockRecord_bias_set
    __swig_getmethods__["bias"] = _gpstk.ClockRecord_bias_get
    if _newclass:
        bias = _swig_property(_gpstk.ClockRecord_bias_get, _gpstk.ClockRecord_bias_set)
    __swig_setmethods__["sig_bias"] = _gpstk.ClockRecord_sig_bias_set
    __swig_getmethods__["sig_bias"] = _gpstk.ClockRecord_sig_bias_get
    if _newclass:
        sig_bias = _swig_property(_gpstk.ClockRecord_sig_bias_get, _gpstk.ClockRecord_sig_bias_set)
    __swig_setmethods__["drift"] = _gpstk.ClockRecord_drift_set
    __swig_getmethods__["drift"] = _gpstk.ClockRecord_drift_get
    if _newclass:
        drift = _swig_property(_gpstk.ClockRecord_drift_get, _gpstk.ClockRecord_drift_set)
    __swig_setmethods__["sig_drift"] = _gpstk.ClockRecord_sig_drift_set
    __swig_getmethods__["sig_drift"] = _gpstk.ClockRecord_sig_drift_get
    if _newclass:
        sig_drift = _swig_property(_gpstk.ClockRecord_sig_drift_get, _gpstk.ClockRecord_sig_drift_set)
    __swig_setmethods__["accel"] = _gpstk.ClockRecord_accel_set
    __swig_getmethods__["accel"] = _gpstk.ClockRecord_accel_get
    if _newclass:
        accel = _swig_property(_gpstk.ClockRecord_accel_get, _gpstk.ClockRecord_accel_set)
    __swig_setmethods__["sig_accel"] = _gpstk.ClockRecord_sig_accel_set
    __swig_getmethods__["sig_accel"] = _gpstk.ClockRecord_sig_accel_get
    if _newclass:
        sig_accel = _swig_property(_gpstk.ClockRecord_sig_accel_get, _gpstk.ClockRecord_sig_accel_set)

    def __init__(self):
        """__init__(gpstk::ClockDataRecord self) -> ClockRecord"""
        this = _gpstk.new_ClockRecord()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_ClockRecord
    __del__ = lambda self: None
ClockRecord_swigregister = _gpstk.ClockRecord_swigregister
ClockRecord_swigregister(ClockRecord)

class TabularSatStore_ClockRecord(_object):
    """Proxy of C++ gpstk::TabularSatStore<(ClockRecord)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TabularSatStore_ClockRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TabularSatStore_ClockRecord, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_TabularSatStore_ClockRecord
    __del__ = lambda self: None

    def getValue(self, sat, ttag):
        """getValue(TabularSatStore_ClockRecord self, SatID sat, CommonTime ttag) -> ClockRecord"""
        return _gpstk.TabularSatStore_ClockRecord_getValue(self, sat, ttag)


    def getTableInterval(self, sat, ttag, nhalf, it1, it2, exactReturn=True):
        """
        getTableInterval(TabularSatStore_ClockRecord self, SatID sat, CommonTime ttag, int const & nhalf, gpstk::TabularSatStore< gpstk::ClockDataRecord >::DataTable::const_iterator & it1, gpstk::TabularSatStore< gpstk::ClockDataRecord >::DataTable::const_iterator & it2, bool exactReturn=True) -> bool
        getTableInterval(TabularSatStore_ClockRecord self, SatID sat, CommonTime ttag, int const & nhalf, gpstk::TabularSatStore< gpstk::ClockDataRecord >::DataTable::const_iterator & it1, gpstk::TabularSatStore< gpstk::ClockDataRecord >::DataTable::const_iterator & it2) -> bool
        """
        return _gpstk.TabularSatStore_ClockRecord_getTableInterval(self, sat, ttag, nhalf, it1, it2, exactReturn)


    def getNonCenteredTableInterval(self, sat, ttag, nhalf, it1, it2, exactReturn=True):
        """
        getNonCenteredTableInterval(TabularSatStore_ClockRecord self, SatID sat, CommonTime ttag, int const & nhalf, gpstk::TabularSatStore< gpstk::ClockDataRecord >::DataTable::const_iterator & it1, gpstk::TabularSatStore< gpstk::ClockDataRecord >::DataTable::const_iterator & it2, bool exactReturn=True) -> bool
        getNonCenteredTableInterval(TabularSatStore_ClockRecord self, SatID sat, CommonTime ttag, int const & nhalf, gpstk::TabularSatStore< gpstk::ClockDataRecord >::DataTable::const_iterator & it1, gpstk::TabularSatStore< gpstk::ClockDataRecord >::DataTable::const_iterator & it2) -> bool
        """
        return _gpstk.TabularSatStore_ClockRecord_getNonCenteredTableInterval(self, sat, ttag, nhalf, it1, it2, exactReturn)


    def edit(self, *args):
        """
        edit(TabularSatStore_ClockRecord self, CommonTime tmin, CommonTime tmax)
        edit(TabularSatStore_ClockRecord self, CommonTime tmin)
        """
        return _gpstk.TabularSatStore_ClockRecord_edit(self, *args)


    def clear(self):
        """clear(TabularSatStore_ClockRecord self)"""
        return _gpstk.TabularSatStore_ClockRecord_clear(self)


    def isPresent(self, sat):
        """isPresent(TabularSatStore_ClockRecord self, SatID sat) -> bool"""
        return _gpstk.TabularSatStore_ClockRecord_isPresent(self, sat)


    def checkTimeSystem(self, ts):
        """checkTimeSystem(TabularSatStore_ClockRecord self, TimeSystem ts)"""
        return _gpstk.TabularSatStore_ClockRecord_checkTimeSystem(self, ts)


    def getInitialTime(self, *args):
        """
        getInitialTime(TabularSatStore_ClockRecord self) -> CommonTime
        getInitialTime(TabularSatStore_ClockRecord self, SatID sat) -> CommonTime
        """
        return _gpstk.TabularSatStore_ClockRecord_getInitialTime(self, *args)


    def getFinalTime(self, *args):
        """
        getFinalTime(TabularSatStore_ClockRecord self) -> CommonTime
        getFinalTime(TabularSatStore_ClockRecord self, SatID sat) -> CommonTime
        """
        return _gpstk.TabularSatStore_ClockRecord_getFinalTime(self, *args)


    def dumpInterval(self, *args):
        """
        dumpInterval(TabularSatStore_ClockRecord self, gpstk::TabularSatStore< gpstk::ClockDataRecord >::DataTable::const_iterator & it1, gpstk::TabularSatStore< gpstk::ClockDataRecord >::DataTable::const_iterator & it2, std::ostream & os)
        dumpInterval(TabularSatStore_ClockRecord self, gpstk::TabularSatStore< gpstk::ClockDataRecord >::DataTable::const_iterator & it1, gpstk::TabularSatStore< gpstk::ClockDataRecord >::DataTable::const_iterator & it2)
        """
        return _gpstk.TabularSatStore_ClockRecord_dumpInterval(self, *args)


    def hasPosition(self):
        """hasPosition(TabularSatStore_ClockRecord self) -> bool"""
        return _gpstk.TabularSatStore_ClockRecord_hasPosition(self)


    def hasVelocity(self):
        """hasVelocity(TabularSatStore_ClockRecord self) -> bool"""
        return _gpstk.TabularSatStore_ClockRecord_hasVelocity(self)


    def hasClockBias(self):
        """hasClockBias(TabularSatStore_ClockRecord self) -> bool"""
        return _gpstk.TabularSatStore_ClockRecord_hasClockBias(self)


    def hasClockDrift(self):
        """hasClockDrift(TabularSatStore_ClockRecord self) -> bool"""
        return _gpstk.TabularSatStore_ClockRecord_hasClockDrift(self)


    def nsats(self):
        """nsats(TabularSatStore_ClockRecord self) -> int"""
        return _gpstk.TabularSatStore_ClockRecord_nsats(self)


    def hasSatellite(self, sat):
        """hasSatellite(TabularSatStore_ClockRecord self, SatID sat) -> bool"""
        return _gpstk.TabularSatStore_ClockRecord_hasSatellite(self, sat)


    def getSatList(self):
        """getSatList(TabularSatStore_ClockRecord self) -> vector_SatID"""
        return _gpstk.TabularSatStore_ClockRecord_getSatList(self)


    def ndata(self, *args):
        """
        ndata(TabularSatStore_ClockRecord self) -> int
        ndata(TabularSatStore_ClockRecord self, SatID sat) -> int
        ndata(TabularSatStore_ClockRecord self, gpstk::SatID::SatelliteSystem const & sys) -> int
        """
        return _gpstk.TabularSatStore_ClockRecord_ndata(self, *args)


    def size(self):
        """size(TabularSatStore_ClockRecord self) -> int"""
        return _gpstk.TabularSatStore_ClockRecord_size(self)


    def nomTimeStep(self, sat):
        """nomTimeStep(TabularSatStore_ClockRecord self, SatID sat) -> double"""
        return _gpstk.TabularSatStore_ClockRecord_nomTimeStep(self, sat)


    def isDataGapCheck(self):
        """isDataGapCheck(TabularSatStore_ClockRecord self) -> bool"""
        return _gpstk.TabularSatStore_ClockRecord_isDataGapCheck(self)


    def disableDataGapCheck(self):
        """disableDataGapCheck(TabularSatStore_ClockRecord self)"""
        return _gpstk.TabularSatStore_ClockRecord_disableDataGapCheck(self)


    def getGapInterval(self):
        """getGapInterval(TabularSatStore_ClockRecord self) -> double"""
        return _gpstk.TabularSatStore_ClockRecord_getGapInterval(self)


    def setGapInterval(self, interval):
        """setGapInterval(TabularSatStore_ClockRecord self, double interval)"""
        return _gpstk.TabularSatStore_ClockRecord_setGapInterval(self, interval)


    def isIntervalCheck(self):
        """isIntervalCheck(TabularSatStore_ClockRecord self) -> bool"""
        return _gpstk.TabularSatStore_ClockRecord_isIntervalCheck(self)


    def disableIntervalCheck(self):
        """disableIntervalCheck(TabularSatStore_ClockRecord self)"""
        return _gpstk.TabularSatStore_ClockRecord_disableIntervalCheck(self)


    def getMaxInterval(self):
        """getMaxInterval(TabularSatStore_ClockRecord self) -> double"""
        return _gpstk.TabularSatStore_ClockRecord_getMaxInterval(self)


    def setMaxInterval(self, interval):
        """setMaxInterval(TabularSatStore_ClockRecord self, double interval)"""
        return _gpstk.TabularSatStore_ClockRecord_setMaxInterval(self, interval)


    def getTimeSystem(self):
        """getTimeSystem(TabularSatStore_ClockRecord self) -> TimeSystem"""
        return _gpstk.TabularSatStore_ClockRecord_getTimeSystem(self)


    def setTimeSystem(self, ts):
        """setTimeSystem(TabularSatStore_ClockRecord self, TimeSystem ts)"""
        return _gpstk.TabularSatStore_ClockRecord_setTimeSystem(self, ts)

TabularSatStore_ClockRecord_swigregister = _gpstk.TabularSatStore_ClockRecord_swigregister
TabularSatStore_ClockRecord_swigregister(TabularSatStore_ClockRecord)

class ClockSatStore(TabularSatStore_ClockRecord):
    """Proxy of C++ gpstk::ClockSatStore class"""
    __swig_setmethods__ = {}
    for _s in [TabularSatStore_ClockRecord]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClockSatStore, name, value)
    __swig_getmethods__ = {}
    for _s in [TabularSatStore_ClockRecord]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ClockSatStore, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::ClockSatStore self) -> ClockSatStore"""
        this = _gpstk.new_ClockSatStore()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_ClockSatStore
    __del__ = lambda self: None

    def hasClockAccel(self):
        """hasClockAccel(ClockSatStore self) -> bool"""
        return _gpstk.ClockSatStore_hasClockAccel(self)


    def getValue(self, sat, ttag):
        """getValue(ClockSatStore self, SatID sat, CommonTime ttag) -> ClockRecord"""
        return _gpstk.ClockSatStore_getValue(self, sat, ttag)


    def getClockBias(self, sat, ttag):
        """getClockBias(ClockSatStore self, SatID sat, CommonTime ttag) -> double"""
        return _gpstk.ClockSatStore_getClockBias(self, sat, ttag)


    def getClockDrift(self, sat, ttag):
        """getClockDrift(ClockSatStore self, SatID sat, CommonTime ttag) -> double"""
        return _gpstk.ClockSatStore_getClockDrift(self, sat, ttag)


    def addClockRecord(self, sat, ttag, rec):
        """addClockRecord(ClockSatStore self, SatID sat, CommonTime ttag, ClockRecord rec)"""
        return _gpstk.ClockSatStore_addClockRecord(self, sat, ttag, rec)


    def addClockBias(self, sat, ttag, bias, sig=0.0):
        """
        addClockBias(ClockSatStore self, SatID sat, CommonTime ttag, double const & bias, double const & sig=0.0)
        addClockBias(ClockSatStore self, SatID sat, CommonTime ttag, double const & bias)
        """
        return _gpstk.ClockSatStore_addClockBias(self, sat, ttag, bias, sig)


    def addClockDrift(self, sat, ttag, drift, sig=0.0):
        """
        addClockDrift(ClockSatStore self, SatID sat, CommonTime ttag, double const & drift, double const & sig=0.0)
        addClockDrift(ClockSatStore self, SatID sat, CommonTime ttag, double const & drift)
        """
        return _gpstk.ClockSatStore_addClockDrift(self, sat, ttag, drift, sig)


    def addClockAcceleration(self, sat, ttag, accel, sig=0.0):
        """
        addClockAcceleration(ClockSatStore self, SatID sat, CommonTime ttag, double const & accel, double const & sig=0.0)
        addClockAcceleration(ClockSatStore self, SatID sat, CommonTime ttag, double const & accel)
        """
        return _gpstk.ClockSatStore_addClockAcceleration(self, sat, ttag, accel, sig)


    def getInterpolationOrder(self):
        """getInterpolationOrder(ClockSatStore self) -> unsigned int"""
        return _gpstk.ClockSatStore_getInterpolationOrder(self)


    def setInterpolationOrder(self, order):
        """setInterpolationOrder(ClockSatStore self, unsigned int order)"""
        return _gpstk.ClockSatStore_setInterpolationOrder(self, order)


    def rejectBadClocks(self, flag):
        """rejectBadClocks(ClockSatStore self, bool const flag)"""
        return _gpstk.ClockSatStore_rejectBadClocks(self, flag)


    def setLagrangeInterp(self):
        """setLagrangeInterp(ClockSatStore self)"""
        return _gpstk.ClockSatStore_setLagrangeInterp(self)


    def setLinearInterp(self):
        """setLinearInterp(ClockSatStore self)"""
        return _gpstk.ClockSatStore_setLinearInterp(self)


    def __str__(self):
        """__str__(ClockSatStore self) -> std::string"""
        return _gpstk.ClockSatStore___str__(self)

ClockSatStore_swigregister = _gpstk.ClockSatStore_swigregister
ClockSatStore_swigregister(ClockSatStore)

class SP3Base(FFData):
    """Proxy of C++ gpstk::SP3Base class"""
    __swig_setmethods__ = {}
    for _s in [FFData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SP3Base, name, value)
    __swig_getmethods__ = {}
    for _s in [FFData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SP3Base, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_SP3Base
    __del__ = lambda self: None
SP3Base_swigregister = _gpstk.SP3Base_swigregister
SP3Base_swigregister(SP3Base)

class SP3SatID(SatID):
    """Proxy of C++ gpstk::SP3SatID class"""
    __swig_setmethods__ = {}
    for _s in [SatID]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SP3SatID, name, value)
    __swig_getmethods__ = {}
    for _s in [SatID]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SP3SatID, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::SP3SatID self) -> SP3SatID
        __init__(gpstk::SP3SatID self, int p, gpstk::SatID::SatelliteSystem s) -> SP3SatID
        __init__(gpstk::SP3SatID self, std::string const & str) -> SP3SatID
        __init__(gpstk::SP3SatID self, SatID sat) -> SP3SatID
        """
        this = _gpstk.new_SP3SatID(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def setfill(self, c):
        """setfill(SP3SatID self, char c) -> char"""
        return _gpstk.SP3SatID_setfill(self, c)


    def getfill(self):
        """getfill(SP3SatID self) -> char"""
        return _gpstk.SP3SatID_getfill(self)


    def __eq__(self, right):
        """__eq__(SP3SatID self, SP3SatID right) -> bool"""
        return _gpstk.SP3SatID___eq__(self, right)


    def __ne__(self, right):
        """__ne__(SP3SatID self, SP3SatID right) -> bool"""
        return _gpstk.SP3SatID___ne__(self, right)


    def __lt__(self, right):
        """__lt__(SP3SatID self, SP3SatID right) -> bool"""
        return _gpstk.SP3SatID___lt__(self, right)


    def __gt__(self, right):
        """__gt__(SP3SatID self, SP3SatID right) -> bool"""
        return _gpstk.SP3SatID___gt__(self, right)


    def __ge__(self, right):
        """__ge__(SP3SatID self, SP3SatID right) -> bool"""
        return _gpstk.SP3SatID___ge__(self, right)


    def __le__(self, right):
        """__le__(SP3SatID self, SP3SatID right) -> bool"""
        return _gpstk.SP3SatID___le__(self, right)


    def systemChar(self):
        """systemChar(SP3SatID self) -> char"""
        return _gpstk.SP3SatID_systemChar(self)


    def systemString(self):
        """systemString(SP3SatID self) -> std::string"""
        return _gpstk.SP3SatID_systemString(self)


    def fromString(self, s):
        """fromString(SP3SatID self, std::string const s)"""
        return _gpstk.SP3SatID_fromString(self, s)


    def toString(self):
        """toString(SP3SatID self) -> std::string"""
        return _gpstk.SP3SatID_toString(self)


    def __str__(self):
        """__str__(SP3SatID self) -> std::string"""
        return _gpstk.SP3SatID___str__(self)

    __swig_destroy__ = _gpstk.delete_SP3SatID
    __del__ = lambda self: None
SP3SatID_swigregister = _gpstk.SP3SatID_swigregister
SP3SatID_swigregister(SP3SatID)

class SP3Header(SP3Base):
    """Proxy of C++ gpstk::SP3Header class"""
    __swig_setmethods__ = {}
    for _s in [SP3Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SP3Header, name, value)
    __swig_getmethods__ = {}
    for _s in [SP3Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SP3Header, name)
    __repr__ = _swig_repr
    undefined = _gpstk.SP3Header_undefined
    SP3a = _gpstk.SP3Header_SP3a
    SP3b = _gpstk.SP3Header_SP3b
    SP3c = _gpstk.SP3Header_SP3c

    def __init__(self):
        """__init__(gpstk::SP3Header self) -> SP3Header"""
        this = _gpstk.new_SP3Header()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_SP3Header
    __del__ = lambda self: None

    def getVersion(self):
        """getVersion(SP3Header self) -> gpstk::SP3Header::Version"""
        return _gpstk.SP3Header_getVersion(self)


    def versionChar(self):
        """versionChar(SP3Header self) -> char"""
        return _gpstk.SP3Header_versionChar(self)


    def versionString(self):
        """versionString(SP3Header self) -> std::string"""
        return _gpstk.SP3Header_versionString(self)


    def setVersion(self, ver):
        """setVersion(SP3Header self, gpstk::SP3Header::Version const ver) -> gpstk::SP3Header::Version"""
        return _gpstk.SP3Header_setVersion(self, ver)


    def timeSystemString(self):
        """timeSystemString(SP3Header self) -> std::string"""
        return _gpstk.SP3Header_timeSystemString(self)


    def isHeader(self):
        """isHeader(SP3Header self) -> bool"""
        return _gpstk.SP3Header_isHeader(self)

    __swig_setmethods__["version"] = _gpstk.SP3Header_version_set
    __swig_getmethods__["version"] = _gpstk.SP3Header_version_get
    if _newclass:
        version = _swig_property(_gpstk.SP3Header_version_get, _gpstk.SP3Header_version_set)
    __swig_setmethods__["containsVelocity"] = _gpstk.SP3Header_containsVelocity_set
    __swig_getmethods__["containsVelocity"] = _gpstk.SP3Header_containsVelocity_get
    if _newclass:
        containsVelocity = _swig_property(_gpstk.SP3Header_containsVelocity_get, _gpstk.SP3Header_containsVelocity_set)
    __swig_setmethods__["time"] = _gpstk.SP3Header_time_set
    __swig_getmethods__["time"] = _gpstk.SP3Header_time_get
    if _newclass:
        time = _swig_property(_gpstk.SP3Header_time_get, _gpstk.SP3Header_time_set)
    __swig_setmethods__["epochInterval"] = _gpstk.SP3Header_epochInterval_set
    __swig_getmethods__["epochInterval"] = _gpstk.SP3Header_epochInterval_get
    if _newclass:
        epochInterval = _swig_property(_gpstk.SP3Header_epochInterval_get, _gpstk.SP3Header_epochInterval_set)
    __swig_setmethods__["numberOfEpochs"] = _gpstk.SP3Header_numberOfEpochs_set
    __swig_getmethods__["numberOfEpochs"] = _gpstk.SP3Header_numberOfEpochs_get
    if _newclass:
        numberOfEpochs = _swig_property(_gpstk.SP3Header_numberOfEpochs_get, _gpstk.SP3Header_numberOfEpochs_set)
    __swig_setmethods__["dataUsed"] = _gpstk.SP3Header_dataUsed_set
    __swig_getmethods__["dataUsed"] = _gpstk.SP3Header_dataUsed_get
    if _newclass:
        dataUsed = _swig_property(_gpstk.SP3Header_dataUsed_get, _gpstk.SP3Header_dataUsed_set)
    __swig_setmethods__["coordSystem"] = _gpstk.SP3Header_coordSystem_set
    __swig_getmethods__["coordSystem"] = _gpstk.SP3Header_coordSystem_get
    if _newclass:
        coordSystem = _swig_property(_gpstk.SP3Header_coordSystem_get, _gpstk.SP3Header_coordSystem_set)
    __swig_setmethods__["orbitType"] = _gpstk.SP3Header_orbitType_set
    __swig_getmethods__["orbitType"] = _gpstk.SP3Header_orbitType_get
    if _newclass:
        orbitType = _swig_property(_gpstk.SP3Header_orbitType_get, _gpstk.SP3Header_orbitType_set)
    __swig_setmethods__["agency"] = _gpstk.SP3Header_agency_set
    __swig_getmethods__["agency"] = _gpstk.SP3Header_agency_get
    if _newclass:
        agency = _swig_property(_gpstk.SP3Header_agency_get, _gpstk.SP3Header_agency_set)
    __swig_setmethods__["system"] = _gpstk.SP3Header_system_set
    __swig_getmethods__["system"] = _gpstk.SP3Header_system_get
    if _newclass:
        system = _swig_property(_gpstk.SP3Header_system_get, _gpstk.SP3Header_system_set)
    __swig_setmethods__["timeSystem"] = _gpstk.SP3Header_timeSystem_set
    __swig_getmethods__["timeSystem"] = _gpstk.SP3Header_timeSystem_get
    if _newclass:
        timeSystem = _swig_property(_gpstk.SP3Header_timeSystem_get, _gpstk.SP3Header_timeSystem_set)
    __swig_setmethods__["basePV"] = _gpstk.SP3Header_basePV_set
    __swig_getmethods__["basePV"] = _gpstk.SP3Header_basePV_get
    if _newclass:
        basePV = _swig_property(_gpstk.SP3Header_basePV_get, _gpstk.SP3Header_basePV_set)
    __swig_setmethods__["baseClk"] = _gpstk.SP3Header_baseClk_set
    __swig_getmethods__["baseClk"] = _gpstk.SP3Header_baseClk_get
    if _newclass:
        baseClk = _swig_property(_gpstk.SP3Header_baseClk_get, _gpstk.SP3Header_baseClk_set)
    __swig_setmethods__["satList"] = _gpstk.SP3Header_satList_set
    __swig_getmethods__["satList"] = _gpstk.SP3Header_satList_get
    if _newclass:
        satList = _swig_property(_gpstk.SP3Header_satList_get, _gpstk.SP3Header_satList_set)
    __swig_setmethods__["comments"] = _gpstk.SP3Header_comments_set
    __swig_getmethods__["comments"] = _gpstk.SP3Header_comments_get
    if _newclass:
        comments = _swig_property(_gpstk.SP3Header_comments_get, _gpstk.SP3Header_comments_set)

    def __str__(self):
        """__str__(SP3Header self) -> std::string"""
        return _gpstk.SP3Header___str__(self)

SP3Header_swigregister = _gpstk.SP3Header_swigregister
SP3Header_swigregister(SP3Header)

class SP3Data(SP3Base):
    """Proxy of C++ gpstk::SP3Data class"""
    __swig_setmethods__ = {}
    for _s in [SP3Base]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SP3Data, name, value)
    __swig_getmethods__ = {}
    for _s in [SP3Base]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SP3Data, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::SP3Data self) -> SP3Data"""
        this = _gpstk.new_SP3Data()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_SP3Data
    __del__ = lambda self: None

    def isData(self):
        """isData(SP3Data self) -> bool"""
        return _gpstk.SP3Data_isData(self)

    __swig_setmethods__["RecType"] = _gpstk.SP3Data_RecType_set
    __swig_getmethods__["RecType"] = _gpstk.SP3Data_RecType_get
    if _newclass:
        RecType = _swig_property(_gpstk.SP3Data_RecType_get, _gpstk.SP3Data_RecType_set)
    __swig_setmethods__["sat"] = _gpstk.SP3Data_sat_set
    __swig_getmethods__["sat"] = _gpstk.SP3Data_sat_get
    if _newclass:
        sat = _swig_property(_gpstk.SP3Data_sat_get, _gpstk.SP3Data_sat_set)
    __swig_setmethods__["time"] = _gpstk.SP3Data_time_set
    __swig_getmethods__["time"] = _gpstk.SP3Data_time_get
    if _newclass:
        time = _swig_property(_gpstk.SP3Data_time_get, _gpstk.SP3Data_time_set)
    __swig_setmethods__["x"] = _gpstk.SP3Data_x_set
    __swig_getmethods__["x"] = _gpstk.SP3Data_x_get
    if _newclass:
        x = _swig_property(_gpstk.SP3Data_x_get, _gpstk.SP3Data_x_set)
    __swig_setmethods__["clk"] = _gpstk.SP3Data_clk_set
    __swig_getmethods__["clk"] = _gpstk.SP3Data_clk_get
    if _newclass:
        clk = _swig_property(_gpstk.SP3Data_clk_get, _gpstk.SP3Data_clk_set)
    __swig_setmethods__["sig"] = _gpstk.SP3Data_sig_set
    __swig_getmethods__["sig"] = _gpstk.SP3Data_sig_get
    if _newclass:
        sig = _swig_property(_gpstk.SP3Data_sig_get, _gpstk.SP3Data_sig_set)
    __swig_setmethods__["clockEventFlag"] = _gpstk.SP3Data_clockEventFlag_set
    __swig_getmethods__["clockEventFlag"] = _gpstk.SP3Data_clockEventFlag_get
    if _newclass:
        clockEventFlag = _swig_property(_gpstk.SP3Data_clockEventFlag_get, _gpstk.SP3Data_clockEventFlag_set)
    __swig_setmethods__["clockPredFlag"] = _gpstk.SP3Data_clockPredFlag_set
    __swig_getmethods__["clockPredFlag"] = _gpstk.SP3Data_clockPredFlag_get
    if _newclass:
        clockPredFlag = _swig_property(_gpstk.SP3Data_clockPredFlag_get, _gpstk.SP3Data_clockPredFlag_set)
    __swig_setmethods__["orbitManeuverFlag"] = _gpstk.SP3Data_orbitManeuverFlag_set
    __swig_getmethods__["orbitManeuverFlag"] = _gpstk.SP3Data_orbitManeuverFlag_get
    if _newclass:
        orbitManeuverFlag = _swig_property(_gpstk.SP3Data_orbitManeuverFlag_get, _gpstk.SP3Data_orbitManeuverFlag_set)
    __swig_setmethods__["orbitPredFlag"] = _gpstk.SP3Data_orbitPredFlag_set
    __swig_getmethods__["orbitPredFlag"] = _gpstk.SP3Data_orbitPredFlag_get
    if _newclass:
        orbitPredFlag = _swig_property(_gpstk.SP3Data_orbitPredFlag_get, _gpstk.SP3Data_orbitPredFlag_set)
    __swig_setmethods__["correlationFlag"] = _gpstk.SP3Data_correlationFlag_set
    __swig_getmethods__["correlationFlag"] = _gpstk.SP3Data_correlationFlag_get
    if _newclass:
        correlationFlag = _swig_property(_gpstk.SP3Data_correlationFlag_get, _gpstk.SP3Data_correlationFlag_set)
    __swig_setmethods__["sdev"] = _gpstk.SP3Data_sdev_set
    __swig_getmethods__["sdev"] = _gpstk.SP3Data_sdev_get
    if _newclass:
        sdev = _swig_property(_gpstk.SP3Data_sdev_get, _gpstk.SP3Data_sdev_set)
    __swig_setmethods__["correlation"] = _gpstk.SP3Data_correlation_set
    __swig_getmethods__["correlation"] = _gpstk.SP3Data_correlation_get
    if _newclass:
        correlation = _swig_property(_gpstk.SP3Data_correlation_get, _gpstk.SP3Data_correlation_set)

    def __str__(self):
        """__str__(SP3Data self) -> std::string"""
        return _gpstk.SP3Data___str__(self)

SP3Data_swigregister = _gpstk.SP3Data_swigregister
SP3Data_swigregister(SP3Data)

class SP3Stream(FFTextStream):
    """Proxy of C++ gpstk::SP3Stream class"""
    __swig_setmethods__ = {}
    for _s in [FFTextStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SP3Stream, name, value)
    __swig_getmethods__ = {}
    for _s in [FFTextStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SP3Stream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::SP3Stream self) -> SP3Stream
        __init__(gpstk::SP3Stream self, char const * filename, std::ios::openmode mode) -> SP3Stream
        __init__(gpstk::SP3Stream self, char const * filename) -> SP3Stream
        """
        this = _gpstk.new_SP3Stream(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_SP3Stream
    __del__ = lambda self: None

    def close(self):
        """close(SP3Stream self)"""
        return _gpstk.SP3Stream_close(self)


    def open(self, filename, mode):
        """open(SP3Stream self, char const * filename, std::ios::openmode mode)"""
        return _gpstk.SP3Stream_open(self, filename, mode)

    __swig_setmethods__["header"] = _gpstk.SP3Stream_header_set
    __swig_getmethods__["header"] = _gpstk.SP3Stream_header_get
    if _newclass:
        header = _swig_property(_gpstk.SP3Stream_header_get, _gpstk.SP3Stream_header_set)
    __swig_setmethods__["wroteEOF"] = _gpstk.SP3Stream_wroteEOF_set
    __swig_getmethods__["wroteEOF"] = _gpstk.SP3Stream_wroteEOF_get
    if _newclass:
        wroteEOF = _swig_property(_gpstk.SP3Stream_wroteEOF_get, _gpstk.SP3Stream_wroteEOF_set)
    __swig_setmethods__["writingMode"] = _gpstk.SP3Stream_writingMode_set
    __swig_getmethods__["writingMode"] = _gpstk.SP3Stream_writingMode_get
    if _newclass:
        writingMode = _swig_property(_gpstk.SP3Stream_writingMode_get, _gpstk.SP3Stream_writingMode_set)
    __swig_setmethods__["currentEpoch"] = _gpstk.SP3Stream_currentEpoch_set
    __swig_getmethods__["currentEpoch"] = _gpstk.SP3Stream_currentEpoch_get
    if _newclass:
        currentEpoch = _swig_property(_gpstk.SP3Stream_currentEpoch_get, _gpstk.SP3Stream_currentEpoch_set)
    __swig_setmethods__["lastLine"] = _gpstk.SP3Stream_lastLine_set
    __swig_getmethods__["lastLine"] = _gpstk.SP3Stream_lastLine_get
    if _newclass:
        lastLine = _swig_property(_gpstk.SP3Stream_lastLine_get, _gpstk.SP3Stream_lastLine_set)
    __swig_setmethods__["warnings"] = _gpstk.SP3Stream_warnings_set
    __swig_getmethods__["warnings"] = _gpstk.SP3Stream_warnings_get
    if _newclass:
        warnings = _swig_property(_gpstk.SP3Stream_warnings_get, _gpstk.SP3Stream_warnings_set)

    def inSP3Stream(fileName):
        """inSP3Stream(std::string const fileName) -> SP3Stream"""
        return _gpstk.SP3Stream_inSP3Stream(fileName)

    if _newclass:
        inSP3Stream = staticmethod(inSP3Stream)
    __swig_getmethods__["inSP3Stream"] = lambda x: inSP3Stream

    def outSP3Stream(fileName):
        """outSP3Stream(std::string const fileName) -> SP3Stream"""
        return _gpstk.SP3Stream_outSP3Stream(fileName)

    if _newclass:
        outSP3Stream = staticmethod(outSP3Stream)
    __swig_getmethods__["outSP3Stream"] = lambda x: outSP3Stream

    def _remove(ptr):
        """_remove(SP3Stream ptr)"""
        return _gpstk.SP3Stream__remove(ptr)

    if _newclass:
        _remove = staticmethod(_remove)
    __swig_getmethods__["_remove"] = lambda x: _remove

    def readHeader(self):
        """readHeader(SP3Stream self) -> SP3Header"""
        return _gpstk.SP3Stream_readHeader(self)


    def readData(self):
        """readData(SP3Stream self) -> SP3Data"""
        return _gpstk.SP3Stream_readData(self)


    def writeHeader(self, head):
        """writeHeader(SP3Stream self, SP3Header head)"""
        return _gpstk.SP3Stream_writeHeader(self, head)


    def writeData(self, data):
        """writeData(SP3Stream self, SP3Data data)"""
        return _gpstk.SP3Stream_writeData(self, data)

SP3Stream_swigregister = _gpstk.SP3Stream_swigregister
SP3Stream_swigregister(SP3Stream)

def SP3Stream_inSP3Stream(fileName):
    """SP3Stream_inSP3Stream(std::string const fileName) -> SP3Stream"""
    return _gpstk.SP3Stream_inSP3Stream(fileName)

def SP3Stream_outSP3Stream(fileName):
    """SP3Stream_outSP3Stream(std::string const fileName) -> SP3Stream"""
    return _gpstk.SP3Stream_outSP3Stream(fileName)

def SP3Stream__remove(ptr):
    """SP3Stream__remove(SP3Stream ptr)"""
    return _gpstk.SP3Stream__remove(ptr)

class PositionRecord(_object):
    """Proxy of C++ gpstk::PositionStoreDataRecord class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PositionRecord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Pos"] = _gpstk.PositionRecord_Pos_set
    __swig_getmethods__["Pos"] = _gpstk.PositionRecord_Pos_get
    if _newclass:
        Pos = _swig_property(_gpstk.PositionRecord_Pos_get, _gpstk.PositionRecord_Pos_set)
    __swig_setmethods__["sigPos"] = _gpstk.PositionRecord_sigPos_set
    __swig_getmethods__["sigPos"] = _gpstk.PositionRecord_sigPos_get
    if _newclass:
        sigPos = _swig_property(_gpstk.PositionRecord_sigPos_get, _gpstk.PositionRecord_sigPos_set)
    __swig_setmethods__["Vel"] = _gpstk.PositionRecord_Vel_set
    __swig_getmethods__["Vel"] = _gpstk.PositionRecord_Vel_get
    if _newclass:
        Vel = _swig_property(_gpstk.PositionRecord_Vel_get, _gpstk.PositionRecord_Vel_set)
    __swig_setmethods__["sigVel"] = _gpstk.PositionRecord_sigVel_set
    __swig_getmethods__["sigVel"] = _gpstk.PositionRecord_sigVel_get
    if _newclass:
        sigVel = _swig_property(_gpstk.PositionRecord_sigVel_get, _gpstk.PositionRecord_sigVel_set)
    __swig_setmethods__["Acc"] = _gpstk.PositionRecord_Acc_set
    __swig_getmethods__["Acc"] = _gpstk.PositionRecord_Acc_get
    if _newclass:
        Acc = _swig_property(_gpstk.PositionRecord_Acc_get, _gpstk.PositionRecord_Acc_set)
    __swig_setmethods__["sigAcc"] = _gpstk.PositionRecord_sigAcc_set
    __swig_getmethods__["sigAcc"] = _gpstk.PositionRecord_sigAcc_get
    if _newclass:
        sigAcc = _swig_property(_gpstk.PositionRecord_sigAcc_get, _gpstk.PositionRecord_sigAcc_set)

    def __init__(self):
        """__init__(gpstk::PositionStoreDataRecord self) -> PositionRecord"""
        this = _gpstk.new_PositionRecord()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_PositionRecord
    __del__ = lambda self: None
PositionRecord_swigregister = _gpstk.PositionRecord_swigregister
PositionRecord_swigregister(PositionRecord)

class TabularSatStore_PositionRecord(_object):
    """Proxy of C++ gpstk::TabularSatStore<(PositionRecord)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TabularSatStore_PositionRecord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TabularSatStore_PositionRecord, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_TabularSatStore_PositionRecord
    __del__ = lambda self: None

    def getValue(self, sat, ttag):
        """getValue(TabularSatStore_PositionRecord self, SatID sat, CommonTime ttag) -> PositionRecord"""
        return _gpstk.TabularSatStore_PositionRecord_getValue(self, sat, ttag)


    def getTableInterval(self, sat, ttag, nhalf, it1, it2, exactReturn=True):
        """
        getTableInterval(TabularSatStore_PositionRecord self, SatID sat, CommonTime ttag, int const & nhalf, gpstk::TabularSatStore< gpstk::PositionStoreDataRecord >::DataTable::const_iterator & it1, gpstk::TabularSatStore< gpstk::PositionStoreDataRecord >::DataTable::const_iterator & it2, bool exactReturn=True) -> bool
        getTableInterval(TabularSatStore_PositionRecord self, SatID sat, CommonTime ttag, int const & nhalf, gpstk::TabularSatStore< gpstk::PositionStoreDataRecord >::DataTable::const_iterator & it1, gpstk::TabularSatStore< gpstk::PositionStoreDataRecord >::DataTable::const_iterator & it2) -> bool
        """
        return _gpstk.TabularSatStore_PositionRecord_getTableInterval(self, sat, ttag, nhalf, it1, it2, exactReturn)


    def getNonCenteredTableInterval(self, sat, ttag, nhalf, it1, it2, exactReturn=True):
        """
        getNonCenteredTableInterval(TabularSatStore_PositionRecord self, SatID sat, CommonTime ttag, int const & nhalf, gpstk::TabularSatStore< gpstk::PositionStoreDataRecord >::DataTable::const_iterator & it1, gpstk::TabularSatStore< gpstk::PositionStoreDataRecord >::DataTable::const_iterator & it2, bool exactReturn=True) -> bool
        getNonCenteredTableInterval(TabularSatStore_PositionRecord self, SatID sat, CommonTime ttag, int const & nhalf, gpstk::TabularSatStore< gpstk::PositionStoreDataRecord >::DataTable::const_iterator & it1, gpstk::TabularSatStore< gpstk::PositionStoreDataRecord >::DataTable::const_iterator & it2) -> bool
        """
        return _gpstk.TabularSatStore_PositionRecord_getNonCenteredTableInterval(self, sat, ttag, nhalf, it1, it2, exactReturn)


    def edit(self, *args):
        """
        edit(TabularSatStore_PositionRecord self, CommonTime tmin, CommonTime tmax)
        edit(TabularSatStore_PositionRecord self, CommonTime tmin)
        """
        return _gpstk.TabularSatStore_PositionRecord_edit(self, *args)


    def clear(self):
        """clear(TabularSatStore_PositionRecord self)"""
        return _gpstk.TabularSatStore_PositionRecord_clear(self)


    def isPresent(self, sat):
        """isPresent(TabularSatStore_PositionRecord self, SatID sat) -> bool"""
        return _gpstk.TabularSatStore_PositionRecord_isPresent(self, sat)


    def checkTimeSystem(self, ts):
        """checkTimeSystem(TabularSatStore_PositionRecord self, TimeSystem ts)"""
        return _gpstk.TabularSatStore_PositionRecord_checkTimeSystem(self, ts)


    def getInitialTime(self, *args):
        """
        getInitialTime(TabularSatStore_PositionRecord self) -> CommonTime
        getInitialTime(TabularSatStore_PositionRecord self, SatID sat) -> CommonTime
        """
        return _gpstk.TabularSatStore_PositionRecord_getInitialTime(self, *args)


    def getFinalTime(self, *args):
        """
        getFinalTime(TabularSatStore_PositionRecord self) -> CommonTime
        getFinalTime(TabularSatStore_PositionRecord self, SatID sat) -> CommonTime
        """
        return _gpstk.TabularSatStore_PositionRecord_getFinalTime(self, *args)


    def dumpInterval(self, *args):
        """
        dumpInterval(TabularSatStore_PositionRecord self, gpstk::TabularSatStore< gpstk::PositionStoreDataRecord >::DataTable::const_iterator & it1, gpstk::TabularSatStore< gpstk::PositionStoreDataRecord >::DataTable::const_iterator & it2, std::ostream & os)
        dumpInterval(TabularSatStore_PositionRecord self, gpstk::TabularSatStore< gpstk::PositionStoreDataRecord >::DataTable::const_iterator & it1, gpstk::TabularSatStore< gpstk::PositionStoreDataRecord >::DataTable::const_iterator & it2)
        """
        return _gpstk.TabularSatStore_PositionRecord_dumpInterval(self, *args)


    def hasPosition(self):
        """hasPosition(TabularSatStore_PositionRecord self) -> bool"""
        return _gpstk.TabularSatStore_PositionRecord_hasPosition(self)


    def hasVelocity(self):
        """hasVelocity(TabularSatStore_PositionRecord self) -> bool"""
        return _gpstk.TabularSatStore_PositionRecord_hasVelocity(self)


    def hasClockBias(self):
        """hasClockBias(TabularSatStore_PositionRecord self) -> bool"""
        return _gpstk.TabularSatStore_PositionRecord_hasClockBias(self)


    def hasClockDrift(self):
        """hasClockDrift(TabularSatStore_PositionRecord self) -> bool"""
        return _gpstk.TabularSatStore_PositionRecord_hasClockDrift(self)


    def nsats(self):
        """nsats(TabularSatStore_PositionRecord self) -> int"""
        return _gpstk.TabularSatStore_PositionRecord_nsats(self)


    def hasSatellite(self, sat):
        """hasSatellite(TabularSatStore_PositionRecord self, SatID sat) -> bool"""
        return _gpstk.TabularSatStore_PositionRecord_hasSatellite(self, sat)


    def getSatList(self):
        """getSatList(TabularSatStore_PositionRecord self) -> vector_SatID"""
        return _gpstk.TabularSatStore_PositionRecord_getSatList(self)


    def ndata(self, *args):
        """
        ndata(TabularSatStore_PositionRecord self) -> int
        ndata(TabularSatStore_PositionRecord self, SatID sat) -> int
        ndata(TabularSatStore_PositionRecord self, gpstk::SatID::SatelliteSystem const & sys) -> int
        """
        return _gpstk.TabularSatStore_PositionRecord_ndata(self, *args)


    def size(self):
        """size(TabularSatStore_PositionRecord self) -> int"""
        return _gpstk.TabularSatStore_PositionRecord_size(self)


    def nomTimeStep(self, sat):
        """nomTimeStep(TabularSatStore_PositionRecord self, SatID sat) -> double"""
        return _gpstk.TabularSatStore_PositionRecord_nomTimeStep(self, sat)


    def isDataGapCheck(self):
        """isDataGapCheck(TabularSatStore_PositionRecord self) -> bool"""
        return _gpstk.TabularSatStore_PositionRecord_isDataGapCheck(self)


    def disableDataGapCheck(self):
        """disableDataGapCheck(TabularSatStore_PositionRecord self)"""
        return _gpstk.TabularSatStore_PositionRecord_disableDataGapCheck(self)


    def getGapInterval(self):
        """getGapInterval(TabularSatStore_PositionRecord self) -> double"""
        return _gpstk.TabularSatStore_PositionRecord_getGapInterval(self)


    def setGapInterval(self, interval):
        """setGapInterval(TabularSatStore_PositionRecord self, double interval)"""
        return _gpstk.TabularSatStore_PositionRecord_setGapInterval(self, interval)


    def isIntervalCheck(self):
        """isIntervalCheck(TabularSatStore_PositionRecord self) -> bool"""
        return _gpstk.TabularSatStore_PositionRecord_isIntervalCheck(self)


    def disableIntervalCheck(self):
        """disableIntervalCheck(TabularSatStore_PositionRecord self)"""
        return _gpstk.TabularSatStore_PositionRecord_disableIntervalCheck(self)


    def getMaxInterval(self):
        """getMaxInterval(TabularSatStore_PositionRecord self) -> double"""
        return _gpstk.TabularSatStore_PositionRecord_getMaxInterval(self)


    def setMaxInterval(self, interval):
        """setMaxInterval(TabularSatStore_PositionRecord self, double interval)"""
        return _gpstk.TabularSatStore_PositionRecord_setMaxInterval(self, interval)


    def getTimeSystem(self):
        """getTimeSystem(TabularSatStore_PositionRecord self) -> TimeSystem"""
        return _gpstk.TabularSatStore_PositionRecord_getTimeSystem(self)


    def setTimeSystem(self, ts):
        """setTimeSystem(TabularSatStore_PositionRecord self, TimeSystem ts)"""
        return _gpstk.TabularSatStore_PositionRecord_setTimeSystem(self, ts)

TabularSatStore_PositionRecord_swigregister = _gpstk.TabularSatStore_PositionRecord_swigregister
TabularSatStore_PositionRecord_swigregister(TabularSatStore_PositionRecord)

class PositionSatStore(TabularSatStore_PositionRecord):
    """Proxy of C++ gpstk::PositionSatStore class"""
    __swig_setmethods__ = {}
    for _s in [TabularSatStore_PositionRecord]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PositionSatStore, name, value)
    __swig_getmethods__ = {}
    for _s in [TabularSatStore_PositionRecord]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PositionSatStore, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::PositionSatStore self) -> PositionSatStore"""
        this = _gpstk.new_PositionSatStore()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_PositionSatStore
    __del__ = lambda self: None

    def hasAccleration(self):
        """hasAccleration(PositionSatStore self) -> bool"""
        return _gpstk.PositionSatStore_hasAccleration(self)


    def getValue(self, sat, ttag):
        """getValue(PositionSatStore self, SatID sat, CommonTime ttag) -> PositionRecord"""
        return _gpstk.PositionSatStore_getValue(self, sat, ttag)


    def getPosition(self, sat, ttag):
        """getPosition(PositionSatStore self, SatID sat, CommonTime ttag) -> Triple"""
        return _gpstk.PositionSatStore_getPosition(self, sat, ttag)


    def getVelocity(self, sat, ttag):
        """getVelocity(PositionSatStore self, SatID sat, CommonTime ttag) -> Triple"""
        return _gpstk.PositionSatStore_getVelocity(self, sat, ttag)


    def getAcceleration(self, sat, ttag):
        """getAcceleration(PositionSatStore self, SatID sat, CommonTime ttag) -> Triple"""
        return _gpstk.PositionSatStore_getAcceleration(self, sat, ttag)


    def addPositionRecord(self, sat, ttag, rec):
        """addPositionRecord(PositionSatStore self, SatID sat, CommonTime ttag, PositionRecord rec)"""
        return _gpstk.PositionSatStore_addPositionRecord(self, sat, ttag, rec)


    def addPositionData(self, *args):
        """
        addPositionData(PositionSatStore self, SatID sat, CommonTime ttag, Triple Pos, Triple Sig)
        addPositionData(PositionSatStore self, SatID sat, CommonTime ttag, Triple Pos)
        """
        return _gpstk.PositionSatStore_addPositionData(self, *args)


    def addVelocityData(self, *args):
        """
        addVelocityData(PositionSatStore self, SatID sat, CommonTime ttag, Triple Vel, Triple Sig)
        addVelocityData(PositionSatStore self, SatID sat, CommonTime ttag, Triple Vel)
        """
        return _gpstk.PositionSatStore_addVelocityData(self, *args)


    def addAccelerationData(self, *args):
        """
        addAccelerationData(PositionSatStore self, SatID sat, CommonTime ttag, Triple Acc, Triple Sig)
        addAccelerationData(PositionSatStore self, SatID sat, CommonTime ttag, Triple Acc)
        """
        return _gpstk.PositionSatStore_addAccelerationData(self, *args)


    def getInterpolationOrder(self):
        """getInterpolationOrder(PositionSatStore self) -> unsigned int"""
        return _gpstk.PositionSatStore_getInterpolationOrder(self)


    def setInterpolationOrder(self, order):
        """setInterpolationOrder(PositionSatStore self, unsigned int order)"""
        return _gpstk.PositionSatStore_setInterpolationOrder(self, order)


    def rejectBadPositions(self, flag):
        """rejectBadPositions(PositionSatStore self, bool const flag)"""
        return _gpstk.PositionSatStore_rejectBadPositions(self, flag)

PositionSatStore_swigregister = _gpstk.PositionSatStore_swigregister
PositionSatStore_swigregister(PositionSatStore)

class SP3EphemerisStore(XvtStore_SatID):
    """Proxy of C++ gpstk::SP3EphemerisStore class"""
    __swig_setmethods__ = {}
    for _s in [XvtStore_SatID]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SP3EphemerisStore, name, value)
    __swig_getmethods__ = {}
    for _s in [XvtStore_SatID]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SP3EphemerisStore, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::SP3EphemerisStore self) -> SP3EphemerisStore"""
        this = _gpstk.new_SP3EphemerisStore()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_SP3EphemerisStore
    __del__ = lambda self: None

    def getXvt(self, sat, ttag):
        """getXvt(SP3EphemerisStore self, SatID sat, CommonTime ttag) -> Xvt"""
        return _gpstk.SP3EphemerisStore_getXvt(self, sat, ttag)


    def edit(self, *args):
        """
        edit(SP3EphemerisStore self, CommonTime tmin, CommonTime tmax)
        edit(SP3EphemerisStore self, CommonTime tmin)
        """
        return _gpstk.SP3EphemerisStore_edit(self, *args)


    def clear(self):
        """clear(SP3EphemerisStore self)"""
        return _gpstk.SP3EphemerisStore_clear(self)


    def getTimeSystem(self):
        """getTimeSystem(SP3EphemerisStore self) -> TimeSystem"""
        return _gpstk.SP3EphemerisStore_getTimeSystem(self)


    def isPresent(self, sat):
        """isPresent(SP3EphemerisStore self, SatID sat) -> bool"""
        return _gpstk.SP3EphemerisStore_isPresent(self, sat)


    def hasVelocity(self):
        """hasVelocity(SP3EphemerisStore self) -> bool"""
        return _gpstk.SP3EphemerisStore_hasVelocity(self)


    def dumpPosition(self, *args):
        """
        dumpPosition(SP3EphemerisStore self, std::ostream & os, short detail=0)
        dumpPosition(SP3EphemerisStore self, std::ostream & os)
        dumpPosition(SP3EphemerisStore self)
        """
        return _gpstk.SP3EphemerisStore_dumpPosition(self, *args)


    def dumpClock(self, *args):
        """
        dumpClock(SP3EphemerisStore self, std::ostream & os, short detail=0)
        dumpClock(SP3EphemerisStore self, std::ostream & os)
        dumpClock(SP3EphemerisStore self)
        """
        return _gpstk.SP3EphemerisStore_dumpClock(self, *args)


    def getPosition(self, sat, ttag):
        """getPosition(SP3EphemerisStore self, SatID sat, CommonTime ttag) -> Triple"""
        return _gpstk.SP3EphemerisStore_getPosition(self, sat, ttag)


    def getVelocity(self, sat, ttag):
        """getVelocity(SP3EphemerisStore self, SatID sat, CommonTime ttag) -> Triple"""
        return _gpstk.SP3EphemerisStore_getVelocity(self, sat, ttag)


    def getAcceleration(self, sat, ttag):
        """getAcceleration(SP3EphemerisStore self, SatID sat, CommonTime ttag) -> Triple"""
        return _gpstk.SP3EphemerisStore_getAcceleration(self, sat, ttag)


    def clearPosition(self):
        """clearPosition(SP3EphemerisStore self)"""
        return _gpstk.SP3EphemerisStore_clearPosition(self)


    def clearClock(self):
        """clearClock(SP3EphemerisStore self)"""
        return _gpstk.SP3EphemerisStore_clearClock(self)


    def useRinexClockData(self):
        """useRinexClockData(SP3EphemerisStore self)"""
        return _gpstk.SP3EphemerisStore_useRinexClockData(self)


    def useSP3ClockData(self):
        """useSP3ClockData(SP3EphemerisStore self)"""
        return _gpstk.SP3EphemerisStore_useSP3ClockData(self)


    def getPositionInitialTime(self, *args):
        """
        getPositionInitialTime(SP3EphemerisStore self) -> CommonTime
        getPositionInitialTime(SP3EphemerisStore self, SatID sat) -> CommonTime
        """
        return _gpstk.SP3EphemerisStore_getPositionInitialTime(self, *args)


    def getPositionFinalTime(self, *args):
        """
        getPositionFinalTime(SP3EphemerisStore self) -> CommonTime
        getPositionFinalTime(SP3EphemerisStore self, SatID sat) -> CommonTime
        """
        return _gpstk.SP3EphemerisStore_getPositionFinalTime(self, *args)


    def getClockInitialTime(self, *args):
        """
        getClockInitialTime(SP3EphemerisStore self) -> CommonTime
        getClockInitialTime(SP3EphemerisStore self, SatID sat) -> CommonTime
        """
        return _gpstk.SP3EphemerisStore_getClockInitialTime(self, *args)


    def getClockFinalTime(self, *args):
        """
        getClockFinalTime(SP3EphemerisStore self) -> CommonTime
        getClockFinalTime(SP3EphemerisStore self, SatID sat) -> CommonTime
        """
        return _gpstk.SP3EphemerisStore_getClockFinalTime(self, *args)


    def getInitialTime(self, *args):
        """
        getInitialTime(SP3EphemerisStore self) -> CommonTime
        getInitialTime(SP3EphemerisStore self, SatID sat) -> CommonTime
        """
        return _gpstk.SP3EphemerisStore_getInitialTime(self, *args)


    def getFinalTime(self, *args):
        """
        getFinalTime(SP3EphemerisStore self) -> CommonTime
        getFinalTime(SP3EphemerisStore self, SatID sat) -> CommonTime
        """
        return _gpstk.SP3EphemerisStore_getFinalTime(self, *args)


    def getPositionTimeStep(self, sat):
        """getPositionTimeStep(SP3EphemerisStore self, SatID sat) -> double"""
        return _gpstk.SP3EphemerisStore_getPositionTimeStep(self, sat)


    def getClockTimeStep(self, sat):
        """getClockTimeStep(SP3EphemerisStore self, SatID sat) -> double"""
        return _gpstk.SP3EphemerisStore_getClockTimeStep(self, sat)


    def getPositionInterpOrder(self):
        """getPositionInterpOrder(SP3EphemerisStore self) -> unsigned int"""
        return _gpstk.SP3EphemerisStore_getPositionInterpOrder(self)


    def setPositionInterpOrder(self, order):
        """setPositionInterpOrder(SP3EphemerisStore self, unsigned int order)"""
        return _gpstk.SP3EphemerisStore_setPositionInterpOrder(self, order)


    def getClockInterpOrder(self):
        """getClockInterpOrder(SP3EphemerisStore self) -> unsigned int"""
        return _gpstk.SP3EphemerisStore_getClockInterpOrder(self)


    def setClockInterpOrder(self, order):
        """setClockInterpOrder(SP3EphemerisStore self, unsigned int order)"""
        return _gpstk.SP3EphemerisStore_setClockInterpOrder(self, order)


    def setClockLagrangeInterp(self):
        """setClockLagrangeInterp(SP3EphemerisStore self)"""
        return _gpstk.SP3EphemerisStore_setClockLagrangeInterp(self)


    def setClockLinearInterp(self):
        """setClockLinearInterp(SP3EphemerisStore self)"""
        return _gpstk.SP3EphemerisStore_setClockLinearInterp(self)


    def getSatList(self):
        """getSatList(SP3EphemerisStore self) -> vector_SatID"""
        return _gpstk.SP3EphemerisStore_getSatList(self)


    def getPositionSatList(self):
        """getPositionSatList(SP3EphemerisStore self) -> vector_SatID"""
        return _gpstk.SP3EphemerisStore_getPositionSatList(self)


    def getClockSatList(self):
        """getClockSatList(SP3EphemerisStore self) -> vector_SatID"""
        return _gpstk.SP3EphemerisStore_getClockSatList(self)


    def ndata(self, *args):
        """
        ndata(SP3EphemerisStore self) -> int
        ndata(SP3EphemerisStore self, SatID sat) -> int
        ndata(SP3EphemerisStore self, gpstk::SatID::SatelliteSystem const & sys) -> int
        """
        return _gpstk.SP3EphemerisStore_ndata(self, *args)


    def ndataPosition(self, *args):
        """
        ndataPosition(SP3EphemerisStore self) -> int
        ndataPosition(SP3EphemerisStore self, SatID sat) -> int
        ndataPosition(SP3EphemerisStore self, gpstk::SatID::SatelliteSystem const & sys) -> int
        """
        return _gpstk.SP3EphemerisStore_ndataPosition(self, *args)


    def ndataClock(self, *args):
        """
        ndataClock(SP3EphemerisStore self) -> int
        ndataClock(SP3EphemerisStore self, SatID sat) -> int
        ndataClock(SP3EphemerisStore self, gpstk::SatID::SatelliteSystem const & sys) -> int
        """
        return _gpstk.SP3EphemerisStore_ndataClock(self, *args)


    def size(self):
        """size(SP3EphemerisStore self) -> int"""
        return _gpstk.SP3EphemerisStore_size(self)


    def loadFile(self, filename):
        """loadFile(SP3EphemerisStore self, std::string const & filename)"""
        return _gpstk.SP3EphemerisStore_loadFile(self, filename)


    def loadSP3File(self, filename):
        """loadSP3File(SP3EphemerisStore self, std::string const & filename)"""
        return _gpstk.SP3EphemerisStore_loadSP3File(self, filename)


    def loadRinexClockFile(self, filename):
        """loadRinexClockFile(SP3EphemerisStore self, std::string const & filename)"""
        return _gpstk.SP3EphemerisStore_loadRinexClockFile(self, filename)


    def addPositionRecord(self, sat, ttag, data):
        """addPositionRecord(SP3EphemerisStore self, SatID sat, CommonTime ttag, PositionRecord data)"""
        return _gpstk.SP3EphemerisStore_addPositionRecord(self, sat, ttag, data)


    def addPositionData(self, sat, ttag, Pos, sig):
        """addPositionData(SP3EphemerisStore self, SatID sat, CommonTime ttag, Triple Pos, Triple sig)"""
        return _gpstk.SP3EphemerisStore_addPositionData(self, sat, ttag, Pos, sig)


    def addVelocityData(self, sat, ttag, Vel, sig):
        """addVelocityData(SP3EphemerisStore self, SatID sat, CommonTime ttag, Triple Vel, Triple sig)"""
        return _gpstk.SP3EphemerisStore_addVelocityData(self, sat, ttag, Vel, sig)


    def addClockRecord(self, sat, ttag, rec):
        """addClockRecord(SP3EphemerisStore self, SatID sat, CommonTime ttag, ClockRecord rec)"""
        return _gpstk.SP3EphemerisStore_addClockRecord(self, sat, ttag, rec)


    def addClockBias(self, sat, ttag, bias, sig=0.0):
        """
        addClockBias(SP3EphemerisStore self, SatID sat, CommonTime ttag, double const & bias, double const & sig=0.0)
        addClockBias(SP3EphemerisStore self, SatID sat, CommonTime ttag, double const & bias)
        """
        return _gpstk.SP3EphemerisStore_addClockBias(self, sat, ttag, bias, sig)


    def addClockDrift(self, sat, ttag, drift, sig=0.0):
        """
        addClockDrift(SP3EphemerisStore self, SatID sat, CommonTime ttag, double const & drift, double const & sig=0.0)
        addClockDrift(SP3EphemerisStore self, SatID sat, CommonTime ttag, double const & drift)
        """
        return _gpstk.SP3EphemerisStore_addClockDrift(self, sat, ttag, drift, sig)


    def addClockAcceleration(self, sat, ttag, accel, sig=0.0):
        """
        addClockAcceleration(SP3EphemerisStore self, SatID sat, CommonTime ttag, double const & accel, double const & sig=0.0)
        addClockAcceleration(SP3EphemerisStore self, SatID sat, CommonTime ttag, double const & accel)
        """
        return _gpstk.SP3EphemerisStore_addClockAcceleration(self, sat, ttag, accel, sig)


    def nfiles(self):
        """nfiles(SP3EphemerisStore self) -> int"""
        return _gpstk.SP3EphemerisStore_nfiles(self)


    def nSP3files(self):
        """nSP3files(SP3EphemerisStore self) -> int"""
        return _gpstk.SP3EphemerisStore_nSP3files(self)


    def nClockfiles(self):
        """nClockfiles(SP3EphemerisStore self) -> int"""
        return _gpstk.SP3EphemerisStore_nClockfiles(self)


    def hasClockDrift(self):
        """hasClockDrift(SP3EphemerisStore self) -> bool"""
        return _gpstk.SP3EphemerisStore_hasClockDrift(self)


    def rejectBadPositions(self, flag):
        """rejectBadPositions(SP3EphemerisStore self, bool const flag)"""
        return _gpstk.SP3EphemerisStore_rejectBadPositions(self, flag)


    def rejectBadClocks(self, flag):
        """rejectBadClocks(SP3EphemerisStore self, bool const flag)"""
        return _gpstk.SP3EphemerisStore_rejectBadClocks(self, flag)


    def rejectPredPositions(self, flag):
        """rejectPredPositions(SP3EphemerisStore self, bool const flag)"""
        return _gpstk.SP3EphemerisStore_rejectPredPositions(self, flag)


    def rejectPredClocks(self, flag):
        """rejectPredClocks(SP3EphemerisStore self, bool const flag)"""
        return _gpstk.SP3EphemerisStore_rejectPredClocks(self, flag)


    def isPosDataGapCheck(self):
        """isPosDataGapCheck(SP3EphemerisStore self) -> bool"""
        return _gpstk.SP3EphemerisStore_isPosDataGapCheck(self)


    def isClkDataGapCheck(self):
        """isClkDataGapCheck(SP3EphemerisStore self) -> bool"""
        return _gpstk.SP3EphemerisStore_isClkDataGapCheck(self)


    def disableDataGapCheck(self):
        """disableDataGapCheck(SP3EphemerisStore self)"""
        return _gpstk.SP3EphemerisStore_disableDataGapCheck(self)


    def disablePosDataGapCheck(self):
        """disablePosDataGapCheck(SP3EphemerisStore self)"""
        return _gpstk.SP3EphemerisStore_disablePosDataGapCheck(self)


    def disableClockDataGapCheck(self):
        """disableClockDataGapCheck(SP3EphemerisStore self)"""
        return _gpstk.SP3EphemerisStore_disableClockDataGapCheck(self)


    def getPosGapInterval(self):
        """getPosGapInterval(SP3EphemerisStore self) -> double"""
        return _gpstk.SP3EphemerisStore_getPosGapInterval(self)


    def getClockGapInterval(self):
        """getClockGapInterval(SP3EphemerisStore self) -> double"""
        return _gpstk.SP3EphemerisStore_getClockGapInterval(self)


    def setPosGapInterval(self, interval):
        """setPosGapInterval(SP3EphemerisStore self, double interval)"""
        return _gpstk.SP3EphemerisStore_setPosGapInterval(self, interval)


    def setClockGapInterval(self, interval):
        """setClockGapInterval(SP3EphemerisStore self, double interval)"""
        return _gpstk.SP3EphemerisStore_setClockGapInterval(self, interval)


    def isPosIntervalCheck(self):
        """isPosIntervalCheck(SP3EphemerisStore self) -> bool"""
        return _gpstk.SP3EphemerisStore_isPosIntervalCheck(self)


    def isClkIntervalCheck(self):
        """isClkIntervalCheck(SP3EphemerisStore self) -> bool"""
        return _gpstk.SP3EphemerisStore_isClkIntervalCheck(self)


    def disableIntervalCheck(self):
        """disableIntervalCheck(SP3EphemerisStore self)"""
        return _gpstk.SP3EphemerisStore_disableIntervalCheck(self)


    def disablePosIntervalCheck(self):
        """disablePosIntervalCheck(SP3EphemerisStore self)"""
        return _gpstk.SP3EphemerisStore_disablePosIntervalCheck(self)


    def disableClockIntervalCheck(self):
        """disableClockIntervalCheck(SP3EphemerisStore self)"""
        return _gpstk.SP3EphemerisStore_disableClockIntervalCheck(self)


    def getPosMaxInterval(self):
        """getPosMaxInterval(SP3EphemerisStore self) -> double"""
        return _gpstk.SP3EphemerisStore_getPosMaxInterval(self)


    def getClockMaxInterval(self):
        """getClockMaxInterval(SP3EphemerisStore self) -> double"""
        return _gpstk.SP3EphemerisStore_getClockMaxInterval(self)


    def setPosMaxInterval(self, interval):
        """setPosMaxInterval(SP3EphemerisStore self, double interval)"""
        return _gpstk.SP3EphemerisStore_setPosMaxInterval(self, interval)


    def setClockMaxInterval(self, interval):
        """setClockMaxInterval(SP3EphemerisStore self, double interval)"""
        return _gpstk.SP3EphemerisStore_setClockMaxInterval(self, interval)


    def velocityIsPresent(self):
        """velocityIsPresent(SP3EphemerisStore self) -> bool"""
        return _gpstk.SP3EphemerisStore_velocityIsPresent(self)


    def clockIsPresent(self):
        """clockIsPresent(SP3EphemerisStore self) -> bool"""
        return _gpstk.SP3EphemerisStore_clockIsPresent(self)


    def getInterpolationOrder(self):
        """getInterpolationOrder(SP3EphemerisStore self) -> unsigned int"""
        return _gpstk.SP3EphemerisStore_getInterpolationOrder(self)


    def setInterpolationOrder(self, order):
        """setInterpolationOrder(SP3EphemerisStore self, unsigned int order)"""
        return _gpstk.SP3EphemerisStore_setInterpolationOrder(self, order)


    def __str__(self):
        """__str__(SP3EphemerisStore self) -> std::string"""
        return _gpstk.SP3EphemerisStore___str__(self)

SP3EphemerisStore_swigregister = _gpstk.SP3EphemerisStore_swigregister
SP3EphemerisStore_swigregister(SP3EphemerisStore)


def RegisterARLUTExtendedTypes():
    """RegisterARLUTExtendedTypes() -> int"""
    return _gpstk.RegisterARLUTExtendedTypes()

def isSP3File(file):
    """isSP3File(std::string const & file) -> bool"""
    return _gpstk.isSP3File(file)

def isRinexNavFile(file):
    """isRinexNavFile(std::string const & file) -> bool"""
    return _gpstk.isRinexNavFile(file)

def isRinex3NavFile(file):
    """isRinex3NavFile(std::string const & file) -> bool"""
    return _gpstk.isRinex3NavFile(file)

def isRinexObsFile(file):
    """isRinexObsFile(std::string const & file) -> bool"""
    return _gpstk.isRinexObsFile(file)

def isRinex3ObsFile(file):
    """isRinex3ObsFile(std::string const & file) -> bool"""
    return _gpstk.isRinex3ObsFile(file)

def sortRinexObsFiles(files):
    """sortRinexObsFiles(vector_string files) -> std::string"""
    return _gpstk.sortRinexObsFiles(files)

def sortRinex3ObsFiles(files):
    """sortRinex3ObsFiles(vector_string files) -> std::string"""
    return _gpstk.sortRinex3ObsFiles(files)

def FillEphemerisStore(files, PE, BCE):
    """FillEphemerisStore(vector_string files, SP3EphemerisStore PE, GPSEphemerisStore BCE) -> int"""
    return _gpstk.FillEphemerisStore(files, PE, BCE)
class SEMBase(FFData):
    """Proxy of C++ gpstk::SEMBase class"""
    __swig_setmethods__ = {}
    for _s in [FFData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SEMBase, name, value)
    __swig_getmethods__ = {}
    for _s in [FFData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SEMBase, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_SEMBase
    __del__ = lambda self: None
SEMBase_swigregister = _gpstk.SEMBase_swigregister
SEMBase_swigregister(SEMBase)

class SEMHeader(SEMBase):
    """Proxy of C++ gpstk::SEMHeader class"""
    __swig_setmethods__ = {}
    for _s in [SEMBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SEMHeader, name, value)
    __swig_getmethods__ = {}
    for _s in [SEMBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SEMHeader, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::SEMHeader self) -> SEMHeader"""
        this = _gpstk.new_SEMHeader()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_SEMHeader
    __del__ = lambda self: None
    __swig_setmethods__["nearFullWeek"] = _gpstk.SEMHeader_nearFullWeek_set
    __swig_getmethods__["nearFullWeek"] = _gpstk.SEMHeader_nearFullWeek_get
    if _newclass:
        nearFullWeek = _swig_property(_gpstk.SEMHeader_nearFullWeek_get, _gpstk.SEMHeader_nearFullWeek_set)
    __swig_setmethods__["numRecords"] = _gpstk.SEMHeader_numRecords_set
    __swig_getmethods__["numRecords"] = _gpstk.SEMHeader_numRecords_get
    if _newclass:
        numRecords = _swig_property(_gpstk.SEMHeader_numRecords_get, _gpstk.SEMHeader_numRecords_set)
    __swig_setmethods__["Title"] = _gpstk.SEMHeader_Title_set
    __swig_getmethods__["Title"] = _gpstk.SEMHeader_Title_get
    if _newclass:
        Title = _swig_property(_gpstk.SEMHeader_Title_get, _gpstk.SEMHeader_Title_set)
    __swig_setmethods__["week"] = _gpstk.SEMHeader_week_set
    __swig_getmethods__["week"] = _gpstk.SEMHeader_week_get
    if _newclass:
        week = _swig_property(_gpstk.SEMHeader_week_get, _gpstk.SEMHeader_week_set)
    __swig_setmethods__["Toa"] = _gpstk.SEMHeader_Toa_set
    __swig_getmethods__["Toa"] = _gpstk.SEMHeader_Toa_get
    if _newclass:
        Toa = _swig_property(_gpstk.SEMHeader_Toa_get, _gpstk.SEMHeader_Toa_set)

    def isHeader(self):
        """isHeader(SEMHeader self) -> bool"""
        return _gpstk.SEMHeader_isHeader(self)


    def __str__(self):
        """__str__(SEMHeader self) -> std::string"""
        return _gpstk.SEMHeader___str__(self)

SEMHeader_swigregister = _gpstk.SEMHeader_swigregister
SEMHeader_swigregister(SEMHeader)

class SEMStream(FFTextStream):
    """Proxy of C++ gpstk::SEMStream class"""
    __swig_setmethods__ = {}
    for _s in [FFTextStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SEMStream, name, value)
    __swig_getmethods__ = {}
    for _s in [FFTextStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SEMStream, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::SEMStream self) -> SEMStream
        __init__(gpstk::SEMStream self, char const * fn, std::ios::openmode mode) -> SEMStream
        __init__(gpstk::SEMStream self, char const * fn) -> SEMStream
        """
        this = _gpstk.new_SEMStream(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_SEMStream
    __del__ = lambda self: None

    def open(self, fn, mode):
        """open(SEMStream self, char const * fn, std::ios::openmode mode)"""
        return _gpstk.SEMStream_open(self, fn, mode)

    __swig_setmethods__["header"] = _gpstk.SEMStream_header_set
    __swig_getmethods__["header"] = _gpstk.SEMStream_header_get
    if _newclass:
        header = _swig_property(_gpstk.SEMStream_header_get, _gpstk.SEMStream_header_set)
    __swig_setmethods__["headerRead"] = _gpstk.SEMStream_headerRead_set
    __swig_getmethods__["headerRead"] = _gpstk.SEMStream_headerRead_get
    if _newclass:
        headerRead = _swig_property(_gpstk.SEMStream_headerRead_get, _gpstk.SEMStream_headerRead_set)

    def inSEMStream(fileName):
        """inSEMStream(std::string const fileName) -> SEMStream"""
        return _gpstk.SEMStream_inSEMStream(fileName)

    if _newclass:
        inSEMStream = staticmethod(inSEMStream)
    __swig_getmethods__["inSEMStream"] = lambda x: inSEMStream

    def outSEMStream(fileName):
        """outSEMStream(std::string const fileName) -> SEMStream"""
        return _gpstk.SEMStream_outSEMStream(fileName)

    if _newclass:
        outSEMStream = staticmethod(outSEMStream)
    __swig_getmethods__["outSEMStream"] = lambda x: outSEMStream

    def _remove(ptr):
        """_remove(SEMStream ptr)"""
        return _gpstk.SEMStream__remove(ptr)

    if _newclass:
        _remove = staticmethod(_remove)
    __swig_getmethods__["_remove"] = lambda x: _remove

    def readHeader(self):
        """readHeader(SEMStream self) -> SEMHeader"""
        return _gpstk.SEMStream_readHeader(self)


    def readData(self):
        """readData(SEMStream self) -> SEMData"""
        return _gpstk.SEMStream_readData(self)


    def writeHeader(self, head):
        """writeHeader(SEMStream self, SEMHeader head)"""
        return _gpstk.SEMStream_writeHeader(self, head)


    def writeData(self, data):
        """writeData(SEMStream self, SEMData data)"""
        return _gpstk.SEMStream_writeData(self, data)

SEMStream_swigregister = _gpstk.SEMStream_swigregister
SEMStream_swigregister(SEMStream)

def SEMStream_inSEMStream(fileName):
    """SEMStream_inSEMStream(std::string const fileName) -> SEMStream"""
    return _gpstk.SEMStream_inSEMStream(fileName)

def SEMStream_outSEMStream(fileName):
    """SEMStream_outSEMStream(std::string const fileName) -> SEMStream"""
    return _gpstk.SEMStream_outSEMStream(fileName)

def SEMStream__remove(ptr):
    """SEMStream__remove(SEMStream ptr)"""
    return _gpstk.SEMStream__remove(ptr)

class SEMData(SEMBase):
    """Proxy of C++ gpstk::SEMData class"""
    __swig_setmethods__ = {}
    for _s in [SEMBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SEMData, name, value)
    __swig_getmethods__ = {}
    for _s in [SEMBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SEMData, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::SEMData self) -> SEMData"""
        this = _gpstk.new_SEMData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_SEMData
    __del__ = lambda self: None
    __swig_setmethods__["PRN"] = _gpstk.SEMData_PRN_set
    __swig_getmethods__["PRN"] = _gpstk.SEMData_PRN_get
    if _newclass:
        PRN = _swig_property(_gpstk.SEMData_PRN_get, _gpstk.SEMData_PRN_set)
    __swig_setmethods__["SVNnum"] = _gpstk.SEMData_SVNnum_set
    __swig_getmethods__["SVNnum"] = _gpstk.SEMData_SVNnum_get
    if _newclass:
        SVNnum = _swig_property(_gpstk.SEMData_SVNnum_get, _gpstk.SEMData_SVNnum_set)
    __swig_setmethods__["URAnum"] = _gpstk.SEMData_URAnum_set
    __swig_getmethods__["URAnum"] = _gpstk.SEMData_URAnum_get
    if _newclass:
        URAnum = _swig_property(_gpstk.SEMData_URAnum_get, _gpstk.SEMData_URAnum_set)
    __swig_setmethods__["ecc"] = _gpstk.SEMData_ecc_set
    __swig_getmethods__["ecc"] = _gpstk.SEMData_ecc_get
    if _newclass:
        ecc = _swig_property(_gpstk.SEMData_ecc_get, _gpstk.SEMData_ecc_set)
    __swig_setmethods__["i_offset"] = _gpstk.SEMData_i_offset_set
    __swig_getmethods__["i_offset"] = _gpstk.SEMData_i_offset_get
    if _newclass:
        i_offset = _swig_property(_gpstk.SEMData_i_offset_get, _gpstk.SEMData_i_offset_set)
    __swig_setmethods__["OMEGAdot"] = _gpstk.SEMData_OMEGAdot_set
    __swig_getmethods__["OMEGAdot"] = _gpstk.SEMData_OMEGAdot_get
    if _newclass:
        OMEGAdot = _swig_property(_gpstk.SEMData_OMEGAdot_get, _gpstk.SEMData_OMEGAdot_set)
    __swig_setmethods__["Ahalf"] = _gpstk.SEMData_Ahalf_set
    __swig_getmethods__["Ahalf"] = _gpstk.SEMData_Ahalf_get
    if _newclass:
        Ahalf = _swig_property(_gpstk.SEMData_Ahalf_get, _gpstk.SEMData_Ahalf_set)
    __swig_setmethods__["OMEGA0"] = _gpstk.SEMData_OMEGA0_set
    __swig_getmethods__["OMEGA0"] = _gpstk.SEMData_OMEGA0_get
    if _newclass:
        OMEGA0 = _swig_property(_gpstk.SEMData_OMEGA0_get, _gpstk.SEMData_OMEGA0_set)
    __swig_setmethods__["w"] = _gpstk.SEMData_w_set
    __swig_getmethods__["w"] = _gpstk.SEMData_w_get
    if _newclass:
        w = _swig_property(_gpstk.SEMData_w_get, _gpstk.SEMData_w_set)
    __swig_setmethods__["M0"] = _gpstk.SEMData_M0_set
    __swig_getmethods__["M0"] = _gpstk.SEMData_M0_get
    if _newclass:
        M0 = _swig_property(_gpstk.SEMData_M0_get, _gpstk.SEMData_M0_set)
    __swig_setmethods__["AF0"] = _gpstk.SEMData_AF0_set
    __swig_getmethods__["AF0"] = _gpstk.SEMData_AF0_get
    if _newclass:
        AF0 = _swig_property(_gpstk.SEMData_AF0_get, _gpstk.SEMData_AF0_set)
    __swig_setmethods__["AF1"] = _gpstk.SEMData_AF1_set
    __swig_getmethods__["AF1"] = _gpstk.SEMData_AF1_get
    if _newclass:
        AF1 = _swig_property(_gpstk.SEMData_AF1_get, _gpstk.SEMData_AF1_set)
    __swig_setmethods__["SV_health"] = _gpstk.SEMData_SV_health_set
    __swig_getmethods__["SV_health"] = _gpstk.SEMData_SV_health_get
    if _newclass:
        SV_health = _swig_property(_gpstk.SEMData_SV_health_get, _gpstk.SEMData_SV_health_set)
    __swig_setmethods__["satConfig"] = _gpstk.SEMData_satConfig_set
    __swig_getmethods__["satConfig"] = _gpstk.SEMData_satConfig_get
    if _newclass:
        satConfig = _swig_property(_gpstk.SEMData_satConfig_get, _gpstk.SEMData_satConfig_set)
    __swig_setmethods__["xmit_time"] = _gpstk.SEMData_xmit_time_set
    __swig_getmethods__["xmit_time"] = _gpstk.SEMData_xmit_time_get
    if _newclass:
        xmit_time = _swig_property(_gpstk.SEMData_xmit_time_get, _gpstk.SEMData_xmit_time_set)
    __swig_setmethods__["Toa"] = _gpstk.SEMData_Toa_set
    __swig_getmethods__["Toa"] = _gpstk.SEMData_Toa_get
    if _newclass:
        Toa = _swig_property(_gpstk.SEMData_Toa_get, _gpstk.SEMData_Toa_set)
    __swig_setmethods__["week"] = _gpstk.SEMData_week_set
    __swig_getmethods__["week"] = _gpstk.SEMData_week_get
    if _newclass:
        week = _swig_property(_gpstk.SEMData_week_get, _gpstk.SEMData_week_set)

    def isData(self):
        """isData(SEMData self) -> bool"""
        return _gpstk.SEMData_isData(self)


    def toAlmOrbit(self):
        """toAlmOrbit(SEMData self) -> AlmOrbit"""
        return _gpstk.SEMData_toAlmOrbit(self)


    def __str__(self):
        """__str__(SEMData self) -> std::string"""
        return _gpstk.SEMData___str__(self)

SEMData_swigregister = _gpstk.SEMData_swigregister
SEMData_swigregister(SEMData)

class FileStore_SEMHeader(_object):
    """Proxy of C++ gpstk::FileStore<(gpstk::SEMHeader)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileStore_SEMHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileStore_SEMHeader, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::FileStore<(gpstk::SEMHeader)> self) -> FileStore_SEMHeader"""
        this = _gpstk.new_FileStore_SEMHeader()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_FileStore_SEMHeader
    __del__ = lambda self: None

    def getFileNames(self):
        """getFileNames(FileStore_SEMHeader self) -> vector_string"""
        return _gpstk.FileStore_SEMHeader_getFileNames(self)


    def addFile(self, fn, header):
        """addFile(FileStore_SEMHeader self, std::string const & fn, SEMHeader header)"""
        return _gpstk.FileStore_SEMHeader_addFile(self, fn, header)


    def getHeader(self, fn):
        """getHeader(FileStore_SEMHeader self, std::string const & fn) -> SEMHeader"""
        return _gpstk.FileStore_SEMHeader_getHeader(self, fn)


    def clear(self):
        """clear(FileStore_SEMHeader self)"""
        return _gpstk.FileStore_SEMHeader_clear(self)


    def size(self):
        """size(FileStore_SEMHeader self) -> unsigned int"""
        return _gpstk.FileStore_SEMHeader_size(self)


    def nfiles(self):
        """nfiles(FileStore_SEMHeader self) -> unsigned int"""
        return _gpstk.FileStore_SEMHeader_nfiles(self)

FileStore_SEMHeader_swigregister = _gpstk.FileStore_SEMHeader_swigregister
FileStore_SEMHeader_swigregister(FileStore_SEMHeader)

class SEMAlmanacStore(FileStore_SEMHeader, GPSAlmanacStore):
    """Proxy of C++ gpstk::SEMAlmanacStore class"""
    __swig_setmethods__ = {}
    for _s in [FileStore_SEMHeader, GPSAlmanacStore]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SEMAlmanacStore, name, value)
    __swig_getmethods__ = {}
    for _s in [FileStore_SEMHeader, GPSAlmanacStore]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SEMAlmanacStore, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::SEMAlmanacStore self, CommonTime dtInterest) -> SEMAlmanacStore
        __init__(gpstk::SEMAlmanacStore self) -> SEMAlmanacStore
        """
        this = _gpstk.new_SEMAlmanacStore(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def loadFile(self, filename):
        """loadFile(SEMAlmanacStore self, std::string const & filename)"""
        return _gpstk.SEMAlmanacStore_loadFile(self, filename)

    __swig_setmethods__["timeOfInterest"] = _gpstk.SEMAlmanacStore_timeOfInterest_set
    __swig_getmethods__["timeOfInterest"] = _gpstk.SEMAlmanacStore_timeOfInterest_get
    if _newclass:
        timeOfInterest = _swig_property(_gpstk.SEMAlmanacStore_timeOfInterest_get, _gpstk.SEMAlmanacStore_timeOfInterest_set)
    __swig_destroy__ = _gpstk.delete_SEMAlmanacStore
    __del__ = lambda self: None
SEMAlmanacStore_swigregister = _gpstk.SEMAlmanacStore_swigregister
SEMAlmanacStore_swigregister(SEMAlmanacStore)

class InvalidValue(Exception):
    """Proxy of C++ gpstk::InvalidValue class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidValue, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidValue, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::InvalidValue self) -> InvalidValue
        __init__(gpstk::InvalidValue self, InvalidValue a) -> InvalidValue
        __init__(gpstk::InvalidValue self, Exception a) -> InvalidValue
        __init__(gpstk::InvalidValue self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> InvalidValue
        __init__(gpstk::InvalidValue self, std::string const & a, unsigned long b=0) -> InvalidValue
        __init__(gpstk::InvalidValue self, std::string const & a) -> InvalidValue
        __init__(gpstk::InvalidValue self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> InvalidValue
        __init__(gpstk::InvalidValue self, char const * a, unsigned long b=0) -> InvalidValue
        __init__(gpstk::InvalidValue self, char const * a) -> InvalidValue
        """
        this = _gpstk.new_InvalidValue(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_InvalidValue
    __del__ = lambda self: None

    def getName(self):
        """getName(InvalidValue self) -> std::string"""
        return _gpstk.InvalidValue_getName(self)

InvalidValue_swigregister = _gpstk.InvalidValue_swigregister
InvalidValue_swigregister(InvalidValue)

class SvObsEpoch(map_SvObsEpoch):
    """Proxy of C++ gpstk::SvObsEpoch class"""
    __swig_setmethods__ = {}
    for _s in [map_SvObsEpoch]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SvObsEpoch, name, value)
    __swig_getmethods__ = {}
    for _s in [map_SvObsEpoch]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SvObsEpoch, name)
    __repr__ = _swig_repr
    __swig_setmethods__["svid"] = _gpstk.SvObsEpoch_svid_set
    __swig_getmethods__["svid"] = _gpstk.SvObsEpoch_svid_get
    if _newclass:
        svid = _swig_property(_gpstk.SvObsEpoch_svid_get, _gpstk.SvObsEpoch_svid_set)
    __swig_setmethods__["azimuth"] = _gpstk.SvObsEpoch_azimuth_set
    __swig_getmethods__["azimuth"] = _gpstk.SvObsEpoch_azimuth_get
    if _newclass:
        azimuth = _swig_property(_gpstk.SvObsEpoch_azimuth_get, _gpstk.SvObsEpoch_azimuth_set)
    __swig_setmethods__["elevation"] = _gpstk.SvObsEpoch_elevation_set
    __swig_getmethods__["elevation"] = _gpstk.SvObsEpoch_elevation_get
    if _newclass:
        elevation = _swig_property(_gpstk.SvObsEpoch_elevation_get, _gpstk.SvObsEpoch_elevation_set)

    def __str__(self):
        """__str__(SvObsEpoch self) -> std::string"""
        return _gpstk.SvObsEpoch___str__(self)


    def __init__(self):
        """__init__(gpstk::SvObsEpoch self) -> SvObsEpoch"""
        this = _gpstk.new_SvObsEpoch()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_SvObsEpoch
    __del__ = lambda self: None
SvObsEpoch_swigregister = _gpstk.SvObsEpoch_swigregister
SvObsEpoch_swigregister(SvObsEpoch)

class ObsEpoch(map_ObsEpoch):
    """Proxy of C++ gpstk::ObsEpoch class"""
    __swig_setmethods__ = {}
    for _s in [map_ObsEpoch]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObsEpoch, name, value)
    __swig_getmethods__ = {}
    for _s in [map_ObsEpoch]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObsEpoch, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _gpstk.ObsEpoch_time_set
    __swig_getmethods__["time"] = _gpstk.ObsEpoch_time_get
    if _newclass:
        time = _swig_property(_gpstk.ObsEpoch_time_get, _gpstk.ObsEpoch_time_set)
    __swig_setmethods__["rxClock"] = _gpstk.ObsEpoch_rxClock_set
    __swig_getmethods__["rxClock"] = _gpstk.ObsEpoch_rxClock_get
    if _newclass:
        rxClock = _swig_property(_gpstk.ObsEpoch_rxClock_get, _gpstk.ObsEpoch_rxClock_set)

    def __str__(self):
        """__str__(ObsEpoch self) -> std::string"""
        return _gpstk.ObsEpoch___str__(self)


    def __init__(self):
        """__init__(gpstk::ObsEpoch self) -> ObsEpoch"""
        this = _gpstk.new_ObsEpoch()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_ObsEpoch
    __del__ = lambda self: None
ObsEpoch_swigregister = _gpstk.ObsEpoch_swigregister
ObsEpoch_swigregister(ObsEpoch)

class WxObservation(_object):
    """Proxy of C++ gpstk::WxObservation class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WxObservation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WxObservation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::WxObservation self) -> WxObservation
        __init__(gpstk::WxObservation self, CommonTime t, float temp, float pres, float humid) -> WxObservation
        """
        this = _gpstk.new_WxObservation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["t"] = _gpstk.WxObservation_t_set
    __swig_getmethods__["t"] = _gpstk.WxObservation_t_get
    if _newclass:
        t = _swig_property(_gpstk.WxObservation_t_get, _gpstk.WxObservation_t_set)
    __swig_setmethods__["temperature"] = _gpstk.WxObservation_temperature_set
    __swig_getmethods__["temperature"] = _gpstk.WxObservation_temperature_get
    if _newclass:
        temperature = _swig_property(_gpstk.WxObservation_temperature_get, _gpstk.WxObservation_temperature_set)
    __swig_setmethods__["pressure"] = _gpstk.WxObservation_pressure_set
    __swig_getmethods__["pressure"] = _gpstk.WxObservation_pressure_get
    if _newclass:
        pressure = _swig_property(_gpstk.WxObservation_pressure_get, _gpstk.WxObservation_pressure_set)
    __swig_setmethods__["humidity"] = _gpstk.WxObservation_humidity_set
    __swig_getmethods__["humidity"] = _gpstk.WxObservation_humidity_get
    if _newclass:
        humidity = _swig_property(_gpstk.WxObservation_humidity_get, _gpstk.WxObservation_humidity_set)
    noWx = _gpstk.WxObservation_noWx
    defWx = _gpstk.WxObservation_defWx
    obsWx = _gpstk.WxObservation_obsWx
    __swig_setmethods__["temperatureSource"] = _gpstk.WxObservation_temperatureSource_set
    __swig_getmethods__["temperatureSource"] = _gpstk.WxObservation_temperatureSource_get
    if _newclass:
        temperatureSource = _swig_property(_gpstk.WxObservation_temperatureSource_get, _gpstk.WxObservation_temperatureSource_set)
    __swig_setmethods__["pressureSource"] = _gpstk.WxObservation_pressureSource_set
    __swig_getmethods__["pressureSource"] = _gpstk.WxObservation_pressureSource_get
    if _newclass:
        pressureSource = _swig_property(_gpstk.WxObservation_pressureSource_get, _gpstk.WxObservation_pressureSource_set)
    __swig_setmethods__["humiditySource"] = _gpstk.WxObservation_humiditySource_set
    __swig_getmethods__["humiditySource"] = _gpstk.WxObservation_humiditySource_get
    if _newclass:
        humiditySource = _swig_property(_gpstk.WxObservation_humiditySource_get, _gpstk.WxObservation_humiditySource_set)

    def isAllValid(self):
        """isAllValid(WxObservation self) -> bool"""
        return _gpstk.WxObservation_isAllValid(self)

    __swig_destroy__ = _gpstk.delete_WxObservation
    __del__ = lambda self: None
WxObservation_swigregister = _gpstk.WxObservation_swigregister
WxObservation_swigregister(WxObservation)

class WxObsData(_object):
    """Proxy of C++ gpstk::WxObsData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WxObsData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WxObsData, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::WxObsData self) -> WxObsData"""
        this = _gpstk.new_WxObsData()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["firstTime"] = _gpstk.WxObsData_firstTime_set
    __swig_getmethods__["firstTime"] = _gpstk.WxObsData_firstTime_get
    if _newclass:
        firstTime = _swig_property(_gpstk.WxObsData_firstTime_get, _gpstk.WxObsData_firstTime_set)
    __swig_setmethods__["lastTime"] = _gpstk.WxObsData_lastTime_set
    __swig_getmethods__["lastTime"] = _gpstk.WxObsData_lastTime_get
    if _newclass:
        lastTime = _swig_property(_gpstk.WxObsData_lastTime_get, _gpstk.WxObsData_lastTime_set)
    __swig_setmethods__["rxId"] = _gpstk.WxObsData_rxId_set
    __swig_getmethods__["rxId"] = _gpstk.WxObsData_rxId_get
    if _newclass:
        rxId = _swig_property(_gpstk.WxObsData_rxId_get, _gpstk.WxObsData_rxId_set)
    __swig_setmethods__["obs"] = _gpstk.WxObsData_obs_set
    __swig_getmethods__["obs"] = _gpstk.WxObsData_obs_get
    if _newclass:
        obs = _swig_property(_gpstk.WxObsData_obs_get, _gpstk.WxObsData_obs_set)

    def getMostRecent(self, t):
        """getMostRecent(WxObsData self, CommonTime t) -> WxObservation"""
        return _gpstk.WxObsData_getMostRecent(self, t)


    def insertObservation(self, obs):
        """insertObservation(WxObsData self, WxObservation obs)"""
        return _gpstk.WxObsData_insertObservation(self, obs)


    def flush(self, t):
        """flush(WxObsData self, CommonTime t)"""
        return _gpstk.WxObsData_flush(self, t)


    def getWxObservation(self, t, iv=3600, interpolate=True):
        """
        getWxObservation(WxObsData self, CommonTime t, unsigned int iv=3600, bool interpolate=True) -> WxObservation
        getWxObservation(WxObsData self, CommonTime t, unsigned int iv=3600) -> WxObservation
        getWxObservation(WxObsData self, CommonTime t) -> WxObservation
        """
        return _gpstk.WxObsData_getWxObservation(self, t, iv, interpolate)

    __swig_destroy__ = _gpstk.delete_WxObsData
    __del__ = lambda self: None
WxObsData_swigregister = _gpstk.WxObsData_swigregister
WxObsData_swigregister(WxObsData)

class TropModel(_object):
    """Proxy of C++ gpstk::TropModel class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TropModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TropModel, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_TropModel
    __del__ = lambda self: None

    def isValid(self):
        """isValid(TropModel self) -> bool"""
        return _gpstk.TropModel_isValid(self)


    def correction(self, *args):
        """
        correction(TropModel self, double elevation) -> double
        correction(TropModel self, Position RX, Position SV, CommonTime tt) -> double
        correction(TropModel self, Xvt RX, Xvt SV, CommonTime tt) -> double
        """
        return _gpstk.TropModel_correction(self, *args)


    def dry_zenith_delay(self):
        """dry_zenith_delay(TropModel self) -> double"""
        return _gpstk.TropModel_dry_zenith_delay(self)


    def wet_zenith_delay(self):
        """wet_zenith_delay(TropModel self) -> double"""
        return _gpstk.TropModel_wet_zenith_delay(self)


    def dry_mapping_function(self, elevation):
        """dry_mapping_function(TropModel self, double elevation) -> double"""
        return _gpstk.TropModel_dry_mapping_function(self, elevation)


    def wet_mapping_function(self, elevation):
        """wet_mapping_function(TropModel self, double elevation) -> double"""
        return _gpstk.TropModel_wet_mapping_function(self, elevation)


    def setWeather(self, *args):
        """
        setWeather(TropModel self, double const & T, double const & P, double const & H)
        setWeather(TropModel self, WxObservation wx)
        """
        return _gpstk.TropModel_setWeather(self, *args)


    def setReceiverHeight(self, ht):
        """setReceiverHeight(TropModel self, double const & ht)"""
        return _gpstk.TropModel_setReceiverHeight(self, ht)


    def setReceiverLatitude(self, lat):
        """setReceiverLatitude(TropModel self, double const & lat)"""
        return _gpstk.TropModel_setReceiverLatitude(self, lat)


    def setDayOfYear(self, d):
        """setDayOfYear(TropModel self, int const & d)"""
        return _gpstk.TropModel_setDayOfYear(self, d)


    def weatherByStandardAtmosphereModel(ht, T, P, H):
        """weatherByStandardAtmosphereModel(double const & ht, double & T, double & P, double & H)"""
        return _gpstk.TropModel_weatherByStandardAtmosphereModel(ht, T, P, H)

    if _newclass:
        weatherByStandardAtmosphereModel = staticmethod(weatherByStandardAtmosphereModel)
    __swig_getmethods__["weatherByStandardAtmosphereModel"] = lambda x: weatherByStandardAtmosphereModel
TropModel_swigregister = _gpstk.TropModel_swigregister
TropModel_swigregister(TropModel)

def TropModel_weatherByStandardAtmosphereModel(ht, T, P, H):
    """TropModel_weatherByStandardAtmosphereModel(double const & ht, double & T, double & P, double & H)"""
    return _gpstk.TropModel_weatherByStandardAtmosphereModel(ht, T, P, H)

class ZeroTropModel(TropModel):
    """Proxy of C++ gpstk::ZeroTropModel class"""
    __swig_setmethods__ = {}
    for _s in [TropModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZeroTropModel, name, value)
    __swig_getmethods__ = {}
    for _s in [TropModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZeroTropModel, name)
    __repr__ = _swig_repr

    def correction(self, *args):
        """
        correction(ZeroTropModel self, double elevation) -> double
        correction(ZeroTropModel self, Position RX, Position SV, CommonTime tt) -> double
        correction(ZeroTropModel self, Xvt RX, Xvt SV, CommonTime tt) -> double
        """
        return _gpstk.ZeroTropModel_correction(self, *args)


    def dry_zenith_delay(self):
        """dry_zenith_delay(ZeroTropModel self) -> double"""
        return _gpstk.ZeroTropModel_dry_zenith_delay(self)


    def wet_zenith_delay(self):
        """wet_zenith_delay(ZeroTropModel self) -> double"""
        return _gpstk.ZeroTropModel_wet_zenith_delay(self)


    def dry_mapping_function(self, elevation):
        """dry_mapping_function(ZeroTropModel self, double elevation) -> double"""
        return _gpstk.ZeroTropModel_dry_mapping_function(self, elevation)


    def wet_mapping_function(self, elevation):
        """wet_mapping_function(ZeroTropModel self, double elevation) -> double"""
        return _gpstk.ZeroTropModel_wet_mapping_function(self, elevation)


    def __init__(self):
        """__init__(gpstk::ZeroTropModel self) -> ZeroTropModel"""
        this = _gpstk.new_ZeroTropModel()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_ZeroTropModel
    __del__ = lambda self: None
ZeroTropModel_swigregister = _gpstk.ZeroTropModel_swigregister
ZeroTropModel_swigregister(ZeroTropModel)

class SimpleTropModel(TropModel):
    """Proxy of C++ gpstk::SimpleTropModel class"""
    __swig_setmethods__ = {}
    for _s in [TropModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleTropModel, name, value)
    __swig_getmethods__ = {}
    for _s in [TropModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleTropModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::SimpleTropModel self) -> SimpleTropModel
        __init__(gpstk::SimpleTropModel self, WxObservation wx) -> SimpleTropModel
        __init__(gpstk::SimpleTropModel self, double const & T, double const & P, double const & H) -> SimpleTropModel
        """
        this = _gpstk.new_SimpleTropModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def dry_zenith_delay(self):
        """dry_zenith_delay(SimpleTropModel self) -> double"""
        return _gpstk.SimpleTropModel_dry_zenith_delay(self)


    def wet_zenith_delay(self):
        """wet_zenith_delay(SimpleTropModel self) -> double"""
        return _gpstk.SimpleTropModel_wet_zenith_delay(self)


    def dry_mapping_function(self, elevation):
        """dry_mapping_function(SimpleTropModel self, double elevation) -> double"""
        return _gpstk.SimpleTropModel_dry_mapping_function(self, elevation)


    def wet_mapping_function(self, elevation):
        """wet_mapping_function(SimpleTropModel self, double elevation) -> double"""
        return _gpstk.SimpleTropModel_wet_mapping_function(self, elevation)


    def setWeather(self, *args):
        """
        setWeather(SimpleTropModel self, double const & T, double const & P, double const & H)
        setWeather(SimpleTropModel self, WxObservation wx)
        """
        return _gpstk.SimpleTropModel_setWeather(self, *args)

    __swig_destroy__ = _gpstk.delete_SimpleTropModel
    __del__ = lambda self: None
SimpleTropModel_swigregister = _gpstk.SimpleTropModel_swigregister
SimpleTropModel_swigregister(SimpleTropModel)

class GGTropModel(TropModel):
    """Proxy of C++ gpstk::GGTropModel class"""
    __swig_setmethods__ = {}
    for _s in [TropModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GGTropModel, name, value)
    __swig_getmethods__ = {}
    for _s in [TropModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GGTropModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::GGTropModel self) -> GGTropModel
        __init__(gpstk::GGTropModel self, WxObservation wx) -> GGTropModel
        __init__(gpstk::GGTropModel self, double const & T, double const & P, double const & H) -> GGTropModel
        """
        this = _gpstk.new_GGTropModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def dry_zenith_delay(self):
        """dry_zenith_delay(GGTropModel self) -> double"""
        return _gpstk.GGTropModel_dry_zenith_delay(self)


    def wet_zenith_delay(self):
        """wet_zenith_delay(GGTropModel self) -> double"""
        return _gpstk.GGTropModel_wet_zenith_delay(self)


    def dry_mapping_function(self, elevation):
        """dry_mapping_function(GGTropModel self, double elevation) -> double"""
        return _gpstk.GGTropModel_dry_mapping_function(self, elevation)


    def wet_mapping_function(self, elevation):
        """wet_mapping_function(GGTropModel self, double elevation) -> double"""
        return _gpstk.GGTropModel_wet_mapping_function(self, elevation)


    def setWeather(self, *args):
        """
        setWeather(GGTropModel self, double const & T, double const & P, double const & H)
        setWeather(GGTropModel self, WxObservation wx)
        """
        return _gpstk.GGTropModel_setWeather(self, *args)

    __swig_destroy__ = _gpstk.delete_GGTropModel
    __del__ = lambda self: None
GGTropModel_swigregister = _gpstk.GGTropModel_swigregister
GGTropModel_swigregister(GGTropModel)

class GGHeightTropModel(TropModel):
    """Proxy of C++ gpstk::GGHeightTropModel class"""
    __swig_setmethods__ = {}
    for _s in [TropModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GGHeightTropModel, name, value)
    __swig_getmethods__ = {}
    for _s in [TropModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GGHeightTropModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::GGHeightTropModel self) -> GGHeightTropModel
        __init__(gpstk::GGHeightTropModel self, WxObservation wx) -> GGHeightTropModel
        __init__(gpstk::GGHeightTropModel self, double const & T, double const & P, double const & H) -> GGHeightTropModel
        __init__(gpstk::GGHeightTropModel self, double const & T, double const & P, double const & H, double const hT, double const hP, double const hH) -> GGHeightTropModel
        """
        this = _gpstk.new_GGHeightTropModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def correction(self, *args):
        """
        correction(GGHeightTropModel self, double elevation) -> double
        correction(GGHeightTropModel self, Position RX, Position SV, CommonTime tt) -> double
        correction(GGHeightTropModel self, Xvt RX, Xvt SV, CommonTime tt) -> double
        """
        return _gpstk.GGHeightTropModel_correction(self, *args)


    def dry_zenith_delay(self):
        """dry_zenith_delay(GGHeightTropModel self) -> double"""
        return _gpstk.GGHeightTropModel_dry_zenith_delay(self)


    def wet_zenith_delay(self):
        """wet_zenith_delay(GGHeightTropModel self) -> double"""
        return _gpstk.GGHeightTropModel_wet_zenith_delay(self)


    def dry_mapping_function(self, elevation):
        """dry_mapping_function(GGHeightTropModel self, double elevation) -> double"""
        return _gpstk.GGHeightTropModel_dry_mapping_function(self, elevation)


    def wet_mapping_function(self, elevation):
        """wet_mapping_function(GGHeightTropModel self, double elevation) -> double"""
        return _gpstk.GGHeightTropModel_wet_mapping_function(self, elevation)


    def setWeather(self, *args):
        """
        setWeather(GGHeightTropModel self, double const & T, double const & P, double const & H)
        setWeather(GGHeightTropModel self, WxObservation wx)
        """
        return _gpstk.GGHeightTropModel_setWeather(self, *args)


    def setHeights(self, hT, hP, hH):
        """setHeights(GGHeightTropModel self, double const & hT, double const & hP, double const & hH)"""
        return _gpstk.GGHeightTropModel_setHeights(self, hT, hP, hH)


    def setReceiverHeight(self, ht):
        """setReceiverHeight(GGHeightTropModel self, double const & ht)"""
        return _gpstk.GGHeightTropModel_setReceiverHeight(self, ht)

    __swig_destroy__ = _gpstk.delete_GGHeightTropModel
    __del__ = lambda self: None
GGHeightTropModel_swigregister = _gpstk.GGHeightTropModel_swigregister
GGHeightTropModel_swigregister(GGHeightTropModel)

class NBTropModel(TropModel):
    """Proxy of C++ gpstk::NBTropModel class"""
    __swig_setmethods__ = {}
    for _s in [TropModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NBTropModel, name, value)
    __swig_getmethods__ = {}
    for _s in [TropModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NBTropModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::NBTropModel self) -> NBTropModel
        __init__(gpstk::NBTropModel self, double const & lat, int const & day) -> NBTropModel
        __init__(gpstk::NBTropModel self, double const & lat, int const & day, WxObservation wx) -> NBTropModel
        __init__(gpstk::NBTropModel self, double const & lat, int const & day, double const & T, double const & P, double const & H) -> NBTropModel
        __init__(gpstk::NBTropModel self, double const & ht, double const & lat, int const & day) -> NBTropModel
        """
        this = _gpstk.new_NBTropModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def correction(self, *args):
        """
        correction(NBTropModel self, double elevation) -> double
        correction(NBTropModel self, Position RX, Position SV, CommonTime tt) -> double
        correction(NBTropModel self, Xvt RX, Xvt SV, CommonTime tt) -> double
        """
        return _gpstk.NBTropModel_correction(self, *args)


    def dry_zenith_delay(self):
        """dry_zenith_delay(NBTropModel self) -> double"""
        return _gpstk.NBTropModel_dry_zenith_delay(self)


    def wet_zenith_delay(self):
        """wet_zenith_delay(NBTropModel self) -> double"""
        return _gpstk.NBTropModel_wet_zenith_delay(self)


    def dry_mapping_function(self, elevation):
        """dry_mapping_function(NBTropModel self, double elevation) -> double"""
        return _gpstk.NBTropModel_dry_mapping_function(self, elevation)


    def wet_mapping_function(self, elevation):
        """wet_mapping_function(NBTropModel self, double elevation) -> double"""
        return _gpstk.NBTropModel_wet_mapping_function(self, elevation)


    def setWeather(self, *args):
        """
        setWeather(NBTropModel self, WxObservation wx)
        setWeather(NBTropModel self, double const & T, double const & P, double const & H)
        setWeather(NBTropModel self)
        """
        return _gpstk.NBTropModel_setWeather(self, *args)


    def setReceiverHeight(self, ht):
        """setReceiverHeight(NBTropModel self, double const & ht)"""
        return _gpstk.NBTropModel_setReceiverHeight(self, ht)


    def setReceiverLatitude(self, lat):
        """setReceiverLatitude(NBTropModel self, double const & lat)"""
        return _gpstk.NBTropModel_setReceiverLatitude(self, lat)


    def setDayOfYear(self, d):
        """setDayOfYear(NBTropModel self, int const & d)"""
        return _gpstk.NBTropModel_setDayOfYear(self, d)

    __swig_destroy__ = _gpstk.delete_NBTropModel
    __del__ = lambda self: None
NBTropModel_swigregister = _gpstk.NBTropModel_swigregister
NBTropModel_swigregister(NBTropModel)

class SaasTropModel(TropModel):
    """Proxy of C++ gpstk::SaasTropModel class"""
    __swig_setmethods__ = {}
    for _s in [TropModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SaasTropModel, name, value)
    __swig_getmethods__ = {}
    for _s in [TropModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SaasTropModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::SaasTropModel self) -> SaasTropModel
        __init__(gpstk::SaasTropModel self, double const & lat, int const & day) -> SaasTropModel
        __init__(gpstk::SaasTropModel self, double const & lat, int const & day, WxObservation wx) -> SaasTropModel
        __init__(gpstk::SaasTropModel self, double const & lat, int const & day, double const & T, double const & P, double const & H) -> SaasTropModel
        """
        this = _gpstk.new_SaasTropModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def correction(self, *args):
        """
        correction(SaasTropModel self, double elevation) -> double
        correction(SaasTropModel self, Position RX, Position SV, CommonTime tt) -> double
        correction(SaasTropModel self, Xvt RX, Xvt SV, CommonTime tt) -> double
        """
        return _gpstk.SaasTropModel_correction(self, *args)


    def dry_zenith_delay(self):
        """dry_zenith_delay(SaasTropModel self) -> double"""
        return _gpstk.SaasTropModel_dry_zenith_delay(self)


    def wet_zenith_delay(self):
        """wet_zenith_delay(SaasTropModel self) -> double"""
        return _gpstk.SaasTropModel_wet_zenith_delay(self)


    def dry_mapping_function(self, elevation):
        """dry_mapping_function(SaasTropModel self, double elevation) -> double"""
        return _gpstk.SaasTropModel_dry_mapping_function(self, elevation)


    def wet_mapping_function(self, elevation):
        """wet_mapping_function(SaasTropModel self, double elevation) -> double"""
        return _gpstk.SaasTropModel_wet_mapping_function(self, elevation)


    def setWeather(self, *args):
        """
        setWeather(SaasTropModel self, WxObservation wx)
        setWeather(SaasTropModel self, double const & T, double const & P, double const & H)
        """
        return _gpstk.SaasTropModel_setWeather(self, *args)


    def setReceiverHeight(self, ht):
        """setReceiverHeight(SaasTropModel self, double const & ht)"""
        return _gpstk.SaasTropModel_setReceiverHeight(self, ht)


    def setReceiverLatitude(self, lat):
        """setReceiverLatitude(SaasTropModel self, double const & lat)"""
        return _gpstk.SaasTropModel_setReceiverLatitude(self, lat)


    def setDayOfYear(self, d):
        """setDayOfYear(SaasTropModel self, int const & d)"""
        return _gpstk.SaasTropModel_setDayOfYear(self, d)

    __swig_destroy__ = _gpstk.delete_SaasTropModel
    __del__ = lambda self: None
SaasTropModel_swigregister = _gpstk.SaasTropModel_swigregister
SaasTropModel_swigregister(SaasTropModel)

class GCATTropModel(TropModel):
    """Proxy of C++ gpstk::GCATTropModel class"""
    __swig_setmethods__ = {}
    for _s in [TropModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GCATTropModel, name, value)
    __swig_getmethods__ = {}
    for _s in [TropModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GCATTropModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::GCATTropModel self) -> GCATTropModel
        __init__(gpstk::GCATTropModel self, double const & ht) -> GCATTropModel
        """
        this = _gpstk.new_GCATTropModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def correction(self, *args):
        """
        correction(GCATTropModel self, double elevation) -> double
        correction(GCATTropModel self, Position RX, Position SV) -> double
        correction(GCATTropModel self, Position RX, Position SV, CommonTime tt) -> double
        correction(GCATTropModel self, Xvt RX, Xvt SV, CommonTime tt) -> double
        """
        return _gpstk.GCATTropModel_correction(self, *args)


    def dry_zenith_delay(self):
        """dry_zenith_delay(GCATTropModel self) -> double"""
        return _gpstk.GCATTropModel_dry_zenith_delay(self)


    def wet_zenith_delay(self):
        """wet_zenith_delay(GCATTropModel self) -> double"""
        return _gpstk.GCATTropModel_wet_zenith_delay(self)


    def mapping_function(self, elevation):
        """mapping_function(GCATTropModel self, double elevation) -> double"""
        return _gpstk.GCATTropModel_mapping_function(self, elevation)


    def dry_mapping_function(self, elevation):
        """dry_mapping_function(GCATTropModel self, double elevation) -> double"""
        return _gpstk.GCATTropModel_dry_mapping_function(self, elevation)


    def wet_mapping_function(self, elevation):
        """wet_mapping_function(GCATTropModel self, double elevation) -> double"""
        return _gpstk.GCATTropModel_wet_mapping_function(self, elevation)


    def setWeather(self, *args):
        """
        setWeather(GCATTropModel self, double const & T, double const & P, double const & H)
        setWeather(GCATTropModel self, WxObservation wx)
        """
        return _gpstk.GCATTropModel_setWeather(self, *args)


    def setReceiverHeight(self, ht):
        """setReceiverHeight(GCATTropModel self, double const & ht)"""
        return _gpstk.GCATTropModel_setReceiverHeight(self, ht)

    __swig_destroy__ = _gpstk.delete_GCATTropModel
    __del__ = lambda self: None
GCATTropModel_swigregister = _gpstk.GCATTropModel_swigregister
GCATTropModel_swigregister(GCATTropModel)

class MOPSTropModel(GCATTropModel):
    """Proxy of C++ gpstk::MOPSTropModel class"""
    __swig_setmethods__ = {}
    for _s in [GCATTropModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MOPSTropModel, name, value)
    __swig_getmethods__ = {}
    for _s in [GCATTropModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MOPSTropModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::MOPSTropModel self) -> MOPSTropModel
        __init__(gpstk::MOPSTropModel self, double const & ht) -> MOPSTropModel
        __init__(gpstk::MOPSTropModel self, double const & ht, double const & lat, int const & doy) -> MOPSTropModel
        __init__(gpstk::MOPSTropModel self, Position RX, CommonTime time) -> MOPSTropModel
        """
        this = _gpstk.new_MOPSTropModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def correction(self, *args):
        """
        correction(MOPSTropModel self, double elevation) -> double
        correction(MOPSTropModel self, Position RX, Position SV) -> double
        correction(MOPSTropModel self, Position RX, Position SV, CommonTime tt) -> double
        correction(MOPSTropModel self, Position RX, Position SV, int const & doy) -> double
        correction(MOPSTropModel self, Xvt RX, Xvt SV) -> double
        correction(MOPSTropModel self, Xvt RX, Xvt SV, CommonTime tt) -> double
        correction(MOPSTropModel self, Xvt RX, Xvt SV, int const & doy) -> double
        """
        return _gpstk.MOPSTropModel_correction(self, *args)


    def dry_zenith_delay(self):
        """dry_zenith_delay(MOPSTropModel self) -> double"""
        return _gpstk.MOPSTropModel_dry_zenith_delay(self)


    def wet_zenith_delay(self):
        """wet_zenith_delay(MOPSTropModel self) -> double"""
        return _gpstk.MOPSTropModel_wet_zenith_delay(self)


    def setWeather(self, *args):
        """
        setWeather(MOPSTropModel self)
        setWeather(MOPSTropModel self, double const & T, double const & P, double const & H)
        setWeather(MOPSTropModel self, WxObservation wx)
        """
        return _gpstk.MOPSTropModel_setWeather(self, *args)


    def setReceiverHeight(self, ht):
        """setReceiverHeight(MOPSTropModel self, double const & ht)"""
        return _gpstk.MOPSTropModel_setReceiverHeight(self, ht)


    def setReceiverLatitude(self, lat):
        """setReceiverLatitude(MOPSTropModel self, double const & lat)"""
        return _gpstk.MOPSTropModel_setReceiverLatitude(self, lat)


    def setDayOfYear(self, *args):
        """
        setDayOfYear(MOPSTropModel self, int const & doy)
        setDayOfYear(MOPSTropModel self, CommonTime time)
        """
        return _gpstk.MOPSTropModel_setDayOfYear(self, *args)


    def setAllParameters(self, time, rxPos):
        """setAllParameters(MOPSTropModel self, CommonTime time, Position rxPos)"""
        return _gpstk.MOPSTropModel_setAllParameters(self, time, rxPos)


    def MOPSsigma2(self, elevation):
        """MOPSsigma2(MOPSTropModel self, double elevation) -> double"""
        return _gpstk.MOPSTropModel_MOPSsigma2(self, elevation)

    __swig_destroy__ = _gpstk.delete_MOPSTropModel
    __del__ = lambda self: None
MOPSTropModel_swigregister = _gpstk.MOPSTropModel_swigregister
MOPSTropModel_swigregister(MOPSTropModel)

class NeillTropModel(TropModel):
    """Proxy of C++ gpstk::NeillTropModel class"""
    __swig_setmethods__ = {}
    for _s in [TropModel]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeillTropModel, name, value)
    __swig_getmethods__ = {}
    for _s in [TropModel]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NeillTropModel, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::NeillTropModel self) -> NeillTropModel
        __init__(gpstk::NeillTropModel self, double const & ht) -> NeillTropModel
        __init__(gpstk::NeillTropModel self, double const & ht, double const & lat, int const & doy) -> NeillTropModel
        __init__(gpstk::NeillTropModel self, Position RX, CommonTime time) -> NeillTropModel
        """
        this = _gpstk.new_NeillTropModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def correction(self, *args):
        """
        correction(NeillTropModel self, double elevation) -> double
        correction(NeillTropModel self, Position RX, Position SV) -> double
        correction(NeillTropModel self, Position RX, Position SV, CommonTime tt) -> double
        correction(NeillTropModel self, Position RX, Position SV, int const & doy) -> double
        correction(NeillTropModel self, Xvt RX, Xvt SV) -> double
        correction(NeillTropModel self, Xvt RX, Xvt SV, CommonTime tt) -> double
        correction(NeillTropModel self, Xvt RX, Xvt SV, int const & doy) -> double
        """
        return _gpstk.NeillTropModel_correction(self, *args)


    def dry_zenith_delay(self):
        """dry_zenith_delay(NeillTropModel self) -> double"""
        return _gpstk.NeillTropModel_dry_zenith_delay(self)


    def wet_zenith_delay(self):
        """wet_zenith_delay(NeillTropModel self) -> double"""
        return _gpstk.NeillTropModel_wet_zenith_delay(self)


    def dry_mapping_function(self, elevation):
        """dry_mapping_function(NeillTropModel self, double elevation) -> double"""
        return _gpstk.NeillTropModel_dry_mapping_function(self, elevation)


    def wet_mapping_function(self, elevation):
        """wet_mapping_function(NeillTropModel self, double elevation) -> double"""
        return _gpstk.NeillTropModel_wet_mapping_function(self, elevation)


    def setWeather(self, *args):
        """
        setWeather(NeillTropModel self)
        setWeather(NeillTropModel self, double const & T, double const & P, double const & H)
        setWeather(NeillTropModel self, WxObservation wx)
        """
        return _gpstk.NeillTropModel_setWeather(self, *args)


    def setReceiverHeight(self, ht):
        """setReceiverHeight(NeillTropModel self, double const & ht)"""
        return _gpstk.NeillTropModel_setReceiverHeight(self, ht)


    def setReceiverLatitude(self, lat):
        """setReceiverLatitude(NeillTropModel self, double const & lat)"""
        return _gpstk.NeillTropModel_setReceiverLatitude(self, lat)


    def setDayOfYear(self, *args):
        """
        setDayOfYear(NeillTropModel self, int const & doy)
        setDayOfYear(NeillTropModel self, CommonTime time)
        """
        return _gpstk.NeillTropModel_setDayOfYear(self, *args)


    def setAllParameters(self, time, rxPos):
        """setAllParameters(NeillTropModel self, CommonTime time, Position rxPos)"""
        return _gpstk.NeillTropModel_setAllParameters(self, time, rxPos)

    __swig_destroy__ = _gpstk.delete_NeillTropModel
    __del__ = lambda self: None
NeillTropModel_swigregister = _gpstk.NeillTropModel_swigregister
NeillTropModel_swigregister(NeillTropModel)

class PRSolution2(_object):
    """Proxy of C++ gpstk::PRSolution2 class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PRSolution2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PRSolution2, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::PRSolution2 self) -> PRSolution2"""
        this = _gpstk.new_PRSolution2()
        try:
            self.this.append(this)
        except:
            self.this = this

    def RAIMCompute(self, Tr, Satellite, Pseudorange, Eph, pTropModel):
        """RAIMCompute(PRSolution2 self, CommonTime Tr, vector_SatID Satellite, vector_double Pseudorange, XvtStore_SatID Eph, TropModel pTropModel) -> int"""
        return _gpstk.PRSolution2_RAIMCompute(self, Tr, Satellite, Pseudorange, Eph, pTropModel)


    def isValid(self):
        """isValid(PRSolution2 self) -> bool"""
        return _gpstk.PRSolution2_isValid(self)

    __swig_setmethods__["RMSLimit"] = _gpstk.PRSolution2_RMSLimit_set
    __swig_getmethods__["RMSLimit"] = _gpstk.PRSolution2_RMSLimit_get
    if _newclass:
        RMSLimit = _swig_property(_gpstk.PRSolution2_RMSLimit_get, _gpstk.PRSolution2_RMSLimit_set)
    __swig_setmethods__["SlopeLimit"] = _gpstk.PRSolution2_SlopeLimit_set
    __swig_getmethods__["SlopeLimit"] = _gpstk.PRSolution2_SlopeLimit_get
    if _newclass:
        SlopeLimit = _swig_property(_gpstk.PRSolution2_SlopeLimit_get, _gpstk.PRSolution2_SlopeLimit_set)
    __swig_setmethods__["Algebraic"] = _gpstk.PRSolution2_Algebraic_set
    __swig_getmethods__["Algebraic"] = _gpstk.PRSolution2_Algebraic_get
    if _newclass:
        Algebraic = _swig_property(_gpstk.PRSolution2_Algebraic_get, _gpstk.PRSolution2_Algebraic_set)
    __swig_setmethods__["ResidualCriterion"] = _gpstk.PRSolution2_ResidualCriterion_set
    __swig_getmethods__["ResidualCriterion"] = _gpstk.PRSolution2_ResidualCriterion_get
    if _newclass:
        ResidualCriterion = _swig_property(_gpstk.PRSolution2_ResidualCriterion_get, _gpstk.PRSolution2_ResidualCriterion_set)
    __swig_setmethods__["ReturnAtOnce"] = _gpstk.PRSolution2_ReturnAtOnce_set
    __swig_getmethods__["ReturnAtOnce"] = _gpstk.PRSolution2_ReturnAtOnce_get
    if _newclass:
        ReturnAtOnce = _swig_property(_gpstk.PRSolution2_ReturnAtOnce_get, _gpstk.PRSolution2_ReturnAtOnce_set)
    __swig_setmethods__["NSatsReject"] = _gpstk.PRSolution2_NSatsReject_set
    __swig_getmethods__["NSatsReject"] = _gpstk.PRSolution2_NSatsReject_get
    if _newclass:
        NSatsReject = _swig_property(_gpstk.PRSolution2_NSatsReject_get, _gpstk.PRSolution2_NSatsReject_set)
    __swig_setmethods__["Debug"] = _gpstk.PRSolution2_Debug_set
    __swig_getmethods__["Debug"] = _gpstk.PRSolution2_Debug_get
    if _newclass:
        Debug = _swig_property(_gpstk.PRSolution2_Debug_get, _gpstk.PRSolution2_Debug_set)
    __swig_setmethods__["pDebugStream"] = _gpstk.PRSolution2_pDebugStream_set
    __swig_getmethods__["pDebugStream"] = _gpstk.PRSolution2_pDebugStream_get
    if _newclass:
        pDebugStream = _swig_property(_gpstk.PRSolution2_pDebugStream_get, _gpstk.PRSolution2_pDebugStream_set)
    __swig_setmethods__["MaxNIterations"] = _gpstk.PRSolution2_MaxNIterations_set
    __swig_getmethods__["MaxNIterations"] = _gpstk.PRSolution2_MaxNIterations_get
    if _newclass:
        MaxNIterations = _swig_property(_gpstk.PRSolution2_MaxNIterations_get, _gpstk.PRSolution2_MaxNIterations_set)
    __swig_setmethods__["ConvergenceLimit"] = _gpstk.PRSolution2_ConvergenceLimit_set
    __swig_getmethods__["ConvergenceLimit"] = _gpstk.PRSolution2_ConvergenceLimit_get
    if _newclass:
        ConvergenceLimit = _swig_property(_gpstk.PRSolution2_ConvergenceLimit_get, _gpstk.PRSolution2_ConvergenceLimit_set)
    __swig_setmethods__["Valid"] = _gpstk.PRSolution2_Valid_set
    __swig_getmethods__["Valid"] = _gpstk.PRSolution2_Valid_get
    if _newclass:
        Valid = _swig_property(_gpstk.PRSolution2_Valid_get, _gpstk.PRSolution2_Valid_set)
    __swig_setmethods__["Solution"] = _gpstk.PRSolution2_Solution_set
    __swig_getmethods__["Solution"] = _gpstk.PRSolution2_Solution_get
    if _newclass:
        Solution = _swig_property(_gpstk.PRSolution2_Solution_get, _gpstk.PRSolution2_Solution_set)
    __swig_setmethods__["Covariance"] = _gpstk.PRSolution2_Covariance_set
    __swig_getmethods__["Covariance"] = _gpstk.PRSolution2_Covariance_get
    if _newclass:
        Covariance = _swig_property(_gpstk.PRSolution2_Covariance_get, _gpstk.PRSolution2_Covariance_set)
    __swig_setmethods__["RMSResidual"] = _gpstk.PRSolution2_RMSResidual_set
    __swig_getmethods__["RMSResidual"] = _gpstk.PRSolution2_RMSResidual_get
    if _newclass:
        RMSResidual = _swig_property(_gpstk.PRSolution2_RMSResidual_get, _gpstk.PRSolution2_RMSResidual_set)
    __swig_setmethods__["MaxSlope"] = _gpstk.PRSolution2_MaxSlope_set
    __swig_getmethods__["MaxSlope"] = _gpstk.PRSolution2_MaxSlope_get
    if _newclass:
        MaxSlope = _swig_property(_gpstk.PRSolution2_MaxSlope_get, _gpstk.PRSolution2_MaxSlope_set)
    __swig_setmethods__["NIterations"] = _gpstk.PRSolution2_NIterations_set
    __swig_getmethods__["NIterations"] = _gpstk.PRSolution2_NIterations_get
    if _newclass:
        NIterations = _swig_property(_gpstk.PRSolution2_NIterations_get, _gpstk.PRSolution2_NIterations_set)
    __swig_setmethods__["Convergence"] = _gpstk.PRSolution2_Convergence_set
    __swig_getmethods__["Convergence"] = _gpstk.PRSolution2_Convergence_get
    if _newclass:
        Convergence = _swig_property(_gpstk.PRSolution2_Convergence_get, _gpstk.PRSolution2_Convergence_set)
    __swig_setmethods__["Nsvs"] = _gpstk.PRSolution2_Nsvs_set
    __swig_getmethods__["Nsvs"] = _gpstk.PRSolution2_Nsvs_get
    if _newclass:
        Nsvs = _swig_property(_gpstk.PRSolution2_Nsvs_get, _gpstk.PRSolution2_Nsvs_set)

    def PrepareAutonomousSolution(Tr, Sats, Pseudorange, Eph, SVP, pDebug=None):
        """
        PrepareAutonomousSolution(CommonTime Tr, vector_SatID Sats, vector_double Pseudorange, XvtStore_SatID Eph, Matrix< double > & SVP, std::ostream * pDebug=None) -> int
        PrepareAutonomousSolution(CommonTime Tr, vector_SatID Sats, vector_double Pseudorange, XvtStore_SatID Eph, Matrix< double > & SVP) -> int
        """
        return _gpstk.PRSolution2_PrepareAutonomousSolution(Tr, Sats, Pseudorange, Eph, SVP, pDebug)

    if _newclass:
        PrepareAutonomousSolution = staticmethod(PrepareAutonomousSolution)
    __swig_getmethods__["PrepareAutonomousSolution"] = lambda x: PrepareAutonomousSolution

    def AutonomousPRSolution(Tr, Use, SVP, pTropModel, Algebraic, n_iterate, converge, Sol, Cov, Resid, Slope, pDebug=None, satSystems=None):
        """
        AutonomousPRSolution(CommonTime Tr, std::vector< bool,std::allocator< bool > > const & Use, Matrix< double > const SVP, TropModel pTropModel, bool const Algebraic, int & n_iterate, double & converge, vector Sol, Matrix< double > & Cov, vector Resid, vector Slope, std::ostream * pDebug=None, gpstk::Vector< int > * satSystems=None) -> int
        AutonomousPRSolution(CommonTime Tr, std::vector< bool,std::allocator< bool > > const & Use, Matrix< double > const SVP, TropModel pTropModel, bool const Algebraic, int & n_iterate, double & converge, vector Sol, Matrix< double > & Cov, vector Resid, vector Slope, std::ostream * pDebug=None) -> int
        AutonomousPRSolution(CommonTime Tr, std::vector< bool,std::allocator< bool > > const & Use, Matrix< double > const SVP, TropModel pTropModel, bool const Algebraic, int & n_iterate, double & converge, vector Sol, Matrix< double > & Cov, vector Resid, vector Slope) -> int
        """
        return _gpstk.PRSolution2_AutonomousPRSolution(Tr, Use, SVP, pTropModel, Algebraic, n_iterate, converge, Sol, Cov, Resid, Slope, pDebug, satSystems)

    if _newclass:
        AutonomousPRSolution = staticmethod(AutonomousPRSolution)
    __swig_getmethods__["AutonomousPRSolution"] = lambda x: AutonomousPRSolution
    __swig_destroy__ = _gpstk.delete_PRSolution2
    __del__ = lambda self: None
PRSolution2_swigregister = _gpstk.PRSolution2_swigregister
PRSolution2_swigregister(PRSolution2)

def PRSolution2_PrepareAutonomousSolution(Tr, Sats, Pseudorange, Eph, SVP, pDebug=None):
    """
    PrepareAutonomousSolution(CommonTime Tr, vector_SatID Sats, vector_double Pseudorange, XvtStore_SatID Eph, Matrix< double > & SVP, std::ostream * pDebug=None) -> int
    PRSolution2_PrepareAutonomousSolution(CommonTime Tr, vector_SatID Sats, vector_double Pseudorange, XvtStore_SatID Eph, Matrix< double > & SVP) -> int
    """
    return _gpstk.PRSolution2_PrepareAutonomousSolution(Tr, Sats, Pseudorange, Eph, SVP, pDebug)

def PRSolution2_AutonomousPRSolution(Tr, Use, SVP, pTropModel, Algebraic, n_iterate, converge, Sol, Cov, Resid, Slope, pDebug=None, satSystems=None):
    """
    AutonomousPRSolution(CommonTime Tr, std::vector< bool,std::allocator< bool > > const & Use, Matrix< double > const SVP, TropModel pTropModel, bool const Algebraic, int & n_iterate, double & converge, vector Sol, Matrix< double > & Cov, vector Resid, vector Slope, std::ostream * pDebug=None, gpstk::Vector< int > * satSystems=None) -> int
    AutonomousPRSolution(CommonTime Tr, std::vector< bool,std::allocator< bool > > const & Use, Matrix< double > const SVP, TropModel pTropModel, bool const Algebraic, int & n_iterate, double & converge, vector Sol, Matrix< double > & Cov, vector Resid, vector Slope, std::ostream * pDebug=None) -> int
    PRSolution2_AutonomousPRSolution(CommonTime Tr, std::vector< bool,std::allocator< bool > > const & Use, Matrix< double > const SVP, TropModel pTropModel, bool const Algebraic, int & n_iterate, double & converge, vector Sol, Matrix< double > & Cov, vector Resid, vector Slope) -> int
    """
    return _gpstk.PRSolution2_AutonomousPRSolution(Tr, Use, SVP, pTropModel, Algebraic, n_iterate, converge, Sol, Cov, Resid, Slope, pDebug, satSystems)

class ExtractData(_object):
    """Proxy of C++ gpstk::ExtractData class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExtractData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExtractData, name)
    __repr__ = _swig_repr

    def isValid(self):
        """isValid(ExtractData self) -> bool"""
        return _gpstk.ExtractData_isValid(self)

    __swig_setmethods__["numSV"] = _gpstk.ExtractData_numSV_set
    __swig_getmethods__["numSV"] = _gpstk.ExtractData_numSV_get
    if _newclass:
        numSV = _swig_property(_gpstk.ExtractData_numSV_get, _gpstk.ExtractData_numSV_set)
    __swig_setmethods__["availableSV"] = _gpstk.ExtractData_availableSV_set
    __swig_getmethods__["availableSV"] = _gpstk.ExtractData_availableSV_get
    if _newclass:
        availableSV = _swig_property(_gpstk.ExtractData_availableSV_get, _gpstk.ExtractData_availableSV_set)
    __swig_setmethods__["obsData"] = _gpstk.ExtractData_obsData_set
    __swig_getmethods__["obsData"] = _gpstk.ExtractData_obsData_get
    if _newclass:
        obsData = _swig_property(_gpstk.ExtractData_obsData_get, _gpstk.ExtractData_obsData_set)

    def __init__(self):
        """__init__(gpstk::ExtractData self) -> ExtractData"""
        this = _gpstk.new_ExtractData()
        try:
            self.this.append(this)
        except:
            self.this = this

    def getData(self, *args):
        """
        getData(ExtractData self, Rinex3ObsData rinexData, int index) -> int
        getData(ExtractData self, Rinex3ObsData rinexData, std::string type, Rinex3ObsHeader hdr) -> int
        """
        return _gpstk.ExtractData_getData(self, *args)

    __swig_setmethods__["checkData"] = _gpstk.ExtractData_checkData_set
    __swig_getmethods__["checkData"] = _gpstk.ExtractData_checkData_get
    if _newclass:
        checkData = _swig_property(_gpstk.ExtractData_checkData_get, _gpstk.ExtractData_checkData_set)

    def setMinPRange(self, minPR):
        """setMinPRange(ExtractData self, double minPR) -> ExtractData"""
        return _gpstk.ExtractData_setMinPRange(self, minPR)


    def getMinPRange(self):
        """getMinPRange(ExtractData self) -> double"""
        return _gpstk.ExtractData_getMinPRange(self)


    def setMaxPRange(self, maxPR):
        """setMaxPRange(ExtractData self, double maxPR) -> ExtractData"""
        return _gpstk.ExtractData_setMaxPRange(self, maxPR)


    def getMaxPRange(self):
        """getMaxPRange(ExtractData self) -> double"""
        return _gpstk.ExtractData_getMaxPRange(self)

    __swig_destroy__ = _gpstk.delete_ExtractData
    __del__ = lambda self: None
ExtractData_swigregister = _gpstk.ExtractData_swigregister
ExtractData_swigregister(ExtractData)

class ExpressionException(Exception):
    """Proxy of C++ gpstk::ExpressionException class"""
    __swig_setmethods__ = {}
    for _s in [Exception]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExpressionException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExpressionException, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::ExpressionException self) -> ExpressionException
        __init__(gpstk::ExpressionException self, ExpressionException a) -> ExpressionException
        __init__(gpstk::ExpressionException self, Exception a) -> ExpressionException
        __init__(gpstk::ExpressionException self, std::string const & a, unsigned long b=0, gpstk::Exception::Severity c) -> ExpressionException
        __init__(gpstk::ExpressionException self, std::string const & a, unsigned long b=0) -> ExpressionException
        __init__(gpstk::ExpressionException self, std::string const & a) -> ExpressionException
        __init__(gpstk::ExpressionException self, char const * a, unsigned long b=0, gpstk::Exception::Severity c) -> ExpressionException
        __init__(gpstk::ExpressionException self, char const * a, unsigned long b=0) -> ExpressionException
        __init__(gpstk::ExpressionException self, char const * a) -> ExpressionException
        """
        this = _gpstk.new_ExpressionException(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_ExpressionException
    __del__ = lambda self: None

    def getName(self):
        """getName(ExpressionException self) -> std::string"""
        return _gpstk.ExpressionException_getName(self)

ExpressionException_swigregister = _gpstk.ExpressionException_swigregister
ExpressionException_swigregister(ExpressionException)

class Expression(_object):
    """Proxy of C++ gpstk::Expression class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Expression, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Expression, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::Expression self) -> Expression
        __init__(gpstk::Expression self, std::string const & str) -> Expression
        __init__(gpstk::Expression self, Expression rhs) -> Expression
        """
        this = _gpstk.new_Expression(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_Expression
    __del__ = lambda self: None

    def set(self, *args):
        """
        set(Expression self, std::string const name, double value) -> bool
        set(Expression self, char const * name, double value) -> bool
        """
        return _gpstk.Expression_set(self, *args)


    def setGPSConstants(self):
        """setGPSConstants(Expression self) -> bool"""
        return _gpstk.Expression_setGPSConstants(self)


    def setRinexObs(self, rotm):
        """setRinexObs(Expression self, map_RinexObsType_RinexDatum rotm) -> bool"""
        return _gpstk.Expression_setRinexObs(self, rotm)


    def setSvObsEpoch(self, soe):
        """setSvObsEpoch(Expression self, SvObsEpoch soe) -> bool"""
        return _gpstk.Expression_setSvObsEpoch(self, soe)


    def canEvaluate(self):
        """canEvaluate(Expression self) -> bool"""
        return _gpstk.Expression_canEvaluate(self)


    def evaluate(self):
        """evaluate(Expression self) -> double"""
        return _gpstk.Expression_evaluate(self)


    def __str__(self):
        """__str__(Expression self) -> std::string"""
        return _gpstk.Expression___str__(self)

Expression_swigregister = _gpstk.Expression_swigregister
Expression_swigregister(Expression)

class FFBinaryStream(FFStream):
    """Proxy of C++ gpstk::FFBinaryStream class"""
    __swig_setmethods__ = {}
    for _s in [FFStream]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FFBinaryStream, name, value)
    __swig_getmethods__ = {}
    for _s in [FFStream]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FFBinaryStream, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _gpstk.delete_FFBinaryStream
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(gpstk::FFBinaryStream self) -> FFBinaryStream
        __init__(gpstk::FFBinaryStream self, char const * fn, std::ios::openmode mode) -> FFBinaryStream
        __init__(gpstk::FFBinaryStream self, char const * fn) -> FFBinaryStream
        """
        this = _gpstk.new_FFBinaryStream(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def open(self, fn, mode):
        """open(FFBinaryStream self, char const * fn, std::ios::openmode mode)"""
        return _gpstk.FFBinaryStream_open(self, fn, mode)


    def getData(self, buff, length):
        """getData(FFBinaryStream self, char * buff, size_t length)"""
        return _gpstk.FFBinaryStream_getData(self, buff, length)


    def writeData(self, buff, length):
        """writeData(FFBinaryStream self, char const * buff, size_t length)"""
        return _gpstk.FFBinaryStream_writeData(self, buff, length)

FFBinaryStream_swigregister = _gpstk.FFBinaryStream_swigregister
FFBinaryStream_swigregister(FFBinaryStream)

class MoonPosition(_object):
    """Proxy of C++ gpstk::MoonPosition class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MoonPosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MoonPosition, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::MoonPosition self) -> MoonPosition"""
        this = _gpstk.new_MoonPosition()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_MoonPosition
    __del__ = lambda self: None

    def getPosition(self, t):
        """getPosition(MoonPosition self, CommonTime t) -> Triple"""
        return _gpstk.MoonPosition_getPosition(self, t)


    def getPositionCIS(self, t):
        """getPositionCIS(MoonPosition self, CommonTime t) -> Triple"""
        return _gpstk.MoonPosition_getPositionCIS(self, t)


    def getInitialTime(self):
        """getInitialTime(MoonPosition self) -> CommonTime"""
        return _gpstk.MoonPosition_getInitialTime(self)


    def getFinalTime(self):
        """getFinalTime(MoonPosition self) -> CommonTime"""
        return _gpstk.MoonPosition_getFinalTime(self)

MoonPosition_swigregister = _gpstk.MoonPosition_swigregister
MoonPosition_swigregister(MoonPosition)

class SunPosition(_object):
    """Proxy of C++ gpstk::SunPosition class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SunPosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SunPosition, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::SunPosition self) -> SunPosition"""
        this = _gpstk.new_SunPosition()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_SunPosition
    __del__ = lambda self: None

    def getPosition(self, t):
        """getPosition(SunPosition self, CommonTime t) -> Triple"""
        return _gpstk.SunPosition_getPosition(self, t)


    def getPositionCIS(self, t):
        """getPositionCIS(SunPosition self, CommonTime t) -> Triple"""
        return _gpstk.SunPosition_getPositionCIS(self, t)


    def getInitialTime(self):
        """getInitialTime(SunPosition self) -> CommonTime"""
        return _gpstk.SunPosition_getInitialTime(self)


    def getFinalTime(self):
        """getFinalTime(SunPosition self) -> CommonTime"""
        return _gpstk.SunPosition_getFinalTime(self)

SunPosition_swigregister = _gpstk.SunPosition_swigregister
SunPosition_swigregister(SunPosition)

class PoleTides(_object):
    """Proxy of C++ gpstk::PoleTides class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoleTides, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PoleTides, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(gpstk::PoleTides self) -> PoleTides
        __init__(gpstk::PoleTides self, double const & x, double const & y) -> PoleTides
        """
        this = _gpstk.new_PoleTides(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def getPoleTide(self, *args):
        """
        getPoleTide(PoleTides self, CommonTime t, Position p) -> Triple
        getPoleTide(PoleTides self, CommonTime t, Position p, double const & x, double const & y) -> Triple
        """
        return _gpstk.PoleTides_getPoleTide(self, *args)


    def setXY(self, x, y):
        """setXY(PoleTides self, double const & x, double const & y) -> PoleTides"""
        return _gpstk.PoleTides_setXY(self, x, y)


    def getX(self):
        """getX(PoleTides self) -> double"""
        return _gpstk.PoleTides_getX(self)


    def getY(self):
        """getY(PoleTides self) -> double"""
        return _gpstk.PoleTides_getY(self)

    __swig_destroy__ = _gpstk.delete_PoleTides
    __del__ = lambda self: None
PoleTides_swigregister = _gpstk.PoleTides_swigregister
PoleTides_swigregister(PoleTides)

class SolidTides(_object):
    """Proxy of C++ gpstk::SolidTides class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolidTides, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SolidTides, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(gpstk::SolidTides self) -> SolidTides"""
        this = _gpstk.new_SolidTides()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _gpstk.delete_SolidTides
    __del__ = lambda self: None

    def getSolidTide(self, t, p):
        """getSolidTide(SolidTides self, CommonTime t, Position p) -> Triple"""
        return _gpstk.SolidTides_getSolidTide(self, t, p)

SolidTides_swigregister = _gpstk.SolidTides_swigregister
SolidTides_swigregister(SolidTides)


def now(timeSystem=TimeSystem('UTC')):
    """
    Returns the current time (defined by what SystemTime() returns)
    in a CommonTime format, in the given TimeSystem.

    Parameters:
            -----------

        timeSystem:  the TimeSystem to assign to the output
    """
    t = SystemTime().toCommonTime()
    t.setTimeSystem(timeSystem)
    return t


def times(starttime, endtime, seconds=0.0, days=0):
    """
    Returns a generator expression of CommonTime objects between (or equal to)
    starttime and endtime.

    You may specify a timestep in seconds (floating/integral type)
    and/or days (integral type). Not specifying a timestep will
    return a generator that yields the starttime and endtime parameters.
    The timestep must be positive, or a gpstk.exceptions.InvalidRequest
    will be raised.
    """
    if (seconds < 0.0) or (days < 0):
        raise InvalidRequest('Negative time steps may not be used.')
        return

    if (seconds == 0.0) and (days == 0):
# empty generator:
        yield starttime
        yield endtime
        return

    t = CommonTime(starttime)
    while t <= endtime:
        yield CommonTime(t)
        t.addSeconds(seconds)
        t.addDays(days)


def moonPosition(time):
    """
    Returns the current position (A gpstk.Triple) of the moon.
    This is a functional wrapper on the moonPosition class.
    """
    return MoonPosition().getPosition(time)


def sunPosition(time):
    """
    Returns the current position (A gpstk.Triple) of the moon.
    This is a functional wrapper on the MoonPosition class.
    """
    return SunPosition().getPosition(time)


def poleTides(time, position, x, y):
    """
    Returns the effect (a gpstk.Triple) of pole tides (meters)
    on the given position, in the Up-East-North (UEN) reference frame.
    This is a functional wrapper on the (hidden) PoleTides class.
    """
    return PoleTides().getPoleTide(time, position, x, y)

def solidTides(time, position):
    """
    Returns the effect (a gpstk.Triple) of solid Earth tides (meters)
    at the given position and epoch, in the Up-East-North (UEN) reference frame.
    This is a functional wrapper on the (hidden) SolidTides class.
    """
    return SolidTides().getSolidTide(time, position)


def cartesian(x=0.0, y=0.0, z=0.0,
              model=None, frame=ReferenceFrame('Unknown')):
    "Returns a Position in the Cartesian coordinate system."
    return Position(x, y, z, Position.Cartesian, model, frame)


def geodetic(latitude=0.0, longitude=0.0, height=0.0,
             model=None, frame=ReferenceFrame('Unknown')):
    "Returns a Position in the Geodetic coordinate system."
    return Position(latitude, longitude, height, Position.Geodetic, model, frame)


def spherical(theta=0.0, phi=0.0, radius=0.0,
              model=None, frame=ReferenceFrame('Unknown')):
    "Returns a Position in the Spherical coordinate system."
    return Position(theta, phi, radius, Position.Spherical, model, frame)


def geocentric(latitude=0.0, longitude=0.0, radius=0.0,
               model=None, frame=ReferenceFrame('Unknown')):
    "Returns a Position in the Geocentric coordinate system."
    return Position(latitude, longitude, radius, Position.Geocentric, model, frame)


def eval(expr, **kwargs):
    e = Expression(expr)
    e.setGPSConstants()
    for key in kwargs:
        e.set(key, kwargs[key])
    return e.evaluate()




def readRinex3Clock(fileName, strict=False, filterfunction=lambda x: True):
    """
    This reads from a Rinex3Clock file and returns a two-element tuple
    of the header and the sequence of data objects.

    Parameters:
    -----------

    strict:  if the data object sequence should be strictly evaluated.
           If it is, it will be a list, otherwise, it will be a generator.

    filterfunction: a function that takes a Rinex3Clock Data object
                    and returns whether it should be included in the
                    data output. This is similar to using the filter()
                    function on the output list, but eliminates the extra step.
    """
    import os.path
    if not os.path.isfile(fileName):
        raise IOError(fileName + ' does not exist.')
    stream = Rinex3ClockStream .inRinex3ClockStream (fileName)
    header = stream.readHeader()
    def readRinex3ClockData (fileName):
        while True:
            try:
               x = stream.readData()
               if filterfunction(x):
                  yield x
            except EndOfFile:
               Rinex3ClockStream._remove(stream)
               break

    data = readRinex3ClockData (fileName)
    if strict:
        return (header, list(data))
    else:
        return (header, data)


def writeRinex3Clock(fileName, header, data):
    """
    Writes a Rinex3Clock Header and sequence of Rinex3Clock Data objects to a file.
    Note that this overwrites the file if it already exists.

    Parameters:
    -----------

    fileName:  the name of the file to write to.

    header:  the Rinex3Clock Header object

    data:  the sequence of Rinex3Clock Data objects
    """
    s = Rinex3ClockStream .outRinex3ClockStream (fileName)
    s.writeHeader(header)
    for d in data:
        s.writeData(d)
    Rinex3ClockStream ._remove(s)



def readRinex3Nav(fileName, strict=False, filterfunction=lambda x: True):
    """
    This reads from a Rinex3Nav file and returns a two-element tuple
    of the header and the sequence of data objects.

    Parameters:
    -----------

    strict:  if the data object sequence should be strictly evaluated.
           If it is, it will be a list, otherwise, it will be a generator.

    filterfunction: a function that takes a Rinex3Nav Data object
                    and returns whether it should be included in the
                    data output. This is similar to using the filter()
                    function on the output list, but eliminates the extra step.
    """
    import os.path
    if not os.path.isfile(fileName):
        raise IOError(fileName + ' does not exist.')
    stream = Rinex3NavStream .inRinex3NavStream (fileName)
    header = stream.readHeader()
    def readRinex3NavData (fileName):
        while True:
            try:
               x = stream.readData()
               if filterfunction(x):
                  yield x
            except EndOfFile:
               Rinex3NavStream._remove(stream)
               break

    data = readRinex3NavData (fileName)
    if strict:
        return (header, list(data))
    else:
        return (header, data)


def writeRinex3Nav(fileName, header, data):
    """
    Writes a Rinex3Nav Header and sequence of Rinex3Nav Data objects to a file.
    Note that this overwrites the file if it already exists.

    Parameters:
    -----------

    fileName:  the name of the file to write to.

    header:  the Rinex3Nav Header object

    data:  the sequence of Rinex3Nav Data objects
    """
    s = Rinex3NavStream .outRinex3NavStream (fileName)
    s.writeHeader(header)
    for d in data:
        s.writeData(d)
    Rinex3NavStream ._remove(s)



def readRinex3Obs(fileName, strict=False, filterfunction=lambda x: True):
    """
    This reads from a Rinex3Obs file and returns a two-element tuple
    of the header and the sequence of data objects.

    Parameters:
    -----------

    strict:  if the data object sequence should be strictly evaluated.
           If it is, it will be a list, otherwise, it will be a generator.

    filterfunction: a function that takes a Rinex3Obs Data object
                    and returns whether it should be included in the
                    data output. This is similar to using the filter()
                    function on the output list, but eliminates the extra step.
    """
    import os.path
    if not os.path.isfile(fileName):
        raise IOError(fileName + ' does not exist.')
    stream = Rinex3ObsStream .inRinex3ObsStream (fileName)
    header = stream.readHeader()
    def readRinex3ObsData (fileName):
        while True:
            try:
               x = stream.readData()
               if filterfunction(x):
                  yield x
            except EndOfFile:
               Rinex3ObsStream._remove(stream)
               break

    data = readRinex3ObsData (fileName)
    if strict:
        return (header, list(data))
    else:
        return (header, data)


def writeRinex3Obs(fileName, header, data):
    """
    Writes a Rinex3Obs Header and sequence of Rinex3Obs Data objects to a file.
    Note that this overwrites the file if it already exists.

    Parameters:
    -----------

    fileName:  the name of the file to write to.

    header:  the Rinex3Obs Header object

    data:  the sequence of Rinex3Obs Data objects
    """
    s = Rinex3ObsStream .outRinex3ObsStream (fileName)
    s.writeHeader(header)
    for d in data:
        s.writeData(d)
    Rinex3ObsStream ._remove(s)



def readRinexClock(fileName, strict=False, filterfunction=lambda x: True):
    """
    This reads from a RinexClock file and returns a two-element tuple
    of the header and the sequence of data objects.

    Parameters:
    -----------

    strict:  if the data object sequence should be strictly evaluated.
           If it is, it will be a list, otherwise, it will be a generator.

    filterfunction: a function that takes a RinexClock Data object
                    and returns whether it should be included in the
                    data output. This is similar to using the filter()
                    function on the output list, but eliminates the extra step.
    """
    import os.path
    if not os.path.isfile(fileName):
        raise IOError(fileName + ' does not exist.')
    stream = RinexClockStream .inRinexClockStream (fileName)
    header = stream.readHeader()
    def readRinexClockData (fileName):
        while True:
            try:
               x = stream.readData()
               if filterfunction(x):
                  yield x
            except EndOfFile:
               RinexClockStream._remove(stream)
               break

    data = readRinexClockData (fileName)
    if strict:
        return (header, list(data))
    else:
        return (header, data)


def writeRinexClock(fileName, header, data):
    """
    Writes a RinexClock Header and sequence of RinexClock Data objects to a file.
    Note that this overwrites the file if it already exists.

    Parameters:
    -----------

    fileName:  the name of the file to write to.

    header:  the RinexClock Header object

    data:  the sequence of RinexClock Data objects
    """
    s = RinexClockStream .outRinexClockStream (fileName)
    s.writeHeader(header)
    for d in data:
        s.writeData(d)
    RinexClockStream ._remove(s)



def readRinexMet(fileName, strict=False, filterfunction=lambda x: True):
    """
    This reads from a RinexMet file and returns a two-element tuple
    of the header and the sequence of data objects.

    Parameters:
    -----------

    strict:  if the data object sequence should be strictly evaluated.
           If it is, it will be a list, otherwise, it will be a generator.

    filterfunction: a function that takes a RinexMet Data object
                    and returns whether it should be included in the
                    data output. This is similar to using the filter()
                    function on the output list, but eliminates the extra step.
    """
    import os.path
    if not os.path.isfile(fileName):
        raise IOError(fileName + ' does not exist.')
    stream = RinexMetStream .inRinexMetStream (fileName)
    header = stream.readHeader()
    def readRinexMetData (fileName):
        while True:
            try:
               x = stream.readData()
               if filterfunction(x):
                  yield x
            except EndOfFile:
               RinexMetStream._remove(stream)
               break

    data = readRinexMetData (fileName)
    if strict:
        return (header, list(data))
    else:
        return (header, data)


def writeRinexMet(fileName, header, data):
    """
    Writes a RinexMet Header and sequence of RinexMet Data objects to a file.
    Note that this overwrites the file if it already exists.

    Parameters:
    -----------

    fileName:  the name of the file to write to.

    header:  the RinexMet Header object

    data:  the sequence of RinexMet Data objects
    """
    s = RinexMetStream .outRinexMetStream (fileName)
    s.writeHeader(header)
    for d in data:
        s.writeData(d)
    RinexMetStream ._remove(s)



def readRinexNav(fileName, strict=False, filterfunction=lambda x: True):
    """
    This reads from a RinexNav file and returns a two-element tuple
    of the header and the sequence of data objects.

    Parameters:
    -----------

    strict:  if the data object sequence should be strictly evaluated.
           If it is, it will be a list, otherwise, it will be a generator.

    filterfunction: a function that takes a RinexNav Data object
                    and returns whether it should be included in the
                    data output. This is similar to using the filter()
                    function on the output list, but eliminates the extra step.
    """
    import os.path
    if not os.path.isfile(fileName):
        raise IOError(fileName + ' does not exist.')
    stream = RinexNavStream .inRinexNavStream (fileName)
    header = stream.readHeader()
    def readRinexNavData (fileName):
        while True:
            try:
               x = stream.readData()
               if filterfunction(x):
                  yield x
            except EndOfFile:
               RinexNavStream._remove(stream)
               break

    data = readRinexNavData (fileName)
    if strict:
        return (header, list(data))
    else:
        return (header, data)


def writeRinexNav(fileName, header, data):
    """
    Writes a RinexNav Header and sequence of RinexNav Data objects to a file.
    Note that this overwrites the file if it already exists.

    Parameters:
    -----------

    fileName:  the name of the file to write to.

    header:  the RinexNav Header object

    data:  the sequence of RinexNav Data objects
    """
    s = RinexNavStream .outRinexNavStream (fileName)
    s.writeHeader(header)
    for d in data:
        s.writeData(d)
    RinexNavStream ._remove(s)



def readRinexObs(fileName, strict=False, filterfunction=lambda x: True):
    """
    This reads from a RinexObs file and returns a two-element tuple
    of the header and the sequence of data objects.

    Parameters:
    -----------

    strict:  if the data object sequence should be strictly evaluated.
           If it is, it will be a list, otherwise, it will be a generator.

    filterfunction: a function that takes a RinexObs Data object
                    and returns whether it should be included in the
                    data output. This is similar to using the filter()
                    function on the output list, but eliminates the extra step.
    """
    import os.path
    if not os.path.isfile(fileName):
        raise IOError(fileName + ' does not exist.')
    stream = RinexObsStream .inRinexObsStream (fileName)
    header = stream.readHeader()
    def readRinexObsData (fileName):
        while True:
            try:
               x = stream.readData()
               if filterfunction(x):
                  yield x
            except EndOfFile:
               RinexObsStream._remove(stream)
               break

    data = readRinexObsData (fileName)
    if strict:
        return (header, list(data))
    else:
        return (header, data)


def writeRinexObs(fileName, header, data):
    """
    Writes a RinexObs Header and sequence of RinexObs Data objects to a file.
    Note that this overwrites the file if it already exists.

    Parameters:
    -----------

    fileName:  the name of the file to write to.

    header:  the RinexObs Header object

    data:  the sequence of RinexObs Data objects
    """
    s = RinexObsStream .outRinexObsStream (fileName)
    s.writeHeader(header)
    for d in data:
        s.writeData(d)
    RinexObsStream ._remove(s)



def readSEM(fileName, strict=False, filterfunction=lambda x: True):
    """
    This reads from a SEM file and returns a two-element tuple
    of the header and the sequence of data objects.

    Parameters:
    -----------

    strict:  if the data object sequence should be strictly evaluated.
           If it is, it will be a list, otherwise, it will be a generator.

    filterfunction: a function that takes a SEM Data object
                    and returns whether it should be included in the
                    data output. This is similar to using the filter()
                    function on the output list, but eliminates the extra step.
    """
    import os.path
    if not os.path.isfile(fileName):
        raise IOError(fileName + ' does not exist.')
    stream = SEMStream .inSEMStream (fileName)
    header = stream.readHeader()
    def readSEMData (fileName):
        while True:
            try:
               x = stream.readData()
               if filterfunction(x):
                  yield x
            except EndOfFile:
               SEMStream._remove(stream)
               break

    data = readSEMData (fileName)
    if strict:
        return (header, list(data))
    else:
        return (header, data)


def writeSEM(fileName, header, data):
    """
    Writes a SEM Header and sequence of SEM Data objects to a file.
    Note that this overwrites the file if it already exists.

    Parameters:
    -----------

    fileName:  the name of the file to write to.

    header:  the SEM Header object

    data:  the sequence of SEM Data objects
    """
    s = SEMStream .outSEMStream (fileName)
    s.writeHeader(header)
    for d in data:
        s.writeData(d)
    SEMStream ._remove(s)



def readSP3(fileName, strict=False, filterfunction=lambda x: True):
    """
    This reads from a SP3 file and returns a two-element tuple
    of the header and the sequence of data objects.

    Parameters:
    -----------

    strict:  if the data object sequence should be strictly evaluated.
           If it is, it will be a list, otherwise, it will be a generator.

    filterfunction: a function that takes a SP3 Data object
                    and returns whether it should be included in the
                    data output. This is similar to using the filter()
                    function on the output list, but eliminates the extra step.
    """
    import os.path
    if not os.path.isfile(fileName):
        raise IOError(fileName + ' does not exist.')
    stream = SP3Stream .inSP3Stream (fileName)
    header = stream.readHeader()
    def readSP3Data (fileName):
        while True:
            try:
               x = stream.readData()
               if filterfunction(x):
                  yield x
            except EndOfFile:
               SP3Stream._remove(stream)
               break

    data = readSP3Data (fileName)
    if strict:
        return (header, list(data))
    else:
        return (header, data)


def writeSP3(fileName, header, data):
    """
    Writes a SP3 Header and sequence of SP3 Data objects to a file.
    Note that this overwrites the file if it already exists.

    Parameters:
    -----------

    fileName:  the name of the file to write to.

    header:  the SP3 Header object

    data:  the sequence of SP3 Data objects
    """
    s = SP3Stream .outSP3Stream (fileName)
    s.writeHeader(header)
    for d in data:
        s.writeData(d)
    SP3Stream ._remove(s)



def readYuma(fileName, strict=False, filterfunction=lambda x: True):
    """
    This reads from a Yuma file and returns a two-element tuple
    of the header and the sequence of data objects.

    Parameters:
    -----------

    strict:  if the data object sequence should be strictly evaluated.
           If it is, it will be a list, otherwise, it will be a generator.

    filterfunction: a function that takes a Yuma Data object
                    and returns whether it should be included in the
                    data output. This is similar to using the filter()
                    function on the output list, but eliminates the extra step.
    """
    import os.path
    if not os.path.isfile(fileName):
        raise IOError(fileName + ' does not exist.')
    stream = YumaStream .inYumaStream (fileName)
    header = stream.readHeader()
    def readYumaData (fileName):
        while True:
            try:
               x = stream.readData()
               if filterfunction(x):
                  yield x
            except EndOfFile:
               YumaStream._remove(stream)
               break

    data = readYumaData (fileName)
    if strict:
        return (header, list(data))
    else:
        return (header, data)


def writeYuma(fileName, header, data):
    """
    Writes a Yuma Header and sequence of Yuma Data objects to a file.
    Note that this overwrites the file if it already exists.

    Parameters:
    -----------

    fileName:  the name of the file to write to.

    header:  the Yuma Header object

    data:  the sequence of Yuma Data objects
    """
    s = YumaStream .outYumaStream (fileName)
    s.writeHeader(header)
    for d in data:
        s.writeData(d)
    YumaStream ._remove(s)



def writeEpochs(rodarr, roh, svid, data, where, rotidx):
    """writeEpochs(vector_Rinex3ObsData rodarr, Rinex3ObsHeader roh, RinexSatID svid, vector_double data, vector_int where, int const rotidx)"""
    return _gpstk.writeEpochs(rodarr, roh, svid, data, where, rotidx)

        # clean-up the dir listing by removing *_swigregister.
import gpstk
stuff=None
to_remove=[]
for stuff in locals():
    if stuff.endswith('_swigregister'):
        to_remove.append(stuff)
for stuff in to_remove:
    del locals()[stuff]
del locals()['stuff']
del locals()['to_remove']

# This file is compatible with both classic and new-style classes.


